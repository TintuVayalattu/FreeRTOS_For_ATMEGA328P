
rtosdemo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000050  00800100  00002b9c  00002c30  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002b9c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000686  00800150  00800150  00002c80  2**0
                  ALLOC
  3 .debug_aranges 000001c0  00000000  00000000  00002c80  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000092f  00000000  00000000  00002e40  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00003763  00000000  00000000  0000376f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000fd0  00000000  00000000  00006ed2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00003695  00000000  00000000  00007ea2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000730  00000000  00000000  0000b538  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00001760  00000000  00000000  0000bc68  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000212f  00000000  00000000  0000d3c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  0000f4f7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 3a 12 	jmp	0x2474	; 0x2474 <__vector_11>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 77 01 	jmp	0x2ee	; 0x2ee <__vector_18>
      4c:	0c 94 35 01 	jmp	0x26a	; 0x26a <__vector_19>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	ec e9       	ldi	r30, 0x9C	; 156
      7c:	fb e2       	ldi	r31, 0x2B	; 43
      7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
      84:	a0 35       	cpi	r26, 0x50	; 80
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
      8a:	17 e0       	ldi	r17, 0x07	; 7
      8c:	a0 e5       	ldi	r26, 0x50	; 80
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a6 3d       	cpi	r26, 0xD6	; 214
      96:	b1 07       	cpc	r27, r17
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 56 00 	call	0xac	; 0xac <main>
      9e:	0c 94 cc 15 	jmp	0x2b98	; 0x2b98 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <vApplicationIdleHook>:
}
/*-----------------------------------------------------------*/

void vApplicationIdleHook( void )
{
	vCoRoutineSchedule();
      a6:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <vCoRoutineSchedule>
}
      aa:	08 95       	ret

000000ac <main>:
void vApplicationIdleHook( void );

/*-----------------------------------------------------------*/

short main( void )
{
      ac:	ef 92       	push	r14
      ae:	ff 92       	push	r15
      b0:	0f 93       	push	r16
      b2:	df 93       	push	r29
      b4:	cf 93       	push	r28
      b6:	0f 92       	push	r0
      b8:	cd b7       	in	r28, 0x3d	; 61
      ba:	de b7       	in	r29, 0x3e	; 62

static void prvIncrementResetCount( void )
{
unsigned char ucCount;

	eeprom_read_block( &ucCount, mainRESET_COUNT_ADDRESS, sizeof( ucCount ) );
      bc:	ce 01       	movw	r24, r28
      be:	01 96       	adiw	r24, 0x01	; 1
      c0:	60 e5       	ldi	r22, 0x50	; 80
      c2:	70 e0       	ldi	r23, 0x00	; 0
      c4:	41 e0       	ldi	r20, 0x01	; 1
      c6:	50 e0       	ldi	r21, 0x00	; 0
      c8:	0e 94 ae 15 	call	0x2b5c	; 0x2b5c <__eerd_block_m328p>
	ucCount++;
      cc:	69 81       	ldd	r22, Y+1	; 0x01
      ce:	6f 5f       	subi	r22, 0xFF	; 255
      d0:	69 83       	std	Y+1, r22	; 0x01
	eeprom_write_byte( mainRESET_COUNT_ADDRESS, ucCount );
      d2:	80 e5       	ldi	r24, 0x50	; 80
      d4:	90 e0       	ldi	r25, 0x00	; 0
      d6:	0e 94 be 15 	call	0x2b7c	; 0x2b7c <__eewr_byte_m328p>
short main( void )
{
	prvIncrementResetCount();

	/* Setup the LED's for output. */
	vParTestInitialise();
      da:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <vParTestInitialise>

	/* Create the standard demo tasks. */
	vStartIntegerMathTasks( tskIDLE_PRIORITY );
      de:	80 e0       	ldi	r24, 0x00	; 0
      e0:	0e 94 c7 13 	call	0x278e	; 0x278e <vStartIntegerMathTasks>
	vAltStartComTestTasks( mainCOM_TEST_PRIORITY, mainCOM_TEST_BAUD_RATE, mainCOM_TEST_LED );
      e4:	82 e0       	ldi	r24, 0x02	; 2
      e6:	40 e0       	ldi	r20, 0x00	; 0
      e8:	56 e9       	ldi	r21, 0x96	; 150
      ea:	60 e0       	ldi	r22, 0x00	; 0
      ec:	70 e0       	ldi	r23, 0x00	; 0
      ee:	24 e0       	ldi	r18, 0x04	; 4
      f0:	0e 94 a0 14 	call	0x2940	; 0x2940 <vAltStartComTestTasks>
	vStartPolledQueueTasks( mainQUEUE_POLL_PRIORITY );
      f4:	82 e0       	ldi	r24, 0x02	; 2
      f6:	0e 94 e8 13 	call	0x27d0	; 0x27d0 <vStartPolledQueueTasks>
	//vStartRegTestTasks();

	/* Create the tasks defined within this file. */
	xTaskCreate( vErrorChecks, "Check", configMINIMAL_STACK_SIZE, NULL, mainCHECK_TASK_PRIORITY, NULL );
      fa:	88 e9       	ldi	r24, 0x98	; 152
      fc:	90 e0       	ldi	r25, 0x00	; 0
      fe:	60 e0       	ldi	r22, 0x00	; 0
     100:	71 e0       	ldi	r23, 0x01	; 1
     102:	45 e5       	ldi	r20, 0x55	; 85
     104:	50 e0       	ldi	r21, 0x00	; 0
     106:	20 e0       	ldi	r18, 0x00	; 0
     108:	30 e0       	ldi	r19, 0x00	; 0
     10a:	03 e0       	ldi	r16, 0x03	; 3
     10c:	ee 24       	eor	r14, r14
     10e:	ff 24       	eor	r15, r15
     110:	0e 94 9d 09 	call	0x133a	; 0x133a <xTaskCreate>

	/* Create the co-routines that flash the LED's. */
	vStartFlashCoRoutines( mainNUM_FLASH_COROUTINES );
     114:	83 e0       	ldi	r24, 0x03	; 3
     116:	0e 94 99 12 	call	0x2532	; 0x2532 <vStartFlashCoRoutines>

	/* In this port, to use preemptive scheduler define configUSE_PREEMPTION
	as 1 in portmacro.h.  To use the cooperative scheduler define
	configUSE_PREEMPTION as 0. */
	vTaskStartScheduler();
     11a:	0e 94 96 0a 	call	0x152c	; 0x152c <vTaskStartScheduler>

	return 0;
}
     11e:	80 e0       	ldi	r24, 0x00	; 0
     120:	90 e0       	ldi	r25, 0x00	; 0
     122:	0f 90       	pop	r0
     124:	cf 91       	pop	r28
     126:	df 91       	pop	r29
     128:	0f 91       	pop	r16
     12a:	ff 90       	pop	r15
     12c:	ef 90       	pop	r14
     12e:	08 95       	ret

00000130 <vErrorChecks>:
/*-----------------------------------------------------------*/

static void vErrorChecks( void *pvParameters )
{
     130:	1f 93       	push	r17
{
static portBASE_TYPE xErrorHasOccurred = pdFALSE;

	if( xAreIntegerMathsTaskStillRunning() != pdTRUE )
	{
		xErrorHasOccurred = pdTRUE;
     132:	11 e0       	ldi	r17, 0x01	; 1

	/* Cycle for ever, delaying then checking all the other tasks are still
	operating without error. */
	for( ;; )
	{
		vTaskDelay( mainCHECK_PERIOD );
     134:	84 ef       	ldi	r24, 0xF4	; 244
     136:	91 e0       	ldi	r25, 0x01	; 1
     138:	0e 94 99 08 	call	0x1132	; 0x1132 <vTaskDelay>

		/* Perform a bit of 32bit maths to ensure the registers used by the
		integer tasks get some exercise. The result here is not important -
		see the demo application documentation for more info. */
		ulDummyVariable *= 3;
     13c:	20 91 06 01 	lds	r18, 0x0106
     140:	30 91 07 01 	lds	r19, 0x0107
     144:	40 91 08 01 	lds	r20, 0x0108
     148:	50 91 09 01 	lds	r21, 0x0109
     14c:	da 01       	movw	r26, r20
     14e:	c9 01       	movw	r24, r18
     150:	88 0f       	add	r24, r24
     152:	99 1f       	adc	r25, r25
     154:	aa 1f       	adc	r26, r26
     156:	bb 1f       	adc	r27, r27
     158:	82 0f       	add	r24, r18
     15a:	93 1f       	adc	r25, r19
     15c:	a4 1f       	adc	r26, r20
     15e:	b5 1f       	adc	r27, r21
     160:	80 93 06 01 	sts	0x0106, r24
     164:	90 93 07 01 	sts	0x0107, r25
     168:	a0 93 08 01 	sts	0x0108, r26
     16c:	b0 93 09 01 	sts	0x0109, r27

static void prvCheckOtherTasksAreStillRunning( void )
{
static portBASE_TYPE xErrorHasOccurred = pdFALSE;

	if( xAreIntegerMathsTaskStillRunning() != pdTRUE )
     170:	0e 94 c0 13 	call	0x2780	; 0x2780 <xAreIntegerMathsTaskStillRunning>
     174:	81 30       	cpi	r24, 0x01	; 1
     176:	11 f0       	breq	.+4      	; 0x17c <vErrorChecks+0x4c>
	{
		xErrorHasOccurred = pdTRUE;
     178:	10 93 50 01 	sts	0x0150, r17
	}

	if( xAreComTestTasksStillRunning() != pdTRUE )
     17c:	0e 94 99 14 	call	0x2932	; 0x2932 <xAreComTestTasksStillRunning>
     180:	81 30       	cpi	r24, 0x01	; 1
     182:	11 f0       	breq	.+4      	; 0x188 <vErrorChecks+0x58>
	{
		xErrorHasOccurred = pdTRUE;
     184:	10 93 50 01 	sts	0x0150, r17
	}

	if( xArePollingQueuesStillRunning() != pdTRUE )
     188:	0e 94 db 13 	call	0x27b6	; 0x27b6 <xArePollingQueuesStillRunning>
     18c:	81 30       	cpi	r24, 0x01	; 1
     18e:	11 f0       	breq	.+4      	; 0x194 <vErrorChecks+0x64>
	{
		xErrorHasOccurred = pdTRUE;
     190:	10 93 50 01 	sts	0x0150, r17
	}

	if( xAreRegTestTasksStillRunning() != pdTRUE )
     194:	0e 94 28 02 	call	0x450	; 0x450 <xAreRegTestTasksStillRunning>
     198:	81 30       	cpi	r24, 0x01	; 1
     19a:	11 f0       	breq	.+4      	; 0x1a0 <vErrorChecks+0x70>
	{
		xErrorHasOccurred = pdTRUE;
     19c:	10 93 50 01 	sts	0x0150, r17
	}

	if( xErrorHasOccurred == pdFALSE )
     1a0:	80 91 50 01 	lds	r24, 0x0150
     1a4:	88 23       	and	r24, r24
     1a6:	31 f6       	brne	.-116    	; 0x134 <vErrorChecks+0x4>
	{
		/* Toggle the LED if everything is okay so we know if an error occurs even if not
		using console IO. */
		vParTestToggleLED( mainCHECK_TASK_LED );
     1a8:	85 e0       	ldi	r24, 0x05	; 5
     1aa:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <vParTestToggleLED>
     1ae:	c2 cf       	rjmp	.-124    	; 0x134 <vErrorChecks+0x4>

000001b0 <vParTestInitialise>:

/*-----------------------------------------------------------*/

void vParTestInitialise( void )
{
	ucCurrentOutputValue = partstALL_OUTPUTS_OFF;
     1b0:	8f ef       	ldi	r24, 0xFF	; 255
     1b2:	80 93 0a 01 	sts	0x010A, r24

	/* Set port B direction to outputs.  Start with all output off. */
	DDRB = partstALL_BITS_OUTPUT;
     1b6:	84 b9       	out	0x04, r24	; 4
	PORTB = ucCurrentOutputValue;
     1b8:	80 91 0a 01 	lds	r24, 0x010A
     1bc:	85 b9       	out	0x05, r24	; 5
}
     1be:	08 95       	ret

000001c0 <vParTestToggleLED>:
	}
}
/*-----------------------------------------------------------*/

void vParTestToggleLED( unsigned portBASE_TYPE uxLED )
{
     1c0:	1f 93       	push	r17
     1c2:	28 2f       	mov	r18, r24
unsigned char ucBit;

	if( uxLED <= partstMAX_OUTPUT_LED )
     1c4:	88 30       	cpi	r24, 0x08	; 8
     1c6:	e8 f4       	brcc	.+58     	; 0x202 <vParTestToggleLED+0x42>
	{
		ucBit = ( ( unsigned char ) 1 ) << uxLED;
     1c8:	81 e0       	ldi	r24, 0x01	; 1
     1ca:	90 e0       	ldi	r25, 0x00	; 0
     1cc:	02 c0       	rjmp	.+4      	; 0x1d2 <vParTestToggleLED+0x12>
     1ce:	88 0f       	add	r24, r24
     1d0:	99 1f       	adc	r25, r25
     1d2:	2a 95       	dec	r18
     1d4:	e2 f7       	brpl	.-8      	; 0x1ce <vParTestToggleLED+0xe>
     1d6:	18 2f       	mov	r17, r24

		vTaskSuspendAll();
     1d8:	0e 94 92 03 	call	0x724	; 0x724 <vTaskSuspendAll>
		{
			if( ucCurrentOutputValue & ucBit )
     1dc:	80 91 0a 01 	lds	r24, 0x010A
     1e0:	81 23       	and	r24, r17
     1e2:	29 f0       	breq	.+10     	; 0x1ee <vParTestToggleLED+0x2e>
			{
				ucCurrentOutputValue &= ~ucBit;
     1e4:	80 91 0a 01 	lds	r24, 0x010A
     1e8:	10 95       	com	r17
     1ea:	18 23       	and	r17, r24
     1ec:	03 c0       	rjmp	.+6      	; 0x1f4 <vParTestToggleLED+0x34>
			}
			else
			{
				ucCurrentOutputValue |= ucBit;
     1ee:	80 91 0a 01 	lds	r24, 0x010A
     1f2:	18 2b       	or	r17, r24
     1f4:	10 93 0a 01 	sts	0x010A, r17
			}

			PORTB = ucCurrentOutputValue;
     1f8:	80 91 0a 01 	lds	r24, 0x010A
     1fc:	85 b9       	out	0x05, r24	; 5
		}
		xTaskResumeAll();			
     1fe:	0e 94 d4 06 	call	0xda8	; 0xda8 <xTaskResumeAll>
	}
}
     202:	1f 91       	pop	r17
     204:	08 95       	ret

00000206 <vParTestSetLED>:
	PORTB = ucCurrentOutputValue;
}
/*-----------------------------------------------------------*/

void vParTestSetLED( unsigned portBASE_TYPE uxLED, signed portBASE_TYPE xValue )
{
     206:	0f 93       	push	r16
     208:	1f 93       	push	r17
     20a:	28 2f       	mov	r18, r24
     20c:	06 2f       	mov	r16, r22
unsigned char ucBit = ( unsigned char ) 1;

	if( uxLED <= partstMAX_OUTPUT_LED )
     20e:	88 30       	cpi	r24, 0x08	; 8
     210:	d8 f4       	brcc	.+54     	; 0x248 <vParTestSetLED+0x42>
	{
		ucBit <<= uxLED;	
     212:	81 e0       	ldi	r24, 0x01	; 1
     214:	90 e0       	ldi	r25, 0x00	; 0
     216:	02 c0       	rjmp	.+4      	; 0x21c <vParTestSetLED+0x16>
     218:	88 0f       	add	r24, r24
     21a:	99 1f       	adc	r25, r25
     21c:	2a 95       	dec	r18
     21e:	e2 f7       	brpl	.-8      	; 0x218 <vParTestSetLED+0x12>
     220:	18 2f       	mov	r17, r24

		vTaskSuspendAll();
     222:	0e 94 92 03 	call	0x724	; 0x724 <vTaskSuspendAll>
		{
			if( xValue == pdTRUE )
     226:	01 30       	cpi	r16, 0x01	; 1
     228:	29 f4       	brne	.+10     	; 0x234 <vParTestSetLED+0x2e>
			{
				ucBit ^= ( unsigned char ) 0xff;
				ucCurrentOutputValue &= ucBit;
     22a:	80 91 0a 01 	lds	r24, 0x010A
     22e:	10 95       	com	r17
     230:	18 23       	and	r17, r24
     232:	03 c0       	rjmp	.+6      	; 0x23a <vParTestSetLED+0x34>
			}
			else
			{
				ucCurrentOutputValue |= ucBit;
     234:	80 91 0a 01 	lds	r24, 0x010A
     238:	18 2b       	or	r17, r24
     23a:	10 93 0a 01 	sts	0x010A, r17
			}

			PORTB = ucCurrentOutputValue;
     23e:	80 91 0a 01 	lds	r24, 0x010A
     242:	85 b9       	out	0x05, r24	; 5
		}
		xTaskResumeAll();
     244:	0e 94 d4 06 	call	0xda8	; 0xda8 <xTaskResumeAll>
	}
}
     248:	1f 91       	pop	r17
     24a:	0f 91       	pop	r16
     24c:	08 95       	ret

0000024e <vSerialClose>:
	( void ) xPort;

	/* Turn off the interrupts.  We may also want to delete the queues and/or
	re-install the original ISR. */

	portENTER_CRITICAL();
     24e:	0f b6       	in	r0, 0x3f	; 63
     250:	f8 94       	cli
     252:	0f 92       	push	r0
	{
		vInterruptOff();
     254:	e1 ec       	ldi	r30, 0xC1	; 193
     256:	f0 e0       	ldi	r31, 0x00	; 0
     258:	80 81       	ld	r24, Z
     25a:	8f 7d       	andi	r24, 0xDF	; 223
     25c:	80 83       	st	Z, r24
		ucByte = UCSR0B;
     25e:	80 81       	ld	r24, Z
		ucByte &= ~serRX_INT_ENABLE;
     260:	8f 77       	andi	r24, 0x7F	; 127
		UCSR0B = ucByte;
     262:	80 83       	st	Z, r24
	}
	portEXIT_CRITICAL();
     264:	0f 90       	pop	r0
     266:	0f be       	out	0x3f, r0	; 63
}
     268:	08 95       	ret

0000026a <__vector_19>:
	}
}
/*-----------------------------------------------------------*/

SIGNAL( USART_UDRE_vect )
{
     26a:	1f 92       	push	r1
     26c:	0f 92       	push	r0
     26e:	0f b6       	in	r0, 0x3f	; 63
     270:	0f 92       	push	r0
     272:	11 24       	eor	r1, r1
     274:	2f 93       	push	r18
     276:	3f 93       	push	r19
     278:	4f 93       	push	r20
     27a:	5f 93       	push	r21
     27c:	6f 93       	push	r22
     27e:	7f 93       	push	r23
     280:	8f 93       	push	r24
     282:	9f 93       	push	r25
     284:	af 93       	push	r26
     286:	bf 93       	push	r27
     288:	ef 93       	push	r30
     28a:	ff 93       	push	r31
     28c:	df 93       	push	r29
     28e:	cf 93       	push	r28
     290:	00 d0       	rcall	.+0      	; 0x292 <__vector_19+0x28>
     292:	cd b7       	in	r28, 0x3d	; 61
     294:	de b7       	in	r29, 0x3e	; 62
signed char cChar, cTaskWoken;

	if( xQueueReceiveFromISR( xCharsForTx, &cChar, &cTaskWoken ) == pdTRUE )
     296:	80 91 53 01 	lds	r24, 0x0153
     29a:	90 91 54 01 	lds	r25, 0x0154
     29e:	be 01       	movw	r22, r28
     2a0:	6f 5f       	subi	r22, 0xFF	; 255
     2a2:	7f 4f       	sbci	r23, 0xFF	; 255
     2a4:	ae 01       	movw	r20, r28
     2a6:	4e 5f       	subi	r20, 0xFE	; 254
     2a8:	5f 4f       	sbci	r21, 0xFF	; 255
     2aa:	0e 94 39 0c 	call	0x1872	; 0x1872 <xQueueReceiveFromISR>
     2ae:	81 30       	cpi	r24, 0x01	; 1
     2b0:	21 f4       	brne	.+8      	; 0x2ba <__vector_19+0x50>
	{
		/* Send the next character queued for Tx. */
		UDR0 = cChar;
     2b2:	89 81       	ldd	r24, Y+1	; 0x01
     2b4:	80 93 c6 00 	sts	0x00C6, r24
     2b8:	05 c0       	rjmp	.+10     	; 0x2c4 <__vector_19+0x5a>
	}
	else
	{
		/* Queue empty, nothing to send. */
		vInterruptOff();
     2ba:	80 91 c1 00 	lds	r24, 0x00C1
     2be:	8f 7d       	andi	r24, 0xDF	; 223
     2c0:	80 93 c1 00 	sts	0x00C1, r24
	}
}
     2c4:	0f 90       	pop	r0
     2c6:	0f 90       	pop	r0
     2c8:	cf 91       	pop	r28
     2ca:	df 91       	pop	r29
     2cc:	ff 91       	pop	r31
     2ce:	ef 91       	pop	r30
     2d0:	bf 91       	pop	r27
     2d2:	af 91       	pop	r26
     2d4:	9f 91       	pop	r25
     2d6:	8f 91       	pop	r24
     2d8:	7f 91       	pop	r23
     2da:	6f 91       	pop	r22
     2dc:	5f 91       	pop	r21
     2de:	4f 91       	pop	r20
     2e0:	3f 91       	pop	r19
     2e2:	2f 91       	pop	r18
     2e4:	0f 90       	pop	r0
     2e6:	0f be       	out	0x3f, r0	; 63
     2e8:	0f 90       	pop	r0
     2ea:	1f 90       	pop	r1
     2ec:	18 95       	reti

000002ee <__vector_18>:
	portEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

SIGNAL( USART_RX_vect )
{
     2ee:	1f 92       	push	r1
     2f0:	0f 92       	push	r0
     2f2:	0f b6       	in	r0, 0x3f	; 63
     2f4:	0f 92       	push	r0
     2f6:	11 24       	eor	r1, r1
     2f8:	2f 93       	push	r18
     2fa:	3f 93       	push	r19
     2fc:	4f 93       	push	r20
     2fe:	5f 93       	push	r21
     300:	6f 93       	push	r22
     302:	7f 93       	push	r23
     304:	8f 93       	push	r24
     306:	9f 93       	push	r25
     308:	af 93       	push	r26
     30a:	bf 93       	push	r27
     30c:	ef 93       	push	r30
     30e:	ff 93       	push	r31
     310:	df 93       	push	r29
     312:	cf 93       	push	r28
     314:	00 d0       	rcall	.+0      	; 0x316 <__vector_18+0x28>
     316:	cd b7       	in	r28, 0x3d	; 61
     318:	de b7       	in	r29, 0x3e	; 62
signed char cChar;
signed portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
     31a:	1a 82       	std	Y+2, r1	; 0x02

	/* Get the character and post it on the queue of Rxed characters.
	If the post causes a task to wake force a context switch as the woken task
	may have a higher priority than the task we have interrupted. */
	cChar = UDR0;
     31c:	80 91 c6 00 	lds	r24, 0x00C6
     320:	89 83       	std	Y+1, r24	; 0x01

	xQueueSendFromISR( xRxedChars, &cChar, &xHigherPriorityTaskWoken );
     322:	80 91 51 01 	lds	r24, 0x0151
     326:	90 91 52 01 	lds	r25, 0x0152
     32a:	be 01       	movw	r22, r28
     32c:	6f 5f       	subi	r22, 0xFF	; 255
     32e:	7f 4f       	sbci	r23, 0xFF	; 255
     330:	ae 01       	movw	r20, r28
     332:	4e 5f       	subi	r20, 0xFE	; 254
     334:	5f 4f       	sbci	r21, 0xFF	; 255
     336:	20 e0       	ldi	r18, 0x00	; 0
     338:	0e 94 8a 0c 	call	0x1914	; 0x1914 <xQueueGenericSendFromISR>

	if( xHigherPriorityTaskWoken != pdFALSE )
     33c:	8a 81       	ldd	r24, Y+2	; 0x02
     33e:	88 23       	and	r24, r24
     340:	11 f0       	breq	.+4      	; 0x346 <__vector_18+0x58>
	{
		taskYIELD();
     342:	0e 94 3d 12 	call	0x247a	; 0x247a <vPortYield>
	}
}
     346:	0f 90       	pop	r0
     348:	0f 90       	pop	r0
     34a:	cf 91       	pop	r28
     34c:	df 91       	pop	r29
     34e:	ff 91       	pop	r31
     350:	ef 91       	pop	r30
     352:	bf 91       	pop	r27
     354:	af 91       	pop	r26
     356:	9f 91       	pop	r25
     358:	8f 91       	pop	r24
     35a:	7f 91       	pop	r23
     35c:	6f 91       	pop	r22
     35e:	5f 91       	pop	r21
     360:	4f 91       	pop	r20
     362:	3f 91       	pop	r19
     364:	2f 91       	pop	r18
     366:	0f 90       	pop	r0
     368:	0f be       	out	0x3f, r0	; 63
     36a:	0f 90       	pop	r0
     36c:	1f 90       	pop	r1
     36e:	18 95       	reti

00000370 <xSerialPutChar>:
	}
}
/*-----------------------------------------------------------*/

signed portBASE_TYPE xSerialPutChar( xComPortHandle pxPort, signed char cOutChar, TickType_t xBlockTime )
{
     370:	df 93       	push	r29
     372:	cf 93       	push	r28
     374:	0f 92       	push	r0
     376:	cd b7       	in	r28, 0x3d	; 61
     378:	de b7       	in	r29, 0x3e	; 62
     37a:	69 83       	std	Y+1, r22	; 0x01
	/* Only one port is supported. */
	( void ) pxPort;

	/* Return false if after the block time there is no room on the Tx queue. */
	if( xQueueSend( xCharsForTx, &cOutChar, xBlockTime ) != pdPASS )
     37c:	80 91 53 01 	lds	r24, 0x0153
     380:	90 91 54 01 	lds	r25, 0x0154
     384:	be 01       	movw	r22, r28
     386:	6f 5f       	subi	r22, 0xFF	; 255
     388:	7f 4f       	sbci	r23, 0xFF	; 255
     38a:	20 e0       	ldi	r18, 0x00	; 0
     38c:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <xQueueGenericSend>
     390:	81 30       	cpi	r24, 0x01	; 1
     392:	11 f0       	breq	.+4      	; 0x398 <xSerialPutChar+0x28>
     394:	80 e0       	ldi	r24, 0x00	; 0
     396:	06 c0       	rjmp	.+12     	; 0x3a4 <xSerialPutChar+0x34>
	{
		return pdFAIL;
	}

	vInterruptOn();
     398:	80 91 c1 00 	lds	r24, 0x00C1
     39c:	80 62       	ori	r24, 0x20	; 32
     39e:	80 93 c1 00 	sts	0x00C1, r24
     3a2:	81 e0       	ldi	r24, 0x01	; 1

	return pdPASS;
}
     3a4:	0f 90       	pop	r0
     3a6:	cf 91       	pop	r28
     3a8:	df 91       	pop	r29
     3aa:	08 95       	ret

000003ac <xSerialGetChar>:
	/* Only one port is supported. */
	( void ) pxPort;

	/* Get the next character from the buffer.  Return false if no characters
	are available, or arrive before xBlockTime expires. */
	if( xQueueReceive( xRxedChars, pcRxedChar, xBlockTime ) )
     3ac:	80 91 51 01 	lds	r24, 0x0151
     3b0:	90 91 52 01 	lds	r25, 0x0152
     3b4:	20 e0       	ldi	r18, 0x00	; 0
     3b6:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <xQueueGenericReceive>
     3ba:	81 11       	cpse	r24, r1
     3bc:	81 e0       	ldi	r24, 0x01	; 1
	}
	else
	{
		return pdFALSE;
	}
}
     3be:	08 95       	ret

000003c0 <xSerialPortInitMinimal>:
	UCSR0B = ucInByte;										\
}
/*-----------------------------------------------------------*/

xComPortHandle xSerialPortInitMinimal( unsigned long ulWantedBaud, unsigned portBASE_TYPE uxQueueLength )
{
     3c0:	df 92       	push	r13
     3c2:	ef 92       	push	r14
     3c4:	ff 92       	push	r15
     3c6:	0f 93       	push	r16
     3c8:	1f 93       	push	r17
     3ca:	7b 01       	movw	r14, r22
     3cc:	8c 01       	movw	r16, r24
     3ce:	d4 2e       	mov	r13, r20
unsigned long ulBaudRateCounter;
unsigned char ucByte;

	portENTER_CRITICAL();
     3d0:	0f b6       	in	r0, 0x3f	; 63
     3d2:	f8 94       	cli
     3d4:	0f 92       	push	r0
	{
		/* Create the queues used by the com test task. */
		xRxedChars = xQueueCreate( uxQueueLength, ( unsigned portBASE_TYPE ) sizeof( signed char ) );
     3d6:	84 2f       	mov	r24, r20
     3d8:	61 e0       	ldi	r22, 0x01	; 1
     3da:	40 e0       	ldi	r20, 0x00	; 0
     3dc:	0e 94 a2 0e 	call	0x1d44	; 0x1d44 <xQueueGenericCreate>
     3e0:	90 93 52 01 	sts	0x0152, r25
     3e4:	80 93 51 01 	sts	0x0151, r24
		xCharsForTx = xQueueCreate( uxQueueLength, ( unsigned portBASE_TYPE ) sizeof( signed char ) );
     3e8:	8d 2d       	mov	r24, r13
     3ea:	61 e0       	ldi	r22, 0x01	; 1
     3ec:	40 e0       	ldi	r20, 0x00	; 0
     3ee:	0e 94 a2 0e 	call	0x1d44	; 0x1d44 <xQueueGenericCreate>
     3f2:	90 93 54 01 	sts	0x0154, r25
     3f6:	80 93 53 01 	sts	0x0153, r24

		/* Calculate the baud rate register value from the equation in the
		data sheet. */
		ulBaudRateCounter = ( configCPU_CLOCK_HZ / ( serBAUD_DIV_CONSTANT * ulWantedBaud ) ) - ( unsigned long ) 1;
     3fa:	94 e0       	ldi	r25, 0x04	; 4
     3fc:	ee 0c       	add	r14, r14
     3fe:	ff 1c       	adc	r15, r15
     400:	00 1f       	adc	r16, r16
     402:	11 1f       	adc	r17, r17
     404:	9a 95       	dec	r25
     406:	d1 f7       	brne	.-12     	; 0x3fc <xSerialPortInitMinimal+0x3c>
     408:	60 e0       	ldi	r22, 0x00	; 0
     40a:	72 e1       	ldi	r23, 0x12	; 18
     40c:	8a e7       	ldi	r24, 0x7A	; 122
     40e:	90 e0       	ldi	r25, 0x00	; 0
     410:	a8 01       	movw	r20, r16
     412:	97 01       	movw	r18, r14
     414:	0e 94 68 15 	call	0x2ad0	; 0x2ad0 <__udivmodsi4>
     418:	21 50       	subi	r18, 0x01	; 1
     41a:	30 40       	sbci	r19, 0x00	; 0
     41c:	40 40       	sbci	r20, 0x00	; 0
     41e:	50 40       	sbci	r21, 0x00	; 0

		/* Set the baud rate. */	
		ucByte = ( unsigned char ) ( ulBaudRateCounter & ( unsigned long ) 0xff );	
		UBRR0L = ucByte;
     420:	20 93 c4 00 	sts	0x00C4, r18

		ulBaudRateCounter >>= ( unsigned long ) 8;
		ucByte = ( unsigned char ) ( ulBaudRateCounter & ( unsigned long ) 0xff );	
     424:	23 2f       	mov	r18, r19
     426:	34 2f       	mov	r19, r20
     428:	45 2f       	mov	r20, r21
     42a:	55 27       	eor	r21, r21
		UBRR0H = ucByte;
     42c:	20 93 c5 00 	sts	0x00C5, r18

		/* Enable the Rx interrupt.  The Tx interrupt will get enabled
		later. Also enable the Rx and Tx. */
		UCSR0B = ( serRX_INT_ENABLE | serRX_ENABLE | serTX_ENABLE );
     430:	88 e9       	ldi	r24, 0x98	; 152
     432:	80 93 c1 00 	sts	0x00C1, r24

		/* Set the data bits to 8. */
		UCSR0C = serEIGHT_DATA_BITS ;
     436:	86 e0       	ldi	r24, 0x06	; 6
     438:	80 93 c2 00 	sts	0x00C2, r24
	}
	portEXIT_CRITICAL();
     43c:	0f 90       	pop	r0
     43e:	0f be       	out	0x3f, r0	; 63
	
	/* Unlike other ports, this serial code does not allow for more than one
	com port.  We therefore don't return a pointer to a port structure and can
	instead just return NULL. */
	return NULL;
}
     440:	80 e0       	ldi	r24, 0x00	; 0
     442:	90 e0       	ldi	r25, 0x00	; 0
     444:	1f 91       	pop	r17
     446:	0f 91       	pop	r16
     448:	ff 90       	pop	r15
     44a:	ef 90       	pop	r14
     44c:	df 90       	pop	r13
     44e:	08 95       	ret

00000450 <xAreRegTestTasksStillRunning>:
	xTaskCreate( prvRegisterCheck2, "Reg2", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY, NULL );
}
/*-----------------------------------------------------------*/

portBASE_TYPE xAreRegTestTasksStillRunning( void )
{
     450:	90 e0       	ldi	r25, 0x00	; 0
     452:	80 91 55 01 	lds	r24, 0x0155
     456:	88 23       	and	r24, r24
     458:	09 f4       	brne	.+2      	; 0x45c <xAreRegTestTasksStillRunning+0xc>
     45a:	91 e0       	ldi	r25, 0x01	; 1
	{
		xReturn = pdFALSE;
	}

	return xReturn;
}
     45c:	89 2f       	mov	r24, r25
     45e:	08 95       	ret

00000460 <prvRegisterCheck1>:
{
	( void ) pvParameters;

	for( ;; )
	{
		asm(	"LDI	r31,	5"		);
     460:	f5 e0       	ldi	r31, 0x05	; 5
		asm( 	"MOV	r0,		r31"	);
     462:	0f 2e       	mov	r0, r31
		asm(	"LDI	r31,	6"		);
     464:	f6 e0       	ldi	r31, 0x06	; 6
		asm( 	"MOV	r1,		r31"	);
     466:	1f 2e       	mov	r1, r31
		asm(	"LDI	r31,	7"		);
     468:	f7 e0       	ldi	r31, 0x07	; 7
		asm( 	"MOV	r2,		r31"	);
     46a:	2f 2e       	mov	r2, r31
		asm(	"LDI	r31,	8"		);
     46c:	f8 e0       	ldi	r31, 0x08	; 8
		asm( 	"MOV	r3,		r31"	);
     46e:	3f 2e       	mov	r3, r31
		asm(	"LDI	r31,	9"		);
     470:	f9 e0       	ldi	r31, 0x09	; 9
		asm( 	"MOV	r4,		r31"	);
     472:	4f 2e       	mov	r4, r31
		asm(	"LDI	r31,	10"		);
     474:	fa e0       	ldi	r31, 0x0A	; 10
		asm( 	"MOV	r5,		r31"	);
     476:	5f 2e       	mov	r5, r31
		asm(	"LDI	r31,	11"		);
     478:	fb e0       	ldi	r31, 0x0B	; 11
		asm( 	"MOV	r6,		r31"	);
     47a:	6f 2e       	mov	r6, r31
		asm(	"LDI	r31,	12"		);
     47c:	fc e0       	ldi	r31, 0x0C	; 12
		asm( 	"MOV	r7,		r31"	);
     47e:	7f 2e       	mov	r7, r31
		asm(	"LDI	r31,	13"		);
     480:	fd e0       	ldi	r31, 0x0D	; 13
		asm( 	"MOV	r8,		r31"	);
     482:	8f 2e       	mov	r8, r31
		asm(	"LDI	r31,	14"		);
     484:	fe e0       	ldi	r31, 0x0E	; 14
		asm( 	"MOV	r9,		r31"	);
     486:	9f 2e       	mov	r9, r31
		asm(	"LDI	r31,	15"		);
     488:	ff e0       	ldi	r31, 0x0F	; 15
		asm( 	"MOV	r10,	r31"	);
     48a:	af 2e       	mov	r10, r31
		asm(	"LDI	r31,	16"		);
     48c:	f0 e1       	ldi	r31, 0x10	; 16
		asm( 	"MOV	r11,	r31"	);
     48e:	bf 2e       	mov	r11, r31
		asm(	"LDI	r31,	17"		);
     490:	f1 e1       	ldi	r31, 0x11	; 17
		asm( 	"MOV	r12,	r31"	);
     492:	cf 2e       	mov	r12, r31
		asm(	"LDI	r31,	18"		);
     494:	f2 e1       	ldi	r31, 0x12	; 18
		asm( 	"MOV	r13,	r31"	);
     496:	df 2e       	mov	r13, r31
		asm(	"LDI	r31,	19"		);
     498:	f3 e1       	ldi	r31, 0x13	; 19
		asm( 	"MOV	r14,	r31"	);
     49a:	ef 2e       	mov	r14, r31
		asm(	"LDI	r31,	20"		);
     49c:	f4 e1       	ldi	r31, 0x14	; 20
		asm( 	"MOV	r15,	r31"	);
     49e:	ff 2e       	mov	r15, r31
		asm(	"LDI	r16,	21"		);
     4a0:	05 e1       	ldi	r16, 0x15	; 21
		asm(	"LDI	r17,	22"		);
     4a2:	16 e1       	ldi	r17, 0x16	; 22
		asm(	"LDI	r18,	23"		);
     4a4:	27 e1       	ldi	r18, 0x17	; 23
		asm(	"LDI	r19,	24"		);
     4a6:	38 e1       	ldi	r19, 0x18	; 24
		asm(	"LDI	r20,	25"		);
     4a8:	49 e1       	ldi	r20, 0x19	; 25
		asm(	"LDI	r21,	26"		);
     4aa:	5a e1       	ldi	r21, 0x1A	; 26
		asm(	"LDI	r22,	27"		);
     4ac:	6b e1       	ldi	r22, 0x1B	; 27
		asm(	"LDI	r23,	28"		);
     4ae:	7c e1       	ldi	r23, 0x1C	; 28
		asm(	"LDI	r24,	29"		);
     4b0:	8d e1       	ldi	r24, 0x1D	; 29
		asm(	"LDI	r25,	30"		);
     4b2:	9e e1       	ldi	r25, 0x1E	; 30
		asm(	"LDI	r26,	31"		);
     4b4:	af e1       	ldi	r26, 0x1F	; 31
		asm(	"LDI	r27,	32"		);
     4b6:	b0 e2       	ldi	r27, 0x20	; 32
		asm(	"LDI	r30,	33"		);
     4b8:	e1 e2       	ldi	r30, 0x21	; 33

		asm(	"LDI	r31,	5"			);
     4ba:	f5 e0       	ldi	r31, 0x05	; 5
		asm(	"CPSE	r31,	r0"			);
     4bc:	f0 11       	cpse	r31, r0
		asm(	"STS	xRegTestError, r0"	);
     4be:	00 92 55 01 	sts	0x0155, r0
		asm(	"LDI	r31,	6"			);
     4c2:	f6 e0       	ldi	r31, 0x06	; 6
		asm(	"CPSE	r31,	r1"			);
     4c4:	f1 11       	cpse	r31, r1
		asm(	"STS	xRegTestError, r0"	);
     4c6:	00 92 55 01 	sts	0x0155, r0
		asm(	"LDI	r31,	7"			);
     4ca:	f7 e0       	ldi	r31, 0x07	; 7
		asm(	"CPSE	r31,	r2"			);
     4cc:	f2 11       	cpse	r31, r2
		asm(	"STS	xRegTestError, r0"	);
     4ce:	00 92 55 01 	sts	0x0155, r0
		asm(	"LDI	r31,	8"			);
     4d2:	f8 e0       	ldi	r31, 0x08	; 8
		asm(	"CPSE	r31,	r3"			);
     4d4:	f3 11       	cpse	r31, r3
		asm(	"STS	xRegTestError, r0"	);
     4d6:	00 92 55 01 	sts	0x0155, r0
		asm(	"LDI	r31,	9"			);
     4da:	f9 e0       	ldi	r31, 0x09	; 9
		asm(	"CPSE	r31,	r4"			);
     4dc:	f4 11       	cpse	r31, r4
		asm(	"STS	xRegTestError, r0"	);
     4de:	00 92 55 01 	sts	0x0155, r0
		asm(	"LDI	r31,	10"			);
     4e2:	fa e0       	ldi	r31, 0x0A	; 10
		asm(	"CPSE	r31,	r5"			);
     4e4:	f5 11       	cpse	r31, r5
		asm(	"STS	xRegTestError, r0"	);
     4e6:	00 92 55 01 	sts	0x0155, r0
		asm(	"LDI	r31,	11"			);
     4ea:	fb e0       	ldi	r31, 0x0B	; 11
		asm(	"CPSE	r31,	r6"			);
     4ec:	f6 11       	cpse	r31, r6
		asm(	"STS	xRegTestError, r0"	);
     4ee:	00 92 55 01 	sts	0x0155, r0
		asm(	"LDI	r31,	12"			);
     4f2:	fc e0       	ldi	r31, 0x0C	; 12
		asm(	"CPSE	r31,	r7"			);
     4f4:	f7 11       	cpse	r31, r7
		asm(	"STS	xRegTestError, r0"	);
     4f6:	00 92 55 01 	sts	0x0155, r0
		asm(	"LDI	r31,	13"			);
     4fa:	fd e0       	ldi	r31, 0x0D	; 13
		asm(	"CPSE	r31,	r8"			);
     4fc:	f8 11       	cpse	r31, r8
		asm(	"STS	xRegTestError, r0"	);
     4fe:	00 92 55 01 	sts	0x0155, r0
		asm(	"LDI	r31,	14"			);
     502:	fe e0       	ldi	r31, 0x0E	; 14
		asm(	"CPSE	r31,	r9"			);
     504:	f9 11       	cpse	r31, r9
		asm(	"STS	xRegTestError, r0"	);
     506:	00 92 55 01 	sts	0x0155, r0
		asm(	"LDI	r31,	15"			);
     50a:	ff e0       	ldi	r31, 0x0F	; 15
		asm(	"CPSE	r31,	r10"		);
     50c:	fa 11       	cpse	r31, r10
		asm(	"STS	xRegTestError, r0"	);
     50e:	00 92 55 01 	sts	0x0155, r0
		asm(	"LDI	r31,	16"			);
     512:	f0 e1       	ldi	r31, 0x10	; 16
		asm(	"CPSE	r31,	r11"		);
     514:	fb 11       	cpse	r31, r11
		asm(	"STS	xRegTestError, r0"	);
     516:	00 92 55 01 	sts	0x0155, r0
		asm(	"LDI	r31,	17"			);
     51a:	f1 e1       	ldi	r31, 0x11	; 17
		asm(	"CPSE	r31,	r12"		);
     51c:	fc 11       	cpse	r31, r12
		asm(	"STS	xRegTestError, r0"	);
     51e:	00 92 55 01 	sts	0x0155, r0
		asm(	"LDI	r31,	18"			);
     522:	f2 e1       	ldi	r31, 0x12	; 18
		asm(	"CPSE	r31,	r13"		);
     524:	fd 11       	cpse	r31, r13
		asm(	"STS	xRegTestError, r0"	);
     526:	00 92 55 01 	sts	0x0155, r0
		asm(	"LDI	r31,	19"			);
     52a:	f3 e1       	ldi	r31, 0x13	; 19
		asm(	"CPSE	r31,	r14"		);
     52c:	fe 11       	cpse	r31, r14
		asm(	"STS	xRegTestError, r0"	);
     52e:	00 92 55 01 	sts	0x0155, r0
		asm(	"LDI	r31,	20"			);
     532:	f4 e1       	ldi	r31, 0x14	; 20
		asm(	"CPSE	r31,	r15"		);
     534:	ff 11       	cpse	r31, r15
		asm(	"STS	xRegTestError, r0"	);
     536:	00 92 55 01 	sts	0x0155, r0
		asm(	"LDI	r31,	21"			);
     53a:	f5 e1       	ldi	r31, 0x15	; 21
		asm(	"CPSE	r31,	r16"		);
     53c:	f0 13       	cpse	r31, r16
		asm(	"STS	xRegTestError, r0"	);
     53e:	00 92 55 01 	sts	0x0155, r0
		asm(	"LDI	r31,	22"			);
     542:	f6 e1       	ldi	r31, 0x16	; 22
		asm(	"CPSE	r31,	r17"		);
     544:	f1 13       	cpse	r31, r17
		asm(	"STS	xRegTestError, r0"	);
     546:	00 92 55 01 	sts	0x0155, r0
		asm(	"LDI	r31,	23"			);
     54a:	f7 e1       	ldi	r31, 0x17	; 23
		asm(	"CPSE	r31,	r18"		);
     54c:	f2 13       	cpse	r31, r18
		asm(	"STS	xRegTestError, r0"	);
     54e:	00 92 55 01 	sts	0x0155, r0
		asm(	"LDI	r31,	24"			);
     552:	f8 e1       	ldi	r31, 0x18	; 24
		asm(	"CPSE	r31,	r19"		);
     554:	f3 13       	cpse	r31, r19
		asm(	"STS	xRegTestError, r0"	);
     556:	00 92 55 01 	sts	0x0155, r0
		asm(	"LDI	r31,	25"			);
     55a:	f9 e1       	ldi	r31, 0x19	; 25
		asm(	"CPSE	r31,	r20"		);
     55c:	f4 13       	cpse	r31, r20
		asm(	"STS	xRegTestError, r0"	);
     55e:	00 92 55 01 	sts	0x0155, r0
		asm(	"LDI	r31,	26"			);
     562:	fa e1       	ldi	r31, 0x1A	; 26
		asm(	"CPSE	r31,	r21"		);
     564:	f5 13       	cpse	r31, r21
		asm(	"STS	xRegTestError, r0"	);
     566:	00 92 55 01 	sts	0x0155, r0
		asm(	"LDI	r31,	27"			);
     56a:	fb e1       	ldi	r31, 0x1B	; 27
		asm(	"CPSE	r31,	r22"		);
     56c:	f6 13       	cpse	r31, r22
		asm(	"STS	xRegTestError, r0"	);
     56e:	00 92 55 01 	sts	0x0155, r0
		asm(	"LDI	r31,	28"			);
     572:	fc e1       	ldi	r31, 0x1C	; 28
		asm(	"CPSE	r31,	r23"		);
     574:	f7 13       	cpse	r31, r23
		asm(	"STS	xRegTestError, r0"	);
     576:	00 92 55 01 	sts	0x0155, r0
		asm(	"LDI	r31,	29"			);
     57a:	fd e1       	ldi	r31, 0x1D	; 29
		asm(	"CPSE	r31,	r24"		);
     57c:	f8 13       	cpse	r31, r24
		asm(	"STS	xRegTestError, r0"	);
     57e:	00 92 55 01 	sts	0x0155, r0
		asm(	"LDI	r31,	30"			);
     582:	fe e1       	ldi	r31, 0x1E	; 30
		asm(	"CPSE	r31,	r25"		);
     584:	f9 13       	cpse	r31, r25
		asm(	"STS	xRegTestError, r0"	);
     586:	00 92 55 01 	sts	0x0155, r0
		asm(	"LDI	r31,	31"			);
     58a:	ff e1       	ldi	r31, 0x1F	; 31
		asm(	"CPSE	r31,	r26"		);
     58c:	fa 13       	cpse	r31, r26
		asm(	"STS	xRegTestError, r0"	);
     58e:	00 92 55 01 	sts	0x0155, r0
		asm(	"LDI	r31,	32"			);
     592:	f0 e2       	ldi	r31, 0x20	; 32
		asm(	"CPSE	r31,	r27"		);
     594:	fb 13       	cpse	r31, r27
		asm(	"STS	xRegTestError, r0"	);
     596:	00 92 55 01 	sts	0x0155, r0
		asm(	"LDI	r31,	33"			);
     59a:	f1 e2       	ldi	r31, 0x21	; 33
		asm(	"CPSE	r31,	r30"		);
     59c:	fe 13       	cpse	r31, r30
		asm(	"STS	xRegTestError, r0"	);
     59e:	00 92 55 01 	sts	0x0155, r0
     5a2:	5e cf       	rjmp	.-324    	; 0x460 <prvRegisterCheck1>

000005a4 <prvRegisterCheck2>:
{
	( void ) pvParameters;

	for( ;; )
	{
		asm(	"LDI	r31,	1"		);
     5a4:	f1 e0       	ldi	r31, 0x01	; 1
		asm( 	"MOV	r0,		r31"	);
     5a6:	0f 2e       	mov	r0, r31
		asm(	"LDI	r31,	2"		);
     5a8:	f2 e0       	ldi	r31, 0x02	; 2
		asm( 	"MOV	r1,		r31"	);
     5aa:	1f 2e       	mov	r1, r31
		asm(	"LDI	r31,	3"		);
     5ac:	f3 e0       	ldi	r31, 0x03	; 3
		asm( 	"MOV	r2,		r31"	);
     5ae:	2f 2e       	mov	r2, r31
		asm(	"LDI	r31,	4"		);
     5b0:	f4 e0       	ldi	r31, 0x04	; 4
		asm( 	"MOV	r3,		r31"	);
     5b2:	3f 2e       	mov	r3, r31
		asm(	"LDI	r31,	5"		);
     5b4:	f5 e0       	ldi	r31, 0x05	; 5
		asm( 	"MOV	r4,		r31"	);
     5b6:	4f 2e       	mov	r4, r31
		asm(	"LDI	r31,	6"		);
     5b8:	f6 e0       	ldi	r31, 0x06	; 6
		asm( 	"MOV	r5,		r31"	);
     5ba:	5f 2e       	mov	r5, r31
		asm(	"LDI	r31,	7"		);
     5bc:	f7 e0       	ldi	r31, 0x07	; 7
		asm( 	"MOV	r6,		r31"	);
     5be:	6f 2e       	mov	r6, r31
		asm(	"LDI	r31,	8"		);
     5c0:	f8 e0       	ldi	r31, 0x08	; 8
		asm( 	"MOV	r7,		r31"	);
     5c2:	7f 2e       	mov	r7, r31
		asm(	"LDI	r31,	9"		);
     5c4:	f9 e0       	ldi	r31, 0x09	; 9
		asm( 	"MOV	r8,		r31"	);
     5c6:	8f 2e       	mov	r8, r31
		asm(	"LDI	r31,	10"		);
     5c8:	fa e0       	ldi	r31, 0x0A	; 10
		asm( 	"MOV	r9,		r31"	);
     5ca:	9f 2e       	mov	r9, r31
		asm(	"LDI	r31,	11"		);
     5cc:	fb e0       	ldi	r31, 0x0B	; 11
		asm( 	"MOV	r10,	r31"	);
     5ce:	af 2e       	mov	r10, r31
		asm(	"LDI	r31,	12"		);
     5d0:	fc e0       	ldi	r31, 0x0C	; 12
		asm( 	"MOV	r11,	r31"	);
     5d2:	bf 2e       	mov	r11, r31
		asm(	"LDI	r31,	13"		);
     5d4:	fd e0       	ldi	r31, 0x0D	; 13
		asm( 	"MOV	r12,	r31"	);
     5d6:	cf 2e       	mov	r12, r31
		asm(	"LDI	r31,	14"		);
     5d8:	fe e0       	ldi	r31, 0x0E	; 14
		asm( 	"MOV	r13,	r31"	);
     5da:	df 2e       	mov	r13, r31
		asm(	"LDI	r31,	15"		);
     5dc:	ff e0       	ldi	r31, 0x0F	; 15
		asm( 	"MOV	r14,	r31"	);
     5de:	ef 2e       	mov	r14, r31
		asm(	"LDI	r31,	16"		);
     5e0:	f0 e1       	ldi	r31, 0x10	; 16
		asm( 	"MOV	r15,	r31"	);
     5e2:	ff 2e       	mov	r15, r31
		asm(	"LDI	r16,	17"		);
     5e4:	01 e1       	ldi	r16, 0x11	; 17
		asm(	"LDI	r17,	18"		);
     5e6:	12 e1       	ldi	r17, 0x12	; 18
		asm(	"LDI	r18,	19"		);
     5e8:	23 e1       	ldi	r18, 0x13	; 19
		asm(	"LDI	r19,	20"		);
     5ea:	34 e1       	ldi	r19, 0x14	; 20
		asm(	"LDI	r20,	21"		);
     5ec:	45 e1       	ldi	r20, 0x15	; 21
		asm(	"LDI	r21,	22"		);
     5ee:	56 e1       	ldi	r21, 0x16	; 22
		asm(	"LDI	r22,	23"		);
     5f0:	67 e1       	ldi	r22, 0x17	; 23
		asm(	"LDI	r23,	24"		);
     5f2:	78 e1       	ldi	r23, 0x18	; 24
		asm(	"LDI	r24,	25"		);
     5f4:	89 e1       	ldi	r24, 0x19	; 25
		asm(	"LDI	r25,	26"		);
     5f6:	9a e1       	ldi	r25, 0x1A	; 26
		asm(	"LDI	r26,	27"		);
     5f8:	ab e1       	ldi	r26, 0x1B	; 27
		asm(	"LDI	r27,	28"		);
     5fa:	bc e1       	ldi	r27, 0x1C	; 28
		asm(	"LDI	r30,	29"		);
     5fc:	ed e1       	ldi	r30, 0x1D	; 29

		asm(	"LDI	r31,	1"			);
     5fe:	f1 e0       	ldi	r31, 0x01	; 1
		asm(	"CPSE	r31,	r0"			);
     600:	f0 11       	cpse	r31, r0
		asm(	"STS	xRegTestError, r0"	);
     602:	00 92 55 01 	sts	0x0155, r0
		asm(	"LDI	r31,	2"			);
     606:	f2 e0       	ldi	r31, 0x02	; 2
		asm(	"CPSE	r31,	r1"			);
     608:	f1 11       	cpse	r31, r1
		asm(	"STS	xRegTestError, r0"	);
     60a:	00 92 55 01 	sts	0x0155, r0
		asm(	"LDI	r31,	3"			);
     60e:	f3 e0       	ldi	r31, 0x03	; 3
		asm(	"CPSE	r31,	r2"			);
     610:	f2 11       	cpse	r31, r2
		asm(	"STS	xRegTestError, r0"	);
     612:	00 92 55 01 	sts	0x0155, r0
		asm(	"LDI	r31,	4"			);
     616:	f4 e0       	ldi	r31, 0x04	; 4
		asm(	"CPSE	r31,	r3"			);
     618:	f3 11       	cpse	r31, r3
		asm(	"STS	xRegTestError, r0"	);
     61a:	00 92 55 01 	sts	0x0155, r0
		asm(	"LDI	r31,	5"			);
     61e:	f5 e0       	ldi	r31, 0x05	; 5
		asm(	"CPSE	r31,	r4"			);
     620:	f4 11       	cpse	r31, r4
		asm(	"STS	xRegTestError, r0"	);
     622:	00 92 55 01 	sts	0x0155, r0
		asm(	"LDI	r31,	6"			);
     626:	f6 e0       	ldi	r31, 0x06	; 6
		asm(	"CPSE	r31,	r5"			);
     628:	f5 11       	cpse	r31, r5
		asm(	"STS	xRegTestError, r0"	);
     62a:	00 92 55 01 	sts	0x0155, r0
		asm(	"LDI	r31,	7"			);
     62e:	f7 e0       	ldi	r31, 0x07	; 7
		asm(	"CPSE	r31,	r6"			);
     630:	f6 11       	cpse	r31, r6
		asm(	"STS	xRegTestError, r0"	);
     632:	00 92 55 01 	sts	0x0155, r0
		asm(	"LDI	r31,	8"			);
     636:	f8 e0       	ldi	r31, 0x08	; 8
		asm(	"CPSE	r31,	r7"			);
     638:	f7 11       	cpse	r31, r7
		asm(	"STS	xRegTestError, r0"	);
     63a:	00 92 55 01 	sts	0x0155, r0
		asm(	"LDI	r31,	9"			);
     63e:	f9 e0       	ldi	r31, 0x09	; 9
		asm(	"CPSE	r31,	r8"			);
     640:	f8 11       	cpse	r31, r8
		asm(	"STS	xRegTestError, r0"	);
     642:	00 92 55 01 	sts	0x0155, r0
		asm(	"LDI	r31,	10"			);
     646:	fa e0       	ldi	r31, 0x0A	; 10
		asm(	"CPSE	r31,	r9"			);
     648:	f9 11       	cpse	r31, r9
		asm(	"STS	xRegTestError, r0"	);
     64a:	00 92 55 01 	sts	0x0155, r0
		asm(	"LDI	r31,	11"			);
     64e:	fb e0       	ldi	r31, 0x0B	; 11
		asm(	"CPSE	r31,	r10"		);
     650:	fa 11       	cpse	r31, r10
		asm(	"STS	xRegTestError, r0"	);
     652:	00 92 55 01 	sts	0x0155, r0
		asm(	"LDI	r31,	12"			);
     656:	fc e0       	ldi	r31, 0x0C	; 12
		asm(	"CPSE	r31,	r11"		);
     658:	fb 11       	cpse	r31, r11
		asm(	"STS	xRegTestError, r0"	);
     65a:	00 92 55 01 	sts	0x0155, r0
		asm(	"LDI	r31,	13"			);
     65e:	fd e0       	ldi	r31, 0x0D	; 13
		asm(	"CPSE	r31,	r12"		);
     660:	fc 11       	cpse	r31, r12
		asm(	"STS	xRegTestError, r0"	);
     662:	00 92 55 01 	sts	0x0155, r0
		asm(	"LDI	r31,	14"			);
     666:	fe e0       	ldi	r31, 0x0E	; 14
		asm(	"CPSE	r31,	r13"		);
     668:	fd 11       	cpse	r31, r13
		asm(	"STS	xRegTestError, r0"	);
     66a:	00 92 55 01 	sts	0x0155, r0
		asm(	"LDI	r31,	15"			);
     66e:	ff e0       	ldi	r31, 0x0F	; 15
		asm(	"CPSE	r31,	r14"		);
     670:	fe 11       	cpse	r31, r14
		asm(	"STS	xRegTestError, r0"	);
     672:	00 92 55 01 	sts	0x0155, r0
		asm(	"LDI	r31,	16"			);
     676:	f0 e1       	ldi	r31, 0x10	; 16
		asm(	"CPSE	r31,	r15"		);
     678:	ff 11       	cpse	r31, r15
		asm(	"STS	xRegTestError, r0"	);
     67a:	00 92 55 01 	sts	0x0155, r0
		asm(	"LDI	r31,	17"			);
     67e:	f1 e1       	ldi	r31, 0x11	; 17
		asm(	"CPSE	r31,	r16"		);
     680:	f0 13       	cpse	r31, r16
		asm(	"STS	xRegTestError, r0"	);
     682:	00 92 55 01 	sts	0x0155, r0
		asm(	"LDI	r31,	18"			);
     686:	f2 e1       	ldi	r31, 0x12	; 18
		asm(	"CPSE	r31,	r17"		);
     688:	f1 13       	cpse	r31, r17
		asm(	"STS	xRegTestError, r0"	);
     68a:	00 92 55 01 	sts	0x0155, r0
		asm(	"LDI	r31,	19"			);
     68e:	f3 e1       	ldi	r31, 0x13	; 19
		asm(	"CPSE	r31,	r18"		);
     690:	f2 13       	cpse	r31, r18
		asm(	"STS	xRegTestError, r0"	);
     692:	00 92 55 01 	sts	0x0155, r0
		asm(	"LDI	r31,	20"			);
     696:	f4 e1       	ldi	r31, 0x14	; 20
		asm(	"CPSE	r31,	r19"		);
     698:	f3 13       	cpse	r31, r19
		asm(	"STS	xRegTestError, r0"	);
     69a:	00 92 55 01 	sts	0x0155, r0
		asm(	"LDI	r31,	21"			);
     69e:	f5 e1       	ldi	r31, 0x15	; 21
		asm(	"CPSE	r31,	r20"		);
     6a0:	f4 13       	cpse	r31, r20
		asm(	"STS	xRegTestError, r0"	);
     6a2:	00 92 55 01 	sts	0x0155, r0
		asm(	"LDI	r31,	22"			);
     6a6:	f6 e1       	ldi	r31, 0x16	; 22
		asm(	"CPSE	r31,	r21"		);
     6a8:	f5 13       	cpse	r31, r21
		asm(	"STS	xRegTestError, r0"	);
     6aa:	00 92 55 01 	sts	0x0155, r0
		asm(	"LDI	r31,	23"			);
     6ae:	f7 e1       	ldi	r31, 0x17	; 23
		asm(	"CPSE	r31,	r22"		);
     6b0:	f6 13       	cpse	r31, r22
		asm(	"STS	xRegTestError, r0"	);
     6b2:	00 92 55 01 	sts	0x0155, r0
		asm(	"LDI	r31,	24"			);
     6b6:	f8 e1       	ldi	r31, 0x18	; 24
		asm(	"CPSE	r31,	r23"		);
     6b8:	f7 13       	cpse	r31, r23
		asm(	"STS	xRegTestError, r0"	);
     6ba:	00 92 55 01 	sts	0x0155, r0
		asm(	"LDI	r31,	25"			);
     6be:	f9 e1       	ldi	r31, 0x19	; 25
		asm(	"CPSE	r31,	r24"		);
     6c0:	f8 13       	cpse	r31, r24
		asm(	"STS	xRegTestError, r0"	);
     6c2:	00 92 55 01 	sts	0x0155, r0
		asm(	"LDI	r31,	26"			);
     6c6:	fa e1       	ldi	r31, 0x1A	; 26
		asm(	"CPSE	r31,	r25"		);
     6c8:	f9 13       	cpse	r31, r25
		asm(	"STS	xRegTestError, r0"	);
     6ca:	00 92 55 01 	sts	0x0155, r0
		asm(	"LDI	r31,	27"			);
     6ce:	fb e1       	ldi	r31, 0x1B	; 27
		asm(	"CPSE	r31,	r26"		);
     6d0:	fa 13       	cpse	r31, r26
		asm(	"STS	xRegTestError, r0"	);
     6d2:	00 92 55 01 	sts	0x0155, r0
		asm(	"LDI	r31,	28"			);
     6d6:	fc e1       	ldi	r31, 0x1C	; 28
		asm(	"CPSE	r31,	r27"		);
     6d8:	fb 13       	cpse	r31, r27
		asm(	"STS	xRegTestError, r0"	);
     6da:	00 92 55 01 	sts	0x0155, r0
		asm(	"LDI	r31,	29"			);
     6de:	fd e1       	ldi	r31, 0x1D	; 29
		asm(	"CPSE	r31,	r30"		);
     6e0:	fe 13       	cpse	r31, r30
		asm(	"STS	xRegTestError, r0"	);
     6e2:	00 92 55 01 	sts	0x0155, r0
     6e6:	5e cf       	rjmp	.-324    	; 0x5a4 <prvRegisterCheck2>

000006e8 <vStartRegTestTasks>:
portBASE_TYPE xRegTestError = pdFALSE;

/*-----------------------------------------------------------*/

void vStartRegTestTasks( void )
{
     6e8:	ef 92       	push	r14
     6ea:	ff 92       	push	r15
     6ec:	0f 93       	push	r16
	xTaskCreate( prvRegisterCheck1, "Reg1", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY, NULL );
     6ee:	80 e3       	ldi	r24, 0x30	; 48
     6f0:	92 e0       	ldi	r25, 0x02	; 2
     6f2:	6b e0       	ldi	r22, 0x0B	; 11
     6f4:	71 e0       	ldi	r23, 0x01	; 1
     6f6:	45 e5       	ldi	r20, 0x55	; 85
     6f8:	50 e0       	ldi	r21, 0x00	; 0
     6fa:	20 e0       	ldi	r18, 0x00	; 0
     6fc:	30 e0       	ldi	r19, 0x00	; 0
     6fe:	00 e0       	ldi	r16, 0x00	; 0
     700:	ee 24       	eor	r14, r14
     702:	ff 24       	eor	r15, r15
     704:	0e 94 9d 09 	call	0x133a	; 0x133a <xTaskCreate>
	xTaskCreate( prvRegisterCheck2, "Reg2", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY, NULL );
     708:	82 ed       	ldi	r24, 0xD2	; 210
     70a:	92 e0       	ldi	r25, 0x02	; 2
     70c:	60 e1       	ldi	r22, 0x10	; 16
     70e:	71 e0       	ldi	r23, 0x01	; 1
     710:	45 e5       	ldi	r20, 0x55	; 85
     712:	50 e0       	ldi	r21, 0x00	; 0
     714:	20 e0       	ldi	r18, 0x00	; 0
     716:	30 e0       	ldi	r19, 0x00	; 0
     718:	0e 94 9d 09 	call	0x133a	; 0x133a <xTaskCreate>
}
     71c:	0f 91       	pop	r16
     71e:	ff 90       	pop	r15
     720:	ef 90       	pop	r14
     722:	08 95       	ret

00000724 <vTaskSuspendAll>:
{
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
     724:	80 91 58 01 	lds	r24, 0x0158
     728:	8f 5f       	subi	r24, 0xFF	; 255
     72a:	80 93 58 01 	sts	0x0158, r24
}
     72e:	08 95       	ret

00000730 <xTaskGetTickCount>:
TickType_t xTaskGetTickCount( void )
{
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
     730:	0f b6       	in	r0, 0x3f	; 63
     732:	f8 94       	cli
     734:	0f 92       	push	r0
	{
		xTicks = xTickCount;
     736:	20 91 5b 01 	lds	r18, 0x015B
     73a:	30 91 5c 01 	lds	r19, 0x015C
	}
	portTICK_TYPE_EXIT_CRITICAL();
     73e:	0f 90       	pop	r0
     740:	0f be       	out	0x3f, r0	; 63

	return xTicks;
}
     742:	c9 01       	movw	r24, r18
     744:	08 95       	ret

00000746 <xTaskGetTickCountFromISR>:
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
	{
		xReturn = xTickCount;
     746:	20 91 5b 01 	lds	r18, 0x015B
     74a:	30 91 5c 01 	lds	r19, 0x015C
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
     74e:	c9 01       	movw	r24, r18
     750:	08 95       	ret

00000752 <uxTaskGetNumberOfTasks>:

UBaseType_t uxTaskGetNumberOfTasks( void )
{
	/* A critical section is not required because the variables are of type
	BaseType_t. */
	return uxCurrentNumberOfTasks;
     752:	80 91 61 01 	lds	r24, 0x0161
}
     756:	08 95       	ret

00000758 <pcTaskGetName>:
{
TCB_t *pxTCB;

	/* If null is passed in here then the name of the calling task is being
	queried. */
	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
     758:	00 97       	sbiw	r24, 0x00	; 0
     75a:	21 f4       	brne	.+8      	; 0x764 <pcTaskGetName+0xc>
     75c:	80 91 56 01 	lds	r24, 0x0156
     760:	90 91 57 01 	lds	r25, 0x0157
     764:	9c 01       	movw	r18, r24
     766:	27 5e       	subi	r18, 0xE7	; 231
     768:	3f 4f       	sbci	r19, 0xFF	; 255
	configASSERT( pxTCB );
	return &( pxTCB->pcTaskName[ 0 ] );
}
     76a:	c9 01       	movw	r24, r18
     76c:	08 95       	ret

0000076e <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
     76e:	80 91 58 01 	lds	r24, 0x0158
     772:	88 23       	and	r24, r24
     774:	21 f0       	breq	.+8      	; 0x77e <vTaskSwitchContext+0x10>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
     776:	81 e0       	ldi	r24, 0x01	; 1
     778:	80 93 5a 01 	sts	0x015A, r24
     77c:	08 95       	ret
	}
	else
	{
		xYieldPending = pdFALSE;
     77e:	10 92 5a 01 	sts	0x015A, r1
		/* Check for stack overflow, if configured. */
		taskCHECK_FOR_STACK_OVERFLOW();

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
     782:	20 91 59 01 	lds	r18, 0x0159
     786:	99 e0       	ldi	r25, 0x09	; 9
     788:	01 c0       	rjmp	.+2      	; 0x78c <vTaskSwitchContext+0x1e>
     78a:	21 50       	subi	r18, 0x01	; 1
     78c:	29 9f       	mul	r18, r25
     78e:	d0 01       	movw	r26, r0
     790:	11 24       	eor	r1, r1
     792:	a9 59       	subi	r26, 0x99	; 153
     794:	be 4f       	sbci	r27, 0xFE	; 254
     796:	8c 91       	ld	r24, X
     798:	88 23       	and	r24, r24
     79a:	b9 f3       	breq	.-18     	; 0x78a <vTaskSwitchContext+0x1c>
     79c:	11 96       	adiw	r26, 0x01	; 1
     79e:	ed 91       	ld	r30, X+
     7a0:	fc 91       	ld	r31, X
     7a2:	12 97       	sbiw	r26, 0x02	; 2
     7a4:	02 80       	ldd	r0, Z+2	; 0x02
     7a6:	f3 81       	ldd	r31, Z+3	; 0x03
     7a8:	e0 2d       	mov	r30, r0
     7aa:	12 96       	adiw	r26, 0x02	; 2
     7ac:	fc 93       	st	X, r31
     7ae:	ee 93       	st	-X, r30
     7b0:	11 97       	sbiw	r26, 0x01	; 1
     7b2:	cd 01       	movw	r24, r26
     7b4:	03 96       	adiw	r24, 0x03	; 3
     7b6:	e8 17       	cp	r30, r24
     7b8:	f9 07       	cpc	r31, r25
     7ba:	31 f4       	brne	.+12     	; 0x7c8 <vTaskSwitchContext+0x5a>
     7bc:	82 81       	ldd	r24, Z+2	; 0x02
     7be:	93 81       	ldd	r25, Z+3	; 0x03
     7c0:	12 96       	adiw	r26, 0x02	; 2
     7c2:	9c 93       	st	X, r25
     7c4:	8e 93       	st	-X, r24
     7c6:	11 97       	sbiw	r26, 0x01	; 1
     7c8:	11 96       	adiw	r26, 0x01	; 1
     7ca:	ed 91       	ld	r30, X+
     7cc:	fc 91       	ld	r31, X
     7ce:	12 97       	sbiw	r26, 0x02	; 2
     7d0:	86 81       	ldd	r24, Z+6	; 0x06
     7d2:	97 81       	ldd	r25, Z+7	; 0x07
     7d4:	90 93 57 01 	sts	0x0157, r25
     7d8:	80 93 56 01 	sts	0x0156, r24
     7dc:	20 93 59 01 	sts	0x0159, r18
     7e0:	08 95       	ret

000007e2 <vTaskSetTimeOutState>:
	return xReturn;
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
     7e2:	fc 01       	movw	r30, r24
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
     7e4:	80 91 5f 01 	lds	r24, 0x015F
     7e8:	80 83       	st	Z, r24
	pxTimeOut->xTimeOnEntering = xTickCount;
     7ea:	80 91 5b 01 	lds	r24, 0x015B
     7ee:	90 91 5c 01 	lds	r25, 0x015C
     7f2:	92 83       	std	Z+2, r25	; 0x02
     7f4:	81 83       	std	Z+1, r24	; 0x01
}
     7f6:	08 95       	ret

000007f8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
     7f8:	fc 01       	movw	r30, r24
     7fa:	db 01       	movw	r26, r22
BaseType_t xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
     7fc:	0f b6       	in	r0, 0x3f	; 63
     7fe:	f8 94       	cli
     800:	0f 92       	push	r0
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
     802:	40 91 5b 01 	lds	r20, 0x015B
     806:	50 91 5c 01 	lds	r21, 0x015C
				xReturn = pdFALSE;
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
     80a:	90 91 5f 01 	lds	r25, 0x015F
     80e:	80 81       	ld	r24, Z
     810:	98 17       	cp	r25, r24
     812:	29 f0       	breq	.+10     	; 0x81e <xTaskCheckForTimeOut+0x26>
     814:	81 81       	ldd	r24, Z+1	; 0x01
     816:	92 81       	ldd	r25, Z+2	; 0x02
     818:	48 17       	cp	r20, r24
     81a:	59 07       	cpc	r21, r25
     81c:	e0 f4       	brcc	.+56     	; 0x856 <xTaskCheckForTimeOut+0x5e>
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
		}
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
     81e:	21 81       	ldd	r18, Z+1	; 0x01
     820:	32 81       	ldd	r19, Z+2	; 0x02
     822:	6d 91       	ld	r22, X+
     824:	7c 91       	ld	r23, X
     826:	11 97       	sbiw	r26, 0x01	; 1
     828:	ca 01       	movw	r24, r20
     82a:	82 1b       	sub	r24, r18
     82c:	93 0b       	sbc	r25, r19
     82e:	86 17       	cp	r24, r22
     830:	97 07       	cpc	r25, r23
     832:	88 f4       	brcc	.+34     	; 0x856 <xTaskCheckForTimeOut+0x5e>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
     834:	24 1b       	sub	r18, r20
     836:	35 0b       	sbc	r19, r21
     838:	26 0f       	add	r18, r22
     83a:	37 1f       	adc	r19, r23
     83c:	2d 93       	st	X+, r18
     83e:	3c 93       	st	X, r19
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
     840:	80 91 5f 01 	lds	r24, 0x015F
     844:	80 83       	st	Z, r24
	pxTimeOut->xTimeOnEntering = xTickCount;
     846:	80 91 5b 01 	lds	r24, 0x015B
     84a:	90 91 5c 01 	lds	r25, 0x015C
     84e:	92 83       	std	Z+2, r25	; 0x02
     850:	81 83       	std	Z+1, r24	; 0x01
     852:	80 e0       	ldi	r24, 0x00	; 0
     854:	01 c0       	rjmp	.+2      	; 0x858 <xTaskCheckForTimeOut+0x60>
     856:	81 e0       	ldi	r24, 0x01	; 1
		else
		{
			xReturn = pdTRUE;
		}
	}
	taskEXIT_CRITICAL();
     858:	0f 90       	pop	r0
     85a:	0f be       	out	0x3f, r0	; 63

	return xReturn;
}
     85c:	08 95       	ret

0000085e <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
	xYieldPending = pdTRUE;
     85e:	81 e0       	ldi	r24, 0x01	; 1
     860:	80 93 5a 01 	sts	0x015A, r24
}
     864:	08 95       	ret

00000866 <uxTaskResetEventItemValue>:

TickType_t uxTaskResetEventItemValue( void )
{
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
     866:	e0 91 56 01 	lds	r30, 0x0156
     86a:	f0 91 57 01 	lds	r31, 0x0157
     86e:	84 85       	ldd	r24, Z+12	; 0x0c
     870:	95 85       	ldd	r25, Z+13	; 0x0d

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
     872:	a0 91 56 01 	lds	r26, 0x0156
     876:	b0 91 57 01 	lds	r27, 0x0157
     87a:	e0 91 56 01 	lds	r30, 0x0156
     87e:	f0 91 57 01 	lds	r31, 0x0157
     882:	46 89       	ldd	r20, Z+22	; 0x16
     884:	24 e0       	ldi	r18, 0x04	; 4
     886:	30 e0       	ldi	r19, 0x00	; 0
     888:	24 1b       	sub	r18, r20
     88a:	31 09       	sbc	r19, r1
     88c:	1d 96       	adiw	r26, 0x0d	; 13
     88e:	3c 93       	st	X, r19
     890:	2e 93       	st	-X, r18
     892:	1c 97       	sbiw	r26, 0x0c	; 12

	return uxReturn;
}
     894:	08 95       	ret

00000896 <xTaskNotifyStateClear>:
	TCB_t *pxTCB;
	BaseType_t xReturn;

		/* If null is passed in here then it is the calling task that is having
		its notification state cleared. */
		pxTCB = prvGetTCBFromHandle( xTask );
     896:	00 97       	sbiw	r24, 0x00	; 0
     898:	29 f4       	brne	.+10     	; 0x8a4 <xTaskNotifyStateClear+0xe>
     89a:	e0 91 56 01 	lds	r30, 0x0156
     89e:	f0 91 57 01 	lds	r31, 0x0157
     8a2:	01 c0       	rjmp	.+2      	; 0x8a6 <xTaskNotifyStateClear+0x10>
     8a4:	fc 01       	movw	r30, r24

		taskENTER_CRITICAL();
     8a6:	0f b6       	in	r0, 0x3f	; 63
     8a8:	f8 94       	cli
     8aa:	0f 92       	push	r0
		{
			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
     8ac:	85 a1       	ldd	r24, Z+37	; 0x25
     8ae:	82 30       	cpi	r24, 0x02	; 2
     8b0:	11 f0       	breq	.+4      	; 0x8b6 <xTaskNotifyStateClear+0x20>
     8b2:	80 e0       	ldi	r24, 0x00	; 0
     8b4:	02 c0       	rjmp	.+4      	; 0x8ba <xTaskNotifyStateClear+0x24>
			{
				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
     8b6:	15 a2       	std	Z+37, r1	; 0x25
     8b8:	81 e0       	ldi	r24, 0x01	; 1
			else
			{
				xReturn = pdFAIL;
			}
		}
		taskEXIT_CRITICAL();
     8ba:	0f 90       	pop	r0
     8bc:	0f be       	out	0x3f, r0	; 63

		return xReturn;
	}
     8be:	08 95       	ret

000008c0 <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
     8c0:	ef 92       	push	r14
     8c2:	ff 92       	push	r15
     8c4:	0f 93       	push	r16
     8c6:	1f 93       	push	r17
     8c8:	cf 93       	push	r28
     8ca:	df 93       	push	r29
     8cc:	7b 01       	movw	r14, r22
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		pxTCB = ( TCB_t * ) xTaskToNotify;
     8ce:	ec 01       	movw	r28, r24

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
     8d0:	2d a1       	ldd	r18, Y+37	; 0x25
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
     8d2:	82 e0       	ldi	r24, 0x02	; 2
     8d4:	8d a3       	std	Y+37, r24	; 0x25

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
     8d6:	89 a1       	ldd	r24, Y+33	; 0x21
     8d8:	9a a1       	ldd	r25, Y+34	; 0x22
     8da:	ab a1       	ldd	r26, Y+35	; 0x23
     8dc:	bc a1       	ldd	r27, Y+36	; 0x24
     8de:	01 96       	adiw	r24, 0x01	; 1
     8e0:	a1 1d       	adc	r26, r1
     8e2:	b1 1d       	adc	r27, r1
     8e4:	89 a3       	std	Y+33, r24	; 0x21
     8e6:	9a a3       	std	Y+34, r25	; 0x22
     8e8:	ab a3       	std	Y+35, r26	; 0x23
     8ea:	bc a3       	std	Y+36, r27	; 0x24

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
     8ec:	21 30       	cpi	r18, 0x01	; 1
     8ee:	91 f5       	brne	.+100    	; 0x954 <__stack+0x55>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
     8f0:	80 91 58 01 	lds	r24, 0x0158
     8f4:	88 23       	and	r24, r24
     8f6:	a9 f4       	brne	.+42     	; 0x922 <__stack+0x23>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
     8f8:	8e 01       	movw	r16, r28
     8fa:	0e 5f       	subi	r16, 0xFE	; 254
     8fc:	1f 4f       	sbci	r17, 0xFF	; 255
     8fe:	c8 01       	movw	r24, r16
     900:	0e 94 2f 0f 	call	0x1e5e	; 0x1e5e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
     904:	9e 89       	ldd	r25, Y+22	; 0x16
     906:	80 91 59 01 	lds	r24, 0x0159
     90a:	89 17       	cp	r24, r25
     90c:	10 f4       	brcc	.+4      	; 0x912 <__stack+0x13>
     90e:	90 93 59 01 	sts	0x0159, r25
     912:	89 e0       	ldi	r24, 0x09	; 9
     914:	98 9f       	mul	r25, r24
     916:	c0 01       	movw	r24, r0
     918:	11 24       	eor	r1, r1
     91a:	89 59       	subi	r24, 0x99	; 153
     91c:	9e 4f       	sbci	r25, 0xFE	; 254
     91e:	b8 01       	movw	r22, r16
     920:	05 c0       	rjmp	.+10     	; 0x92c <__stack+0x2d>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
     922:	be 01       	movw	r22, r28
     924:	64 5f       	subi	r22, 0xF4	; 244
     926:	7f 4f       	sbci	r23, 0xFF	; 255
     928:	81 ea       	ldi	r24, 0xA1	; 161
     92a:	91 e0       	ldi	r25, 0x01	; 1
     92c:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
     930:	e0 91 56 01 	lds	r30, 0x0156
     934:	f0 91 57 01 	lds	r31, 0x0157
     938:	9e 89       	ldd	r25, Y+22	; 0x16
     93a:	86 89       	ldd	r24, Z+22	; 0x16
     93c:	89 17       	cp	r24, r25
     93e:	50 f4       	brcc	.+20     	; 0x954 <__stack+0x55>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
     940:	e1 14       	cp	r14, r1
     942:	f1 04       	cpc	r15, r1
     944:	21 f0       	breq	.+8      	; 0x94e <__stack+0x4f>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
     946:	81 e0       	ldi	r24, 0x01	; 1
     948:	f7 01       	movw	r30, r14
     94a:	80 83       	st	Z, r24
     94c:	03 c0       	rjmp	.+6      	; 0x954 <__stack+0x55>
					else
					{
						/* Mark that a yield is pending in case the user is not
						using the "xHigherPriorityTaskWoken" parameter in an ISR
						safe FreeRTOS function. */
						xYieldPending = pdTRUE;
     94e:	81 e0       	ldi	r24, 0x01	; 1
     950:	80 93 5a 01 	sts	0x015A, r24
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
     954:	df 91       	pop	r29
     956:	cf 91       	pop	r28
     958:	1f 91       	pop	r17
     95a:	0f 91       	pop	r16
     95c:	ff 90       	pop	r15
     95e:	ef 90       	pop	r14
     960:	08 95       	ret

00000962 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
     962:	ef 92       	push	r14
     964:	ff 92       	push	r15
     966:	0f 93       	push	r16
     968:	1f 93       	push	r17
     96a:	cf 93       	push	r28
     96c:	df 93       	push	r29
     96e:	f8 01       	movw	r30, r16
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		pxTCB = ( TCB_t * ) xTaskToNotify;
     970:	ec 01       	movw	r28, r24

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
		{
			if( pulPreviousNotificationValue != NULL )
     972:	01 15       	cp	r16, r1
     974:	11 05       	cpc	r17, r1
     976:	41 f0       	breq	.+16     	; 0x988 <xTaskGenericNotifyFromISR+0x26>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
     978:	89 a1       	ldd	r24, Y+33	; 0x21
     97a:	9a a1       	ldd	r25, Y+34	; 0x22
     97c:	ab a1       	ldd	r26, Y+35	; 0x23
     97e:	bc a1       	ldd	r27, Y+36	; 0x24
     980:	80 83       	st	Z, r24
     982:	91 83       	std	Z+1, r25	; 0x01
     984:	a2 83       	std	Z+2, r26	; 0x02
     986:	b3 83       	std	Z+3, r27	; 0x03
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
     988:	3d a1       	ldd	r19, Y+37	; 0x25
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
     98a:	82 e0       	ldi	r24, 0x02	; 2
     98c:	8d a3       	std	Y+37, r24	; 0x25

			switch( eAction )
     98e:	22 30       	cpi	r18, 0x02	; 2
     990:	99 f0       	breq	.+38     	; 0x9b8 <xTaskGenericNotifyFromISR+0x56>
     992:	23 30       	cpi	r18, 0x03	; 3
     994:	18 f4       	brcc	.+6      	; 0x99c <xTaskGenericNotifyFromISR+0x3a>
     996:	21 30       	cpi	r18, 0x01	; 1
     998:	19 f5       	brne	.+70     	; 0x9e0 <xTaskGenericNotifyFromISR+0x7e>
     99a:	05 c0       	rjmp	.+10     	; 0x9a6 <xTaskGenericNotifyFromISR+0x44>
     99c:	23 30       	cpi	r18, 0x03	; 3
     99e:	e1 f0       	breq	.+56     	; 0x9d8 <xTaskGenericNotifyFromISR+0x76>
     9a0:	24 30       	cpi	r18, 0x04	; 4
     9a2:	f1 f4       	brne	.+60     	; 0x9e0 <xTaskGenericNotifyFromISR+0x7e>
     9a4:	15 c0       	rjmp	.+42     	; 0x9d0 <xTaskGenericNotifyFromISR+0x6e>
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
     9a6:	89 a1       	ldd	r24, Y+33	; 0x21
     9a8:	9a a1       	ldd	r25, Y+34	; 0x22
     9aa:	ab a1       	ldd	r26, Y+35	; 0x23
     9ac:	bc a1       	ldd	r27, Y+36	; 0x24
     9ae:	84 2b       	or	r24, r20
     9b0:	95 2b       	or	r25, r21
     9b2:	a6 2b       	or	r26, r22
     9b4:	b7 2b       	or	r27, r23
     9b6:	07 c0       	rjmp	.+14     	; 0x9c6 <xTaskGenericNotifyFromISR+0x64>
					break;

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
     9b8:	89 a1       	ldd	r24, Y+33	; 0x21
     9ba:	9a a1       	ldd	r25, Y+34	; 0x22
     9bc:	ab a1       	ldd	r26, Y+35	; 0x23
     9be:	bc a1       	ldd	r27, Y+36	; 0x24
     9c0:	01 96       	adiw	r24, 0x01	; 1
     9c2:	a1 1d       	adc	r26, r1
     9c4:	b1 1d       	adc	r27, r1
     9c6:	89 a3       	std	Y+33, r24	; 0x21
     9c8:	9a a3       	std	Y+34, r25	; 0x22
     9ca:	ab a3       	std	Y+35, r26	; 0x23
     9cc:	bc a3       	std	Y+36, r27	; 0x24
     9ce:	08 c0       	rjmp	.+16     	; 0x9e0 <xTaskGenericNotifyFromISR+0x7e>
				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
					break;

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
     9d0:	32 30       	cpi	r19, 0x02	; 2
     9d2:	11 f4       	brne	.+4      	; 0x9d8 <xTaskGenericNotifyFromISR+0x76>
     9d4:	80 e0       	ldi	r24, 0x00	; 0
     9d6:	3a c0       	rjmp	.+116    	; 0xa4c <xTaskGenericNotifyFromISR+0xea>
					{
						pxTCB->ulNotifiedValue = ulValue;
     9d8:	49 a3       	std	Y+33, r20	; 0x21
     9da:	5a a3       	std	Y+34, r21	; 0x22
     9dc:	6b a3       	std	Y+35, r22	; 0x23
     9de:	7c a3       	std	Y+36, r23	; 0x24

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
     9e0:	31 30       	cpi	r19, 0x01	; 1
     9e2:	99 f5       	brne	.+102    	; 0xa4a <xTaskGenericNotifyFromISR+0xe8>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
     9e4:	80 91 58 01 	lds	r24, 0x0158
     9e8:	88 23       	and	r24, r24
     9ea:	a9 f4       	brne	.+42     	; 0xa16 <xTaskGenericNotifyFromISR+0xb4>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
     9ec:	8e 01       	movw	r16, r28
     9ee:	0e 5f       	subi	r16, 0xFE	; 254
     9f0:	1f 4f       	sbci	r17, 0xFF	; 255
     9f2:	c8 01       	movw	r24, r16
     9f4:	0e 94 2f 0f 	call	0x1e5e	; 0x1e5e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
     9f8:	9e 89       	ldd	r25, Y+22	; 0x16
     9fa:	80 91 59 01 	lds	r24, 0x0159
     9fe:	89 17       	cp	r24, r25
     a00:	10 f4       	brcc	.+4      	; 0xa06 <xTaskGenericNotifyFromISR+0xa4>
     a02:	90 93 59 01 	sts	0x0159, r25
     a06:	89 e0       	ldi	r24, 0x09	; 9
     a08:	98 9f       	mul	r25, r24
     a0a:	c0 01       	movw	r24, r0
     a0c:	11 24       	eor	r1, r1
     a0e:	89 59       	subi	r24, 0x99	; 153
     a10:	9e 4f       	sbci	r25, 0xFE	; 254
     a12:	b8 01       	movw	r22, r16
     a14:	05 c0       	rjmp	.+10     	; 0xa20 <xTaskGenericNotifyFromISR+0xbe>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
     a16:	be 01       	movw	r22, r28
     a18:	64 5f       	subi	r22, 0xF4	; 244
     a1a:	7f 4f       	sbci	r23, 0xFF	; 255
     a1c:	81 ea       	ldi	r24, 0xA1	; 161
     a1e:	91 e0       	ldi	r25, 0x01	; 1
     a20:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
     a24:	e0 91 56 01 	lds	r30, 0x0156
     a28:	f0 91 57 01 	lds	r31, 0x0157
     a2c:	9e 89       	ldd	r25, Y+22	; 0x16
     a2e:	86 89       	ldd	r24, Z+22	; 0x16
     a30:	89 17       	cp	r24, r25
     a32:	58 f4       	brcc	.+22     	; 0xa4a <xTaskGenericNotifyFromISR+0xe8>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
     a34:	e1 14       	cp	r14, r1
     a36:	f1 04       	cpc	r15, r1
     a38:	21 f0       	breq	.+8      	; 0xa42 <xTaskGenericNotifyFromISR+0xe0>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
     a3a:	81 e0       	ldi	r24, 0x01	; 1
     a3c:	f7 01       	movw	r30, r14
     a3e:	80 83       	st	Z, r24
     a40:	05 c0       	rjmp	.+10     	; 0xa4c <xTaskGenericNotifyFromISR+0xea>
					else
					{
						/* Mark that a yield is pending in case the user is not
						using the "xHigherPriorityTaskWoken" parameter to an ISR
						safe FreeRTOS function. */
						xYieldPending = pdTRUE;
     a42:	81 e0       	ldi	r24, 0x01	; 1
     a44:	80 93 5a 01 	sts	0x015A, r24
     a48:	01 c0       	rjmp	.+2      	; 0xa4c <xTaskGenericNotifyFromISR+0xea>
     a4a:	81 e0       	ldi	r24, 0x01	; 1
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
	}
     a4c:	df 91       	pop	r29
     a4e:	cf 91       	pop	r28
     a50:	1f 91       	pop	r17
     a52:	0f 91       	pop	r16
     a54:	ff 90       	pop	r15
     a56:	ef 90       	pop	r14
     a58:	08 95       	ret

00000a5a <xTaskRemoveFromUnorderedEventList>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
     a5a:	0f 93       	push	r16
     a5c:	1f 93       	push	r17
     a5e:	cf 93       	push	r28
     a60:	df 93       	push	r29
     a62:	fc 01       	movw	r30, r24
	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
     a64:	70 68       	ori	r23, 0x80	; 128
     a66:	71 83       	std	Z+1, r23	; 0x01
     a68:	60 83       	st	Z, r22

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
     a6a:	c6 81       	ldd	r28, Z+6	; 0x06
     a6c:	d7 81       	ldd	r29, Z+7	; 0x07
	configASSERT( pxUnblockedTCB );
	( void ) uxListRemove( pxEventListItem );
     a6e:	0e 94 2f 0f 	call	0x1e5e	; 0x1e5e <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
     a72:	8e 01       	movw	r16, r28
     a74:	0e 5f       	subi	r16, 0xFE	; 254
     a76:	1f 4f       	sbci	r17, 0xFF	; 255
     a78:	c8 01       	movw	r24, r16
     a7a:	0e 94 2f 0f 	call	0x1e5e	; 0x1e5e <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
     a7e:	9e 89       	ldd	r25, Y+22	; 0x16
     a80:	80 91 59 01 	lds	r24, 0x0159
     a84:	89 17       	cp	r24, r25
     a86:	10 f4       	brcc	.+4      	; 0xa8c <xTaskRemoveFromUnorderedEventList+0x32>
     a88:	90 93 59 01 	sts	0x0159, r25
     a8c:	89 e0       	ldi	r24, 0x09	; 9
     a8e:	98 9f       	mul	r25, r24
     a90:	c0 01       	movw	r24, r0
     a92:	11 24       	eor	r1, r1
     a94:	89 59       	subi	r24, 0x99	; 153
     a96:	9e 4f       	sbci	r25, 0xFE	; 254
     a98:	b8 01       	movw	r22, r16
     a9a:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
     a9e:	e0 91 56 01 	lds	r30, 0x0156
     aa2:	f0 91 57 01 	lds	r31, 0x0157
     aa6:	9e 89       	ldd	r25, Y+22	; 0x16
     aa8:	86 89       	ldd	r24, Z+22	; 0x16
     aaa:	89 17       	cp	r24, r25
     aac:	10 f0       	brcs	.+4      	; 0xab2 <xTaskRemoveFromUnorderedEventList+0x58>
     aae:	80 e0       	ldi	r24, 0x00	; 0
     ab0:	03 c0       	rjmp	.+6      	; 0xab8 <xTaskRemoveFromUnorderedEventList+0x5e>
		switch now. */
		xReturn = pdTRUE;

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
     ab2:	81 e0       	ldi	r24, 0x01	; 1
     ab4:	80 93 5a 01 	sts	0x015A, r24
	{
		xReturn = pdFALSE;
	}

	return xReturn;
}
     ab8:	df 91       	pop	r29
     aba:	cf 91       	pop	r28
     abc:	1f 91       	pop	r17
     abe:	0f 91       	pop	r16
     ac0:	08 95       	ret

00000ac2 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
     ac2:	0f 93       	push	r16
     ac4:	1f 93       	push	r17
     ac6:	cf 93       	push	r28
     ac8:	df 93       	push	r29
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
     aca:	dc 01       	movw	r26, r24
     acc:	15 96       	adiw	r26, 0x05	; 5
     ace:	ed 91       	ld	r30, X+
     ad0:	fc 91       	ld	r31, X
     ad2:	16 97       	sbiw	r26, 0x06	; 6
     ad4:	c6 81       	ldd	r28, Z+6	; 0x06
     ad6:	d7 81       	ldd	r29, Z+7	; 0x07
	configASSERT( pxUnblockedTCB );
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
     ad8:	8e 01       	movw	r16, r28
     ada:	04 5f       	subi	r16, 0xF4	; 244
     adc:	1f 4f       	sbci	r17, 0xFF	; 255
     ade:	c8 01       	movw	r24, r16
     ae0:	0e 94 2f 0f 	call	0x1e5e	; 0x1e5e <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
     ae4:	80 91 58 01 	lds	r24, 0x0158
     ae8:	88 23       	and	r24, r24
     aea:	a1 f4       	brne	.+40     	; 0xb14 <xTaskRemoveFromEventList+0x52>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
     aec:	8e 01       	movw	r16, r28
     aee:	0e 5f       	subi	r16, 0xFE	; 254
     af0:	1f 4f       	sbci	r17, 0xFF	; 255
     af2:	c8 01       	movw	r24, r16
     af4:	0e 94 2f 0f 	call	0x1e5e	; 0x1e5e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
     af8:	9e 89       	ldd	r25, Y+22	; 0x16
     afa:	80 91 59 01 	lds	r24, 0x0159
     afe:	89 17       	cp	r24, r25
     b00:	10 f4       	brcc	.+4      	; 0xb06 <xTaskRemoveFromEventList+0x44>
     b02:	90 93 59 01 	sts	0x0159, r25
     b06:	89 e0       	ldi	r24, 0x09	; 9
     b08:	98 9f       	mul	r25, r24
     b0a:	c0 01       	movw	r24, r0
     b0c:	11 24       	eor	r1, r1
     b0e:	89 59       	subi	r24, 0x99	; 153
     b10:	9e 4f       	sbci	r25, 0xFE	; 254
     b12:	02 c0       	rjmp	.+4      	; 0xb18 <xTaskRemoveFromEventList+0x56>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
     b14:	81 ea       	ldi	r24, 0xA1	; 161
     b16:	91 e0       	ldi	r25, 0x01	; 1
     b18:	b8 01       	movw	r22, r16
     b1a:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
     b1e:	e0 91 56 01 	lds	r30, 0x0156
     b22:	f0 91 57 01 	lds	r31, 0x0157
     b26:	9e 89       	ldd	r25, Y+22	; 0x16
     b28:	86 89       	ldd	r24, Z+22	; 0x16
     b2a:	89 17       	cp	r24, r25
     b2c:	10 f0       	brcs	.+4      	; 0xb32 <xTaskRemoveFromEventList+0x70>
     b2e:	80 e0       	ldi	r24, 0x00	; 0
     b30:	03 c0       	rjmp	.+6      	; 0xb38 <xTaskRemoveFromEventList+0x76>
		it should force a context switch now. */
		xReturn = pdTRUE;

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
     b32:	81 e0       	ldi	r24, 0x01	; 1
     b34:	80 93 5a 01 	sts	0x015A, r24
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
}
     b38:	df 91       	pop	r29
     b3a:	cf 91       	pop	r28
     b3c:	1f 91       	pop	r17
     b3e:	0f 91       	pop	r16
     b40:	08 95       	ret

00000b42 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
     b42:	cf 92       	push	r12
     b44:	df 92       	push	r13
     b46:	ef 92       	push	r14
     b48:	ff 92       	push	r15
     b4a:	0f 93       	push	r16
     b4c:	1f 93       	push	r17
     b4e:	cf 93       	push	r28
     b50:	df 93       	push	r29

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
     b52:	80 91 58 01 	lds	r24, 0x0158
     b56:	88 23       	and	r24, r24
     b58:	09 f0       	breq	.+2      	; 0xb5c <xTaskIncrementTick+0x1a>
     b5a:	a6 c0       	rjmp	.+332    	; 0xca8 <xTaskIncrementTick+0x166>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + 1;
     b5c:	00 91 5b 01 	lds	r16, 0x015B
     b60:	10 91 5c 01 	lds	r17, 0x015C
     b64:	0f 5f       	subi	r16, 0xFF	; 255
     b66:	1f 4f       	sbci	r17, 0xFF	; 255

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
     b68:	10 93 5c 01 	sts	0x015C, r17
     b6c:	00 93 5b 01 	sts	0x015B, r16

		if( xConstTickCount == ( TickType_t ) 0U )
     b70:	01 15       	cp	r16, r1
     b72:	11 05       	cpc	r17, r1
     b74:	79 f5       	brne	.+94     	; 0xbd4 <xTaskIncrementTick+0x92>
		{
			taskSWITCH_DELAYED_LISTS();
     b76:	20 91 9d 01 	lds	r18, 0x019D
     b7a:	30 91 9e 01 	lds	r19, 0x019E
     b7e:	80 91 9f 01 	lds	r24, 0x019F
     b82:	90 91 a0 01 	lds	r25, 0x01A0
     b86:	90 93 9e 01 	sts	0x019E, r25
     b8a:	80 93 9d 01 	sts	0x019D, r24
     b8e:	30 93 a0 01 	sts	0x01A0, r19
     b92:	20 93 9f 01 	sts	0x019F, r18
     b96:	80 91 5f 01 	lds	r24, 0x015F
     b9a:	8f 5f       	subi	r24, 0xFF	; 255
     b9c:	80 93 5f 01 	sts	0x015F, r24

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
     ba0:	e0 91 9d 01 	lds	r30, 0x019D
     ba4:	f0 91 9e 01 	lds	r31, 0x019E
     ba8:	80 81       	ld	r24, Z
     baa:	88 23       	and	r24, r24
     bac:	19 f4       	brne	.+6      	; 0xbb4 <xTaskIncrementTick+0x72>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
     bae:	8f ef       	ldi	r24, 0xFF	; 255
     bb0:	9f ef       	ldi	r25, 0xFF	; 255
     bb2:	0c c0       	rjmp	.+24     	; 0xbcc <xTaskIncrementTick+0x8a>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
     bb4:	e0 91 9d 01 	lds	r30, 0x019D
     bb8:	f0 91 9e 01 	lds	r31, 0x019E
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
     bbc:	05 80       	ldd	r0, Z+5	; 0x05
     bbe:	f6 81       	ldd	r31, Z+6	; 0x06
     bc0:	e0 2d       	mov	r30, r0
     bc2:	06 80       	ldd	r0, Z+6	; 0x06
     bc4:	f7 81       	ldd	r31, Z+7	; 0x07
     bc6:	e0 2d       	mov	r30, r0
     bc8:	82 81       	ldd	r24, Z+2	; 0x02
     bca:	93 81       	ldd	r25, Z+3	; 0x03
     bcc:	90 93 5e 01 	sts	0x015E, r25
     bd0:	80 93 5d 01 	sts	0x015D, r24

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
     bd4:	80 91 5d 01 	lds	r24, 0x015D
     bd8:	90 91 5e 01 	lds	r25, 0x015E
     bdc:	08 17       	cp	r16, r24
     bde:	19 07       	cpc	r17, r25
     be0:	08 f4       	brcc	.+2      	; 0xbe4 <xTaskIncrementTick+0xa2>
     be2:	4b c0       	rjmp	.+150    	; 0xc7a <xTaskIncrementTick+0x138>
     be4:	dd 24       	eor	r13, r13
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
     be6:	49 e0       	ldi	r20, 0x09	; 9
     be8:	c4 2e       	mov	r12, r20
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
     bea:	e0 91 9d 01 	lds	r30, 0x019D
     bee:	f0 91 9e 01 	lds	r31, 0x019E
     bf2:	80 81       	ld	r24, Z
     bf4:	88 23       	and	r24, r24
     bf6:	19 f4       	brne	.+6      	; 0xbfe <xTaskIncrementTick+0xbc>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
     bf8:	8f ef       	ldi	r24, 0xFF	; 255
     bfa:	9f ef       	ldi	r25, 0xFF	; 255
     bfc:	0e c0       	rjmp	.+28     	; 0xc1a <xTaskIncrementTick+0xd8>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
     bfe:	e0 91 9d 01 	lds	r30, 0x019D
     c02:	f0 91 9e 01 	lds	r31, 0x019E
     c06:	05 80       	ldd	r0, Z+5	; 0x05
     c08:	f6 81       	ldd	r31, Z+6	; 0x06
     c0a:	e0 2d       	mov	r30, r0
     c0c:	c6 81       	ldd	r28, Z+6	; 0x06
     c0e:	d7 81       	ldd	r29, Z+7	; 0x07
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
     c10:	8a 81       	ldd	r24, Y+2	; 0x02
     c12:	9b 81       	ldd	r25, Y+3	; 0x03

					if( xConstTickCount < xItemValue )
     c14:	08 17       	cp	r16, r24
     c16:	19 07       	cpc	r17, r25
     c18:	28 f4       	brcc	.+10     	; 0xc24 <xTaskIncrementTick+0xe2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
     c1a:	90 93 5e 01 	sts	0x015E, r25
     c1e:	80 93 5d 01 	sts	0x015D, r24
     c22:	2c c0       	rjmp	.+88     	; 0xc7c <xTaskIncrementTick+0x13a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
     c24:	32 e0       	ldi	r19, 0x02	; 2
     c26:	e3 2e       	mov	r14, r19
     c28:	f1 2c       	mov	r15, r1
     c2a:	ec 0e       	add	r14, r28
     c2c:	fd 1e       	adc	r15, r29
     c2e:	c7 01       	movw	r24, r14
     c30:	0e 94 2f 0f 	call	0x1e5e	; 0x1e5e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
     c34:	8c 89       	ldd	r24, Y+20	; 0x14
     c36:	9d 89       	ldd	r25, Y+21	; 0x15
     c38:	89 2b       	or	r24, r25
     c3a:	21 f0       	breq	.+8      	; 0xc44 <xTaskIncrementTick+0x102>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
     c3c:	ce 01       	movw	r24, r28
     c3e:	0c 96       	adiw	r24, 0x0c	; 12
     c40:	0e 94 2f 0f 	call	0x1e5e	; 0x1e5e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
     c44:	9e 89       	ldd	r25, Y+22	; 0x16
     c46:	80 91 59 01 	lds	r24, 0x0159
     c4a:	89 17       	cp	r24, r25
     c4c:	10 f4       	brcc	.+4      	; 0xc52 <xTaskIncrementTick+0x110>
     c4e:	90 93 59 01 	sts	0x0159, r25
     c52:	9c 9d       	mul	r25, r12
     c54:	c0 01       	movw	r24, r0
     c56:	11 24       	eor	r1, r1
     c58:	89 59       	subi	r24, 0x99	; 153
     c5a:	9e 4f       	sbci	r25, 0xFE	; 254
     c5c:	b7 01       	movw	r22, r14
     c5e:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
     c62:	e0 91 56 01 	lds	r30, 0x0156
     c66:	f0 91 57 01 	lds	r31, 0x0157
     c6a:	9e 89       	ldd	r25, Y+22	; 0x16
     c6c:	86 89       	ldd	r24, Z+22	; 0x16
     c6e:	98 17       	cp	r25, r24
     c70:	08 f4       	brcc	.+2      	; 0xc74 <xTaskIncrementTick+0x132>
     c72:	bb cf       	rjmp	.-138    	; 0xbea <xTaskIncrementTick+0xa8>
     c74:	dd 24       	eor	r13, r13
     c76:	d3 94       	inc	r13
     c78:	b8 cf       	rjmp	.-144    	; 0xbea <xTaskIncrementTick+0xa8>
     c7a:	dd 24       	eor	r13, r13
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
     c7c:	e0 91 56 01 	lds	r30, 0x0156
     c80:	f0 91 57 01 	lds	r31, 0x0157
     c84:	86 89       	ldd	r24, Z+22	; 0x16
     c86:	90 e0       	ldi	r25, 0x00	; 0
     c88:	fc 01       	movw	r30, r24
     c8a:	23 e0       	ldi	r18, 0x03	; 3
     c8c:	ee 0f       	add	r30, r30
     c8e:	ff 1f       	adc	r31, r31
     c90:	2a 95       	dec	r18
     c92:	e1 f7       	brne	.-8      	; 0xc8c <xTaskIncrementTick+0x14a>
     c94:	e8 0f       	add	r30, r24
     c96:	f9 1f       	adc	r31, r25
     c98:	e9 59       	subi	r30, 0x99	; 153
     c9a:	fe 4f       	sbci	r31, 0xFE	; 254
     c9c:	80 81       	ld	r24, Z
     c9e:	82 30       	cpi	r24, 0x02	; 2
     ca0:	48 f0       	brcs	.+18     	; 0xcb4 <xTaskIncrementTick+0x172>
     ca2:	dd 24       	eor	r13, r13
     ca4:	d3 94       	inc	r13
     ca6:	06 c0       	rjmp	.+12     	; 0xcb4 <xTaskIncrementTick+0x172>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
     ca8:	80 91 60 01 	lds	r24, 0x0160
     cac:	8f 5f       	subi	r24, 0xFF	; 255
     cae:	80 93 60 01 	sts	0x0160, r24
     cb2:	dd 24       	eor	r13, r13
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
     cb4:	80 91 5a 01 	lds	r24, 0x015A
     cb8:	88 23       	and	r24, r24
     cba:	11 f0       	breq	.+4      	; 0xcc0 <xTaskIncrementTick+0x17e>
     cbc:	dd 24       	eor	r13, r13
     cbe:	d3 94       	inc	r13
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
}
     cc0:	8d 2d       	mov	r24, r13
     cc2:	df 91       	pop	r29
     cc4:	cf 91       	pop	r28
     cc6:	1f 91       	pop	r17
     cc8:	0f 91       	pop	r16
     cca:	ff 90       	pop	r15
     ccc:	ef 90       	pop	r14
     cce:	df 90       	pop	r13
     cd0:	cf 90       	pop	r12
     cd2:	08 95       	ret

00000cd4 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
     cd4:	0f 93       	push	r16
     cd6:	1f 93       	push	r17
     cd8:	cf 93       	push	r28
     cda:	df 93       	push	r29
     cdc:	f8 01       	movw	r30, r16
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
		pxTCB = ( TCB_t * ) xTaskToNotify;
     cde:	ec 01       	movw	r28, r24

		taskENTER_CRITICAL();
     ce0:	0f b6       	in	r0, 0x3f	; 63
     ce2:	f8 94       	cli
     ce4:	0f 92       	push	r0
		{
			if( pulPreviousNotificationValue != NULL )
     ce6:	01 15       	cp	r16, r1
     ce8:	11 05       	cpc	r17, r1
     cea:	41 f0       	breq	.+16     	; 0xcfc <xTaskGenericNotify+0x28>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
     cec:	89 a1       	ldd	r24, Y+33	; 0x21
     cee:	9a a1       	ldd	r25, Y+34	; 0x22
     cf0:	ab a1       	ldd	r26, Y+35	; 0x23
     cf2:	bc a1       	ldd	r27, Y+36	; 0x24
     cf4:	80 83       	st	Z, r24
     cf6:	91 83       	std	Z+1, r25	; 0x01
     cf8:	a2 83       	std	Z+2, r26	; 0x02
     cfa:	b3 83       	std	Z+3, r27	; 0x03
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
     cfc:	3d a1       	ldd	r19, Y+37	; 0x25

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
     cfe:	82 e0       	ldi	r24, 0x02	; 2
     d00:	8d a3       	std	Y+37, r24	; 0x25

			switch( eAction )
     d02:	22 30       	cpi	r18, 0x02	; 2
     d04:	99 f0       	breq	.+38     	; 0xd2c <xTaskGenericNotify+0x58>
     d06:	23 30       	cpi	r18, 0x03	; 3
     d08:	18 f4       	brcc	.+6      	; 0xd10 <xTaskGenericNotify+0x3c>
     d0a:	21 30       	cpi	r18, 0x01	; 1
     d0c:	19 f5       	brne	.+70     	; 0xd54 <xTaskGenericNotify+0x80>
     d0e:	05 c0       	rjmp	.+10     	; 0xd1a <xTaskGenericNotify+0x46>
     d10:	23 30       	cpi	r18, 0x03	; 3
     d12:	e1 f0       	breq	.+56     	; 0xd4c <xTaskGenericNotify+0x78>
     d14:	24 30       	cpi	r18, 0x04	; 4
     d16:	f1 f4       	brne	.+60     	; 0xd54 <xTaskGenericNotify+0x80>
     d18:	15 c0       	rjmp	.+42     	; 0xd44 <xTaskGenericNotify+0x70>
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
     d1a:	89 a1       	ldd	r24, Y+33	; 0x21
     d1c:	9a a1       	ldd	r25, Y+34	; 0x22
     d1e:	ab a1       	ldd	r26, Y+35	; 0x23
     d20:	bc a1       	ldd	r27, Y+36	; 0x24
     d22:	84 2b       	or	r24, r20
     d24:	95 2b       	or	r25, r21
     d26:	a6 2b       	or	r26, r22
     d28:	b7 2b       	or	r27, r23
     d2a:	07 c0       	rjmp	.+14     	; 0xd3a <xTaskGenericNotify+0x66>
					break;

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
     d2c:	89 a1       	ldd	r24, Y+33	; 0x21
     d2e:	9a a1       	ldd	r25, Y+34	; 0x22
     d30:	ab a1       	ldd	r26, Y+35	; 0x23
     d32:	bc a1       	ldd	r27, Y+36	; 0x24
     d34:	01 96       	adiw	r24, 0x01	; 1
     d36:	a1 1d       	adc	r26, r1
     d38:	b1 1d       	adc	r27, r1
     d3a:	89 a3       	std	Y+33, r24	; 0x21
     d3c:	9a a3       	std	Y+34, r25	; 0x22
     d3e:	ab a3       	std	Y+35, r26	; 0x23
     d40:	bc a3       	std	Y+36, r27	; 0x24
     d42:	08 c0       	rjmp	.+16     	; 0xd54 <xTaskGenericNotify+0x80>
				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
					break;

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
     d44:	32 30       	cpi	r19, 0x02	; 2
     d46:	11 f4       	brne	.+4      	; 0xd4c <xTaskGenericNotify+0x78>
     d48:	80 e0       	ldi	r24, 0x00	; 0
     d4a:	27 c0       	rjmp	.+78     	; 0xd9a <xTaskGenericNotify+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
     d4c:	49 a3       	std	Y+33, r20	; 0x21
     d4e:	5a a3       	std	Y+34, r21	; 0x22
     d50:	6b a3       	std	Y+35, r22	; 0x23
     d52:	7c a3       	std	Y+36, r23	; 0x24

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
     d54:	31 30       	cpi	r19, 0x01	; 1
     d56:	01 f5       	brne	.+64     	; 0xd98 <xTaskGenericNotify+0xc4>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
     d58:	8e 01       	movw	r16, r28
     d5a:	0e 5f       	subi	r16, 0xFE	; 254
     d5c:	1f 4f       	sbci	r17, 0xFF	; 255
     d5e:	c8 01       	movw	r24, r16
     d60:	0e 94 2f 0f 	call	0x1e5e	; 0x1e5e <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
     d64:	9e 89       	ldd	r25, Y+22	; 0x16
     d66:	80 91 59 01 	lds	r24, 0x0159
     d6a:	89 17       	cp	r24, r25
     d6c:	10 f4       	brcc	.+4      	; 0xd72 <xTaskGenericNotify+0x9e>
     d6e:	90 93 59 01 	sts	0x0159, r25
     d72:	89 e0       	ldi	r24, 0x09	; 9
     d74:	98 9f       	mul	r25, r24
     d76:	c0 01       	movw	r24, r0
     d78:	11 24       	eor	r1, r1
     d7a:	89 59       	subi	r24, 0x99	; 153
     d7c:	9e 4f       	sbci	r25, 0xFE	; 254
     d7e:	b8 01       	movw	r22, r16
     d80:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <vListInsertEnd>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
     d84:	e0 91 56 01 	lds	r30, 0x0156
     d88:	f0 91 57 01 	lds	r31, 0x0157
     d8c:	9e 89       	ldd	r25, Y+22	; 0x16
     d8e:	86 89       	ldd	r24, Z+22	; 0x16
     d90:	89 17       	cp	r24, r25
     d92:	10 f4       	brcc	.+4      	; 0xd98 <xTaskGenericNotify+0xc4>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
     d94:	0e 94 3d 12 	call	0x247a	; 0x247a <vPortYield>
     d98:	81 e0       	ldi	r24, 0x01	; 1
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
     d9a:	0f 90       	pop	r0
     d9c:	0f be       	out	0x3f, r0	; 63

		return xReturn;
	}
     d9e:	df 91       	pop	r29
     da0:	cf 91       	pop	r28
     da2:	1f 91       	pop	r17
     da4:	0f 91       	pop	r16
     da6:	08 95       	ret

00000da8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
     da8:	ef 92       	push	r14
     daa:	ff 92       	push	r15
     dac:	0f 93       	push	r16
     dae:	1f 93       	push	r17
     db0:	cf 93       	push	r28
     db2:	df 93       	push	r29
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
     db4:	0f b6       	in	r0, 0x3f	; 63
     db6:	f8 94       	cli
     db8:	0f 92       	push	r0
	{
		--uxSchedulerSuspended;
     dba:	80 91 58 01 	lds	r24, 0x0158
     dbe:	81 50       	subi	r24, 0x01	; 1
     dc0:	80 93 58 01 	sts	0x0158, r24

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
     dc4:	80 91 58 01 	lds	r24, 0x0158
     dc8:	88 23       	and	r24, r24
     dca:	09 f0       	breq	.+2      	; 0xdce <xTaskResumeAll+0x26>
     dcc:	6c c0       	rjmp	.+216    	; 0xea6 <xTaskResumeAll+0xfe>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
     dce:	80 91 61 01 	lds	r24, 0x0161
     dd2:	88 23       	and	r24, r24
     dd4:	09 f4       	brne	.+2      	; 0xdd8 <xTaskResumeAll+0x30>
     dd6:	67 c0       	rjmp	.+206    	; 0xea6 <xTaskResumeAll+0xfe>
     dd8:	c0 e0       	ldi	r28, 0x00	; 0
     dda:	d0 e0       	ldi	r29, 0x00	; 0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
					prvAddTaskToReadyList( pxTCB );
     ddc:	59 e0       	ldi	r21, 0x09	; 9
     dde:	e5 2e       	mov	r14, r21

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
					{
						xYieldPending = pdTRUE;
     de0:	ff 24       	eor	r15, r15
     de2:	f3 94       	inc	r15
     de4:	29 c0       	rjmp	.+82     	; 0xe38 <xTaskResumeAll+0x90>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
     de6:	e0 91 a6 01 	lds	r30, 0x01A6
     dea:	f0 91 a7 01 	lds	r31, 0x01A7
     dee:	c6 81       	ldd	r28, Z+6	; 0x06
     df0:	d7 81       	ldd	r29, Z+7	; 0x07
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
     df2:	ce 01       	movw	r24, r28
     df4:	0c 96       	adiw	r24, 0x0c	; 12
     df6:	0e 94 2f 0f 	call	0x1e5e	; 0x1e5e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
     dfa:	8e 01       	movw	r16, r28
     dfc:	0e 5f       	subi	r16, 0xFE	; 254
     dfe:	1f 4f       	sbci	r17, 0xFF	; 255
     e00:	c8 01       	movw	r24, r16
     e02:	0e 94 2f 0f 	call	0x1e5e	; 0x1e5e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
     e06:	9e 89       	ldd	r25, Y+22	; 0x16
     e08:	80 91 59 01 	lds	r24, 0x0159
     e0c:	89 17       	cp	r24, r25
     e0e:	10 f4       	brcc	.+4      	; 0xe14 <xTaskResumeAll+0x6c>
     e10:	90 93 59 01 	sts	0x0159, r25
     e14:	9e 9d       	mul	r25, r14
     e16:	c0 01       	movw	r24, r0
     e18:	11 24       	eor	r1, r1
     e1a:	89 59       	subi	r24, 0x99	; 153
     e1c:	9e 4f       	sbci	r25, 0xFE	; 254
     e1e:	b8 01       	movw	r22, r16
     e20:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
     e24:	e0 91 56 01 	lds	r30, 0x0156
     e28:	f0 91 57 01 	lds	r31, 0x0157
     e2c:	9e 89       	ldd	r25, Y+22	; 0x16
     e2e:	86 89       	ldd	r24, Z+22	; 0x16
     e30:	98 17       	cp	r25, r24
     e32:	10 f0       	brcs	.+4      	; 0xe38 <xTaskResumeAll+0x90>
					{
						xYieldPending = pdTRUE;
     e34:	f0 92 5a 01 	sts	0x015A, r15
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
     e38:	80 91 a1 01 	lds	r24, 0x01A1
     e3c:	88 23       	and	r24, r24
     e3e:	99 f6       	brne	.-90     	; 0xde6 <xTaskResumeAll+0x3e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
     e40:	cd 2b       	or	r28, r29
     e42:	d1 f0       	breq	.+52     	; 0xe78 <xTaskResumeAll+0xd0>

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
     e44:	e0 91 9d 01 	lds	r30, 0x019D
     e48:	f0 91 9e 01 	lds	r31, 0x019E
     e4c:	80 81       	ld	r24, Z
     e4e:	88 23       	and	r24, r24
     e50:	19 f4       	brne	.+6      	; 0xe58 <xTaskResumeAll+0xb0>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
     e52:	8f ef       	ldi	r24, 0xFF	; 255
     e54:	9f ef       	ldi	r25, 0xFF	; 255
     e56:	0c c0       	rjmp	.+24     	; 0xe70 <xTaskResumeAll+0xc8>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
     e58:	e0 91 9d 01 	lds	r30, 0x019D
     e5c:	f0 91 9e 01 	lds	r31, 0x019E
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
     e60:	05 80       	ldd	r0, Z+5	; 0x05
     e62:	f6 81       	ldd	r31, Z+6	; 0x06
     e64:	e0 2d       	mov	r30, r0
     e66:	06 80       	ldd	r0, Z+6	; 0x06
     e68:	f7 81       	ldd	r31, Z+7	; 0x07
     e6a:	e0 2d       	mov	r30, r0
     e6c:	82 81       	ldd	r24, Z+2	; 0x02
     e6e:	93 81       	ldd	r25, Z+3	; 0x03
     e70:	90 93 5e 01 	sts	0x015E, r25
     e74:	80 93 5d 01 	sts	0x015D, r24
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
     e78:	10 91 60 01 	lds	r17, 0x0160

					if( uxPendedCounts > ( UBaseType_t ) 0U )
     e7c:	11 23       	and	r17, r17
     e7e:	59 f0       	breq	.+22     	; 0xe96 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
							{
								xYieldPending = pdTRUE;
     e80:	01 e0       	ldi	r16, 0x01	; 1

					if( uxPendedCounts > ( UBaseType_t ) 0U )
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
     e82:	0e 94 a1 05 	call	0xb42	; 0xb42 <xTaskIncrementTick>
     e86:	88 23       	and	r24, r24
     e88:	11 f0       	breq	.+4      	; 0xe8e <xTaskResumeAll+0xe6>
							{
								xYieldPending = pdTRUE;
     e8a:	00 93 5a 01 	sts	0x015A, r16
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
     e8e:	11 50       	subi	r17, 0x01	; 1
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
     e90:	c1 f7       	brne	.-16     	; 0xe82 <xTaskResumeAll+0xda>

						uxPendedTicks = 0;
     e92:	10 92 60 01 	sts	0x0160, r1
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
     e96:	80 91 5a 01 	lds	r24, 0x015A
     e9a:	88 23       	and	r24, r24
     e9c:	21 f0       	breq	.+8      	; 0xea6 <xTaskResumeAll+0xfe>
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
     e9e:	0e 94 3d 12 	call	0x247a	; 0x247a <vPortYield>
     ea2:	81 e0       	ldi	r24, 0x01	; 1
     ea4:	01 c0       	rjmp	.+2      	; 0xea8 <xTaskResumeAll+0x100>
     ea6:	80 e0       	ldi	r24, 0x00	; 0
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
     ea8:	0f 90       	pop	r0
     eaa:	0f be       	out	0x3f, r0	; 63

	return xAlreadyYielded;
}
     eac:	df 91       	pop	r29
     eae:	cf 91       	pop	r28
     eb0:	1f 91       	pop	r17
     eb2:	0f 91       	pop	r16
     eb4:	ff 90       	pop	r15
     eb6:	ef 90       	pop	r14
     eb8:	08 95       	ret

00000eba <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
     eba:	0f 93       	push	r16
     ebc:	1f 93       	push	r17
     ebe:	cf 93       	push	r28
     ec0:	df 93       	push	r29
     ec2:	ec 01       	movw	r28, r24
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
     ec4:	00 91 5b 01 	lds	r16, 0x015B
     ec8:	10 91 5c 01 	lds	r17, 0x015C
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
     ecc:	80 91 56 01 	lds	r24, 0x0156
     ed0:	90 91 57 01 	lds	r25, 0x0157
     ed4:	02 96       	adiw	r24, 0x02	; 2
     ed6:	0e 94 2f 0f 	call	0x1e5e	; 0x1e5e <uxListRemove>
	#else /* INCLUDE_vTaskSuspend */
	{
		/* Calculate the time at which the task should be woken if the event
		does not occur.  This may overflow but this doesn't matter, the kernel
		will manage it correctly. */
		xTimeToWake = xConstTickCount + xTicksToWait;
     eda:	c0 0f       	add	r28, r16
     edc:	d1 1f       	adc	r29, r17

		/* The list item will be inserted in wake time order. */
		listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
     ede:	e0 91 56 01 	lds	r30, 0x0156
     ee2:	f0 91 57 01 	lds	r31, 0x0157
     ee6:	d3 83       	std	Z+3, r29	; 0x03
     ee8:	c2 83       	std	Z+2, r28	; 0x02

		if( xTimeToWake < xConstTickCount )
     eea:	c0 17       	cp	r28, r16
     eec:	d1 07       	cpc	r29, r17
     eee:	68 f4       	brcc	.+26     	; 0xf0a <prvAddCurrentTaskToDelayedList+0x50>
		{
			/* Wake time has overflowed.  Place this item in the overflow list. */
			vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
     ef0:	80 91 9f 01 	lds	r24, 0x019F
     ef4:	90 91 a0 01 	lds	r25, 0x01A0
     ef8:	60 91 56 01 	lds	r22, 0x0156
     efc:	70 91 57 01 	lds	r23, 0x0157
     f00:	6e 5f       	subi	r22, 0xFE	; 254
     f02:	7f 4f       	sbci	r23, 0xFF	; 255
     f04:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <vListInsert>
     f08:	17 c0       	rjmp	.+46     	; 0xf38 <prvAddCurrentTaskToDelayedList+0x7e>
		}
		else
		{
			/* The wake time has not overflowed, so the current block list is used. */
			vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
     f0a:	80 91 9d 01 	lds	r24, 0x019D
     f0e:	90 91 9e 01 	lds	r25, 0x019E
     f12:	60 91 56 01 	lds	r22, 0x0156
     f16:	70 91 57 01 	lds	r23, 0x0157
     f1a:	6e 5f       	subi	r22, 0xFE	; 254
     f1c:	7f 4f       	sbci	r23, 0xFF	; 255
     f1e:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <vListInsert>

			/* If the task entering the blocked state was placed at the head of the
			list of blocked tasks then xNextTaskUnblockTime needs to be updated
			too. */
			if( xTimeToWake < xNextTaskUnblockTime )
     f22:	80 91 5d 01 	lds	r24, 0x015D
     f26:	90 91 5e 01 	lds	r25, 0x015E
     f2a:	c8 17       	cp	r28, r24
     f2c:	d9 07       	cpc	r29, r25
     f2e:	20 f4       	brcc	.+8      	; 0xf38 <prvAddCurrentTaskToDelayedList+0x7e>
			{
				xNextTaskUnblockTime = xTimeToWake;
     f30:	d0 93 5e 01 	sts	0x015E, r29
     f34:	c0 93 5d 01 	sts	0x015D, r28

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
     f38:	df 91       	pop	r29
     f3a:	cf 91       	pop	r28
     f3c:	1f 91       	pop	r17
     f3e:	0f 91       	pop	r16
     f40:	08 95       	ret

00000f42 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
     f42:	6f 92       	push	r6
     f44:	7f 92       	push	r7
     f46:	8f 92       	push	r8
     f48:	9f 92       	push	r9
     f4a:	af 92       	push	r10
     f4c:	bf 92       	push	r11
     f4e:	cf 92       	push	r12
     f50:	df 92       	push	r13
     f52:	ef 92       	push	r14
     f54:	ff 92       	push	r15
     f56:	0f 93       	push	r16
     f58:	1f 93       	push	r17
     f5a:	cf 93       	push	r28
     f5c:	df 93       	push	r29
     f5e:	5b 01       	movw	r10, r22
     f60:	6c 01       	movw	r12, r24
     f62:	39 01       	movw	r6, r18
     f64:	4a 01       	movw	r8, r20
     f66:	e8 01       	movw	r28, r16
	BaseType_t xReturn;

		taskENTER_CRITICAL();
     f68:	0f b6       	in	r0, 0x3f	; 63
     f6a:	f8 94       	cli
     f6c:	0f 92       	push	r0
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
     f6e:	e0 91 56 01 	lds	r30, 0x0156
     f72:	f0 91 57 01 	lds	r31, 0x0157
     f76:	85 a1       	ldd	r24, Z+37	; 0x25
     f78:	82 30       	cpi	r24, 0x02	; 2
     f7a:	19 f1       	breq	.+70     	; 0xfc2 <xTaskNotifyWait+0x80>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
     f7c:	e0 91 56 01 	lds	r30, 0x0156
     f80:	f0 91 57 01 	lds	r31, 0x0157
     f84:	81 a1       	ldd	r24, Z+33	; 0x21
     f86:	92 a1       	ldd	r25, Z+34	; 0x22
     f88:	a3 a1       	ldd	r26, Z+35	; 0x23
     f8a:	b4 a1       	ldd	r27, Z+36	; 0x24
     f8c:	a0 94       	com	r10
     f8e:	b0 94       	com	r11
     f90:	c0 94       	com	r12
     f92:	d0 94       	com	r13
     f94:	8a 21       	and	r24, r10
     f96:	9b 21       	and	r25, r11
     f98:	ac 21       	and	r26, r12
     f9a:	bd 21       	and	r27, r13
     f9c:	81 a3       	std	Z+33, r24	; 0x21
     f9e:	92 a3       	std	Z+34, r25	; 0x22
     fa0:	a3 a3       	std	Z+35, r26	; 0x23
     fa2:	b4 a3       	std	Z+36, r27	; 0x24

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
     fa4:	e0 91 56 01 	lds	r30, 0x0156
     fa8:	f0 91 57 01 	lds	r31, 0x0157
     fac:	81 e0       	ldi	r24, 0x01	; 1
     fae:	85 a3       	std	Z+37, r24	; 0x25

				if( xTicksToWait > ( TickType_t ) 0 )
     fb0:	e1 14       	cp	r14, r1
     fb2:	f1 04       	cpc	r15, r1
     fb4:	31 f0       	breq	.+12     	; 0xfc2 <xTaskNotifyWait+0x80>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
     fb6:	c7 01       	movw	r24, r14
     fb8:	61 e0       	ldi	r22, 0x01	; 1
     fba:	0e 94 5d 07 	call	0xeba	; 0xeba <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
     fbe:	0e 94 3d 12 	call	0x247a	; 0x247a <vPortYield>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
     fc2:	0f 90       	pop	r0
     fc4:	0f be       	out	0x3f, r0	; 63

		taskENTER_CRITICAL();
     fc6:	0f b6       	in	r0, 0x3f	; 63
     fc8:	f8 94       	cli
     fca:	0f 92       	push	r0
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
     fcc:	20 97       	sbiw	r28, 0x00	; 0
     fce:	61 f0       	breq	.+24     	; 0xfe8 <xTaskNotifyWait+0xa6>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
     fd0:	e0 91 56 01 	lds	r30, 0x0156
     fd4:	f0 91 57 01 	lds	r31, 0x0157
     fd8:	81 a1       	ldd	r24, Z+33	; 0x21
     fda:	92 a1       	ldd	r25, Z+34	; 0x22
     fdc:	a3 a1       	ldd	r26, Z+35	; 0x23
     fde:	b4 a1       	ldd	r27, Z+36	; 0x24
     fe0:	88 83       	st	Y, r24
     fe2:	99 83       	std	Y+1, r25	; 0x01
     fe4:	aa 83       	std	Y+2, r26	; 0x02
     fe6:	bb 83       	std	Y+3, r27	; 0x03

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState == taskWAITING_NOTIFICATION )
     fe8:	e0 91 56 01 	lds	r30, 0x0156
     fec:	f0 91 57 01 	lds	r31, 0x0157
     ff0:	85 a1       	ldd	r24, Z+37	; 0x25
     ff2:	81 30       	cpi	r24, 0x01	; 1
     ff4:	11 f4       	brne	.+4      	; 0xffa <xTaskNotifyWait+0xb8>
     ff6:	80 e0       	ldi	r24, 0x00	; 0
     ff8:	15 c0       	rjmp	.+42     	; 0x1024 <xTaskNotifyWait+0xe2>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
     ffa:	e0 91 56 01 	lds	r30, 0x0156
     ffe:	f0 91 57 01 	lds	r31, 0x0157
    1002:	81 a1       	ldd	r24, Z+33	; 0x21
    1004:	92 a1       	ldd	r25, Z+34	; 0x22
    1006:	a3 a1       	ldd	r26, Z+35	; 0x23
    1008:	b4 a1       	ldd	r27, Z+36	; 0x24
    100a:	60 94       	com	r6
    100c:	70 94       	com	r7
    100e:	80 94       	com	r8
    1010:	90 94       	com	r9
    1012:	86 21       	and	r24, r6
    1014:	97 21       	and	r25, r7
    1016:	a8 21       	and	r26, r8
    1018:	b9 21       	and	r27, r9
    101a:	81 a3       	std	Z+33, r24	; 0x21
    101c:	92 a3       	std	Z+34, r25	; 0x22
    101e:	a3 a3       	std	Z+35, r26	; 0x23
    1020:	b4 a3       	std	Z+36, r27	; 0x24
    1022:	81 e0       	ldi	r24, 0x01	; 1
				xReturn = pdTRUE;
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    1024:	e0 91 56 01 	lds	r30, 0x0156
    1028:	f0 91 57 01 	lds	r31, 0x0157
    102c:	15 a2       	std	Z+37, r1	; 0x25
		}
		taskEXIT_CRITICAL();
    102e:	0f 90       	pop	r0
    1030:	0f be       	out	0x3f, r0	; 63

		return xReturn;
	}
    1032:	df 91       	pop	r29
    1034:	cf 91       	pop	r28
    1036:	1f 91       	pop	r17
    1038:	0f 91       	pop	r16
    103a:	ff 90       	pop	r15
    103c:	ef 90       	pop	r14
    103e:	df 90       	pop	r13
    1040:	cf 90       	pop	r12
    1042:	bf 90       	pop	r11
    1044:	af 90       	pop	r10
    1046:	9f 90       	pop	r9
    1048:	8f 90       	pop	r8
    104a:	7f 90       	pop	r7
    104c:	6f 90       	pop	r6
    104e:	08 95       	ret

00001050 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
    1050:	1f 93       	push	r17
    1052:	18 2f       	mov	r17, r24
	uint32_t ulReturn;

		taskENTER_CRITICAL();
    1054:	0f b6       	in	r0, 0x3f	; 63
    1056:	f8 94       	cli
    1058:	0f 92       	push	r0
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
    105a:	e0 91 56 01 	lds	r30, 0x0156
    105e:	f0 91 57 01 	lds	r31, 0x0157
    1062:	81 a1       	ldd	r24, Z+33	; 0x21
    1064:	92 a1       	ldd	r25, Z+34	; 0x22
    1066:	a3 a1       	ldd	r26, Z+35	; 0x23
    1068:	b4 a1       	ldd	r27, Z+36	; 0x24
    106a:	00 97       	sbiw	r24, 0x00	; 0
    106c:	a1 05       	cpc	r26, r1
    106e:	b1 05       	cpc	r27, r1
    1070:	79 f4       	brne	.+30     	; 0x1090 <ulTaskNotifyTake+0x40>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
    1072:	e0 91 56 01 	lds	r30, 0x0156
    1076:	f0 91 57 01 	lds	r31, 0x0157
    107a:	81 e0       	ldi	r24, 0x01	; 1
    107c:	85 a3       	std	Z+37, r24	; 0x25

				if( xTicksToWait > ( TickType_t ) 0 )
    107e:	61 15       	cp	r22, r1
    1080:	71 05       	cpc	r23, r1
    1082:	31 f0       	breq	.+12     	; 0x1090 <ulTaskNotifyTake+0x40>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    1084:	cb 01       	movw	r24, r22
    1086:	61 e0       	ldi	r22, 0x01	; 1
    1088:	0e 94 5d 07 	call	0xeba	; 0xeba <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
    108c:	0e 94 3d 12 	call	0x247a	; 0x247a <vPortYield>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
    1090:	0f 90       	pop	r0
    1092:	0f be       	out	0x3f, r0	; 63

		taskENTER_CRITICAL();
    1094:	0f b6       	in	r0, 0x3f	; 63
    1096:	f8 94       	cli
    1098:	0f 92       	push	r0
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
    109a:	e0 91 56 01 	lds	r30, 0x0156
    109e:	f0 91 57 01 	lds	r31, 0x0157
    10a2:	21 a1       	ldd	r18, Z+33	; 0x21
    10a4:	32 a1       	ldd	r19, Z+34	; 0x22
    10a6:	43 a1       	ldd	r20, Z+35	; 0x23
    10a8:	54 a1       	ldd	r21, Z+36	; 0x24

			if( ulReturn != 0UL )
    10aa:	21 15       	cp	r18, r1
    10ac:	31 05       	cpc	r19, r1
    10ae:	41 05       	cpc	r20, r1
    10b0:	51 05       	cpc	r21, r1
    10b2:	d9 f0       	breq	.+54     	; 0x10ea <ulTaskNotifyTake+0x9a>
			{
				if( xClearCountOnExit != pdFALSE )
    10b4:	11 23       	and	r17, r17
    10b6:	49 f0       	breq	.+18     	; 0x10ca <ulTaskNotifyTake+0x7a>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
    10b8:	e0 91 56 01 	lds	r30, 0x0156
    10bc:	f0 91 57 01 	lds	r31, 0x0157
    10c0:	11 a2       	std	Z+33, r1	; 0x21
    10c2:	12 a2       	std	Z+34, r1	; 0x22
    10c4:	13 a2       	std	Z+35, r1	; 0x23
    10c6:	14 a2       	std	Z+36, r1	; 0x24
    10c8:	10 c0       	rjmp	.+32     	; 0x10ea <ulTaskNotifyTake+0x9a>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - 1;
    10ca:	e0 91 56 01 	lds	r30, 0x0156
    10ce:	f0 91 57 01 	lds	r31, 0x0157
    10d2:	21 50       	subi	r18, 0x01	; 1
    10d4:	30 40       	sbci	r19, 0x00	; 0
    10d6:	40 40       	sbci	r20, 0x00	; 0
    10d8:	50 40       	sbci	r21, 0x00	; 0
    10da:	21 a3       	std	Z+33, r18	; 0x21
    10dc:	32 a3       	std	Z+34, r19	; 0x22
    10de:	43 a3       	std	Z+35, r20	; 0x23
    10e0:	54 a3       	std	Z+36, r21	; 0x24
    10e2:	2f 5f       	subi	r18, 0xFF	; 255
    10e4:	3f 4f       	sbci	r19, 0xFF	; 255
    10e6:	4f 4f       	sbci	r20, 0xFF	; 255
    10e8:	5f 4f       	sbci	r21, 0xFF	; 255
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    10ea:	e0 91 56 01 	lds	r30, 0x0156
    10ee:	f0 91 57 01 	lds	r31, 0x0157
    10f2:	15 a2       	std	Z+37, r1	; 0x25
		}
		taskEXIT_CRITICAL();
    10f4:	0f 90       	pop	r0
    10f6:	0f be       	out	0x3f, r0	; 63

		return ulReturn;
	}
    10f8:	b9 01       	movw	r22, r18
    10fa:	ca 01       	movw	r24, r20
    10fc:	1f 91       	pop	r17
    10fe:	08 95       	ret

00001100 <vTaskPlaceOnUnorderedEventList>:
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
}
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
    1100:	0f 93       	push	r16
    1102:	1f 93       	push	r17
    1104:	8a 01       	movw	r16, r20
	configASSERT( uxSchedulerSuspended != 0 );

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
    1106:	e0 91 56 01 	lds	r30, 0x0156
    110a:	f0 91 57 01 	lds	r31, 0x0157
    110e:	70 68       	ori	r23, 0x80	; 128
    1110:	75 87       	std	Z+13, r23	; 0x0d
    1112:	64 87       	std	Z+12, r22	; 0x0c
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    1114:	60 91 56 01 	lds	r22, 0x0156
    1118:	70 91 57 01 	lds	r23, 0x0157
    111c:	64 5f       	subi	r22, 0xF4	; 244
    111e:	7f 4f       	sbci	r23, 0xFF	; 255
    1120:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    1124:	c8 01       	movw	r24, r16
    1126:	61 e0       	ldi	r22, 0x01	; 1
    1128:	0e 94 5d 07 	call	0xeba	; 0xeba <prvAddCurrentTaskToDelayedList>
}
    112c:	1f 91       	pop	r17
    112e:	0f 91       	pop	r16
    1130:	08 95       	ret

00001132 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
    1132:	9c 01       	movw	r18, r24
	BaseType_t xAlreadyYielded = pdFALSE;

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
    1134:	00 97       	sbiw	r24, 0x00	; 0
    1136:	69 f0       	breq	.+26     	; 0x1152 <vTaskDelay+0x20>
{
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
    1138:	80 91 58 01 	lds	r24, 0x0158
    113c:	8f 5f       	subi	r24, 0xFF	; 255
    113e:	80 93 58 01 	sts	0x0158, r24
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
    1142:	c9 01       	movw	r24, r18
    1144:	60 e0       	ldi	r22, 0x00	; 0
    1146:	0e 94 5d 07 	call	0xeba	; 0xeba <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
    114a:	0e 94 d4 06 	call	0xda8	; 0xda8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    114e:	88 23       	and	r24, r24
    1150:	11 f4       	brne	.+4      	; 0x1156 <vTaskDelay+0x24>
		{
			portYIELD_WITHIN_API();
    1152:	0e 94 3d 12 	call	0x247a	; 0x247a <vPortYield>
    1156:	08 95       	ret

00001158 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
    1158:	fc 01       	movw	r30, r24
{
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
    115a:	80 91 58 01 	lds	r24, 0x0158
    115e:	8f 5f       	subi	r24, 0xFF	; 255
    1160:	80 93 58 01 	sts	0x0158, r24

		vTaskSuspendAll();
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
    1164:	40 91 5b 01 	lds	r20, 0x015B
    1168:	50 91 5c 01 	lds	r21, 0x015C

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
    116c:	20 81       	ld	r18, Z
    116e:	31 81       	ldd	r19, Z+1	; 0x01
    1170:	62 0f       	add	r22, r18
    1172:	73 1f       	adc	r23, r19

			if( xConstTickCount < *pxPreviousWakeTime )
    1174:	42 17       	cp	r20, r18
    1176:	53 07       	cpc	r21, r19
    1178:	28 f4       	brcc	.+10     	; 0x1184 <vTaskDelayUntil+0x2c>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
    117a:	62 17       	cp	r22, r18
    117c:	73 07       	cpc	r23, r19
    117e:	28 f0       	brcs	.+10     	; 0x118a <vTaskDelayUntil+0x32>
    1180:	80 e0       	ldi	r24, 0x00	; 0
    1182:	08 c0       	rjmp	.+16     	; 0x1194 <vTaskDelayUntil+0x3c>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
    1184:	62 17       	cp	r22, r18
    1186:	73 07       	cpc	r23, r19
    1188:	20 f0       	brcs	.+8      	; 0x1192 <vTaskDelayUntil+0x3a>
    118a:	80 e0       	ldi	r24, 0x00	; 0
    118c:	46 17       	cp	r20, r22
    118e:	57 07       	cpc	r21, r23
    1190:	08 f4       	brcc	.+2      	; 0x1194 <vTaskDelayUntil+0x3c>
    1192:	81 e0       	ldi	r24, 0x01	; 1
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
    1194:	71 83       	std	Z+1, r23	; 0x01
    1196:	60 83       	st	Z, r22

			if( xShouldDelay != pdFALSE )
    1198:	88 23       	and	r24, r24
    119a:	31 f0       	breq	.+12     	; 0x11a8 <vTaskDelayUntil+0x50>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
    119c:	cb 01       	movw	r24, r22
    119e:	84 1b       	sub	r24, r20
    11a0:	95 0b       	sbc	r25, r21
    11a2:	60 e0       	ldi	r22, 0x00	; 0
    11a4:	0e 94 5d 07 	call	0xeba	; 0xeba <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
    11a8:	0e 94 d4 06 	call	0xda8	; 0xda8 <xTaskResumeAll>

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    11ac:	88 23       	and	r24, r24
    11ae:	11 f4       	brne	.+4      	; 0x11b4 <vTaskDelayUntil+0x5c>
		{
			portYIELD_WITHIN_API();
    11b0:	0e 94 3d 12 	call	0x247a	; 0x247a <vPortYield>
    11b4:	08 95       	ret

000011b6 <vTaskPlaceOnEventList>:
	}
}
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
    11b6:	0f 93       	push	r16
    11b8:	1f 93       	push	r17
    11ba:	8b 01       	movw	r16, r22

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    11bc:	60 91 56 01 	lds	r22, 0x0156
    11c0:	70 91 57 01 	lds	r23, 0x0157
    11c4:	64 5f       	subi	r22, 0xF4	; 244
    11c6:	7f 4f       	sbci	r23, 0xFF	; 255
    11c8:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    11cc:	c8 01       	movw	r24, r16
    11ce:	61 e0       	ldi	r22, 0x01	; 1
    11d0:	0e 94 5d 07 	call	0xeba	; 0xeba <prvAddCurrentTaskToDelayedList>
}
    11d4:	1f 91       	pop	r17
    11d6:	0f 91       	pop	r16
    11d8:	08 95       	ret

000011da <vTaskEndScheduler>:
void vTaskEndScheduler( void )
{
	/* Stop the scheduler interrupts and call the portable scheduler end
	routine so the original ISRs can be restored if necessary.  The port
	layer must ensure interrupts enable	bit is left in the correct state. */
	portDISABLE_INTERRUPTS();
    11da:	f8 94       	cli
	xSchedulerRunning = pdFALSE;
    11dc:	10 92 62 01 	sts	0x0162, r1
	vPortEndScheduler();
    11e0:	0e 94 dc 11 	call	0x23b8	; 0x23b8 <vPortEndScheduler>
}
    11e4:	08 95       	ret

000011e6 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
    11e6:	0f 93       	push	r16
    11e8:	1f 93       	push	r17
    11ea:	2c c0       	rjmp	.+88     	; 0x1244 <prvIdleTask+0x5e>
{
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
    11ec:	80 91 58 01 	lds	r24, 0x0158
    11f0:	8f 5f       	subi	r24, 0xFF	; 255
    11f2:	80 93 58 01 	sts	0x0158, r24
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
		{
			vTaskSuspendAll();
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    11f6:	10 91 aa 01 	lds	r17, 0x01AA
			}
			( void ) xTaskResumeAll();
    11fa:	0e 94 d4 06 	call	0xda8	; 0xda8 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
    11fe:	11 23       	and	r17, r17
    1200:	09 f1       	breq	.+66     	; 0x1244 <prvIdleTask+0x5e>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
    1202:	0f b6       	in	r0, 0x3f	; 63
    1204:	f8 94       	cli
    1206:	0f 92       	push	r0
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
    1208:	e0 91 af 01 	lds	r30, 0x01AF
    120c:	f0 91 b0 01 	lds	r31, 0x01B0
    1210:	06 81       	ldd	r16, Z+6	; 0x06
    1212:	17 81       	ldd	r17, Z+7	; 0x07
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    1214:	c8 01       	movw	r24, r16
    1216:	02 96       	adiw	r24, 0x02	; 2
    1218:	0e 94 2f 0f 	call	0x1e5e	; 0x1e5e <uxListRemove>
					--uxCurrentNumberOfTasks;
    121c:	80 91 61 01 	lds	r24, 0x0161
    1220:	81 50       	subi	r24, 0x01	; 1
    1222:	80 93 61 01 	sts	0x0161, r24
					--uxDeletedTasksWaitingCleanUp;
    1226:	80 91 65 01 	lds	r24, 0x0165
    122a:	81 50       	subi	r24, 0x01	; 1
    122c:	80 93 65 01 	sts	0x0165, r24
				}
				taskEXIT_CRITICAL();
    1230:	0f 90       	pop	r0
    1232:	0f be       	out	0x3f, r0	; 63

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
    1234:	f8 01       	movw	r30, r16
    1236:	87 89       	ldd	r24, Z+23	; 0x17
    1238:	90 8d       	ldd	r25, Z+24	; 0x18
    123a:	0e 94 18 11 	call	0x2230	; 0x2230 <vPortFree>
			vPortFree( pxTCB );
    123e:	c8 01       	movw	r24, r16
    1240:	0e 94 18 11 	call	0x2230	; 0x2230 <vPortFree>
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
    1244:	80 91 65 01 	lds	r24, 0x0165
    1248:	88 23       	and	r24, r24
    124a:	81 f6       	brne	.-96     	; 0x11ec <prvIdleTask+0x6>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
    124c:	80 91 67 01 	lds	r24, 0x0167
    1250:	82 30       	cpi	r24, 0x02	; 2
    1252:	10 f0       	brcs	.+4      	; 0x1258 <prvIdleTask+0x72>
			{
				taskYIELD();
    1254:	0e 94 3d 12 	call	0x247a	; 0x247a <vPortYield>
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
    1258:	0e 94 53 00 	call	0xa6	; 0xa6 <vApplicationIdleHook>
    125c:	f3 cf       	rjmp	.-26     	; 0x1244 <prvIdleTask+0x5e>

0000125e <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
    125e:	0f 93       	push	r16
    1260:	1f 93       	push	r17
    1262:	cf 93       	push	r28
    1264:	df 93       	push	r29
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
    1266:	0f b6       	in	r0, 0x3f	; 63
    1268:	f8 94       	cli
    126a:	0f 92       	push	r0
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
    126c:	00 97       	sbiw	r24, 0x00	; 0
    126e:	29 f4       	brne	.+10     	; 0x127a <vTaskDelete+0x1c>
    1270:	c0 91 56 01 	lds	r28, 0x0156
    1274:	d0 91 57 01 	lds	r29, 0x0157
    1278:	01 c0       	rjmp	.+2      	; 0x127c <vTaskDelete+0x1e>
    127a:	ec 01       	movw	r28, r24

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    127c:	8e 01       	movw	r16, r28
    127e:	0e 5f       	subi	r16, 0xFE	; 254
    1280:	1f 4f       	sbci	r17, 0xFF	; 255
    1282:	c8 01       	movw	r24, r16
    1284:	0e 94 2f 0f 	call	0x1e5e	; 0x1e5e <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    1288:	8c 89       	ldd	r24, Y+20	; 0x14
    128a:	9d 89       	ldd	r25, Y+21	; 0x15
    128c:	89 2b       	or	r24, r25
    128e:	21 f0       	breq	.+8      	; 0x1298 <vTaskDelete+0x3a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    1290:	ce 01       	movw	r24, r28
    1292:	0c 96       	adiw	r24, 0x0c	; 12
    1294:	0e 94 2f 0f 	call	0x1e5e	; 0x1e5e <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
    1298:	80 91 66 01 	lds	r24, 0x0166
    129c:	8f 5f       	subi	r24, 0xFF	; 255
    129e:	80 93 66 01 	sts	0x0166, r24

			if( pxTCB == pxCurrentTCB )
    12a2:	80 91 56 01 	lds	r24, 0x0156
    12a6:	90 91 57 01 	lds	r25, 0x0157
    12aa:	c8 17       	cp	r28, r24
    12ac:	d9 07       	cpc	r29, r25
    12ae:	59 f4       	brne	.+22     	; 0x12c6 <vTaskDelete+0x68>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
    12b0:	8a ea       	ldi	r24, 0xAA	; 170
    12b2:	91 e0       	ldi	r25, 0x01	; 1
    12b4:	b8 01       	movw	r22, r16
    12b6:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
    12ba:	80 91 65 01 	lds	r24, 0x0165
    12be:	8f 5f       	subi	r24, 0xFF	; 255
    12c0:	80 93 65 01 	sts	0x0165, r24
    12c4:	26 c0       	rjmp	.+76     	; 0x1312 <vTaskDelete+0xb4>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
    12c6:	80 91 61 01 	lds	r24, 0x0161
    12ca:	81 50       	subi	r24, 0x01	; 1
    12cc:	80 93 61 01 	sts	0x0161, r24

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
    12d0:	8f 89       	ldd	r24, Y+23	; 0x17
    12d2:	98 8d       	ldd	r25, Y+24	; 0x18
    12d4:	0e 94 18 11 	call	0x2230	; 0x2230 <vPortFree>
			vPortFree( pxTCB );
    12d8:	ce 01       	movw	r24, r28
    12da:	0e 94 18 11 	call	0x2230	; 0x2230 <vPortFree>

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    12de:	e0 91 9d 01 	lds	r30, 0x019D
    12e2:	f0 91 9e 01 	lds	r31, 0x019E
    12e6:	80 81       	ld	r24, Z
    12e8:	88 23       	and	r24, r24
    12ea:	19 f4       	brne	.+6      	; 0x12f2 <vTaskDelete+0x94>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
    12ec:	8f ef       	ldi	r24, 0xFF	; 255
    12ee:	9f ef       	ldi	r25, 0xFF	; 255
    12f0:	0c c0       	rjmp	.+24     	; 0x130a <vTaskDelete+0xac>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    12f2:	e0 91 9d 01 	lds	r30, 0x019D
    12f6:	f0 91 9e 01 	lds	r31, 0x019E
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
    12fa:	05 80       	ldd	r0, Z+5	; 0x05
    12fc:	f6 81       	ldd	r31, Z+6	; 0x06
    12fe:	e0 2d       	mov	r30, r0
    1300:	06 80       	ldd	r0, Z+6	; 0x06
    1302:	f7 81       	ldd	r31, Z+7	; 0x07
    1304:	e0 2d       	mov	r30, r0
    1306:	82 81       	ldd	r24, Z+2	; 0x02
    1308:	93 81       	ldd	r25, Z+3	; 0x03
    130a:	90 93 5e 01 	sts	0x015E, r25
    130e:	80 93 5d 01 	sts	0x015D, r24
				prvResetNextTaskUnblockTime();
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
    1312:	0f 90       	pop	r0
    1314:	0f be       	out	0x3f, r0	; 63

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
    1316:	80 91 62 01 	lds	r24, 0x0162
    131a:	88 23       	and	r24, r24
    131c:	49 f0       	breq	.+18     	; 0x1330 <vTaskDelete+0xd2>
		{
			if( pxTCB == pxCurrentTCB )
    131e:	80 91 56 01 	lds	r24, 0x0156
    1322:	90 91 57 01 	lds	r25, 0x0157
    1326:	c8 17       	cp	r28, r24
    1328:	d9 07       	cpc	r29, r25
    132a:	11 f4       	brne	.+4      	; 0x1330 <vTaskDelete+0xd2>
			{
				configASSERT( uxSchedulerSuspended == 0 );
				portYIELD_WITHIN_API();
    132c:	0e 94 3d 12 	call	0x247a	; 0x247a <vPortYield>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
    1330:	df 91       	pop	r29
    1332:	cf 91       	pop	r28
    1334:	1f 91       	pop	r17
    1336:	0f 91       	pop	r16
    1338:	08 95       	ret

0000133a <xTaskCreate>:
							const char * const pcName,
							const uint16_t usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
    133a:	4f 92       	push	r4
    133c:	5f 92       	push	r5
    133e:	6f 92       	push	r6
    1340:	7f 92       	push	r7
    1342:	8f 92       	push	r8
    1344:	9f 92       	push	r9
    1346:	af 92       	push	r10
    1348:	bf 92       	push	r11
    134a:	cf 92       	push	r12
    134c:	df 92       	push	r13
    134e:	ef 92       	push	r14
    1350:	ff 92       	push	r15
    1352:	0f 93       	push	r16
    1354:	1f 93       	push	r17
    1356:	cf 93       	push	r28
    1358:	df 93       	push	r29
    135a:	2c 01       	movw	r4, r24
    135c:	16 2f       	mov	r17, r22
    135e:	97 2e       	mov	r9, r23
    1360:	6a 01       	movw	r12, r20
    1362:	39 01       	movw	r6, r18
    1364:	57 01       	movw	r10, r14
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    1366:	ca 01       	movw	r24, r20
    1368:	0e 94 28 11 	call	0x2250	; 0x2250 <pvPortMalloc>
    136c:	7c 01       	movw	r14, r24

			if( pxStack != NULL )
    136e:	00 97       	sbiw	r24, 0x00	; 0
    1370:	99 f0       	breq	.+38     	; 0x1398 <xTaskCreate+0x5e>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
    1372:	86 e2       	ldi	r24, 0x26	; 38
    1374:	90 e0       	ldi	r25, 0x00	; 0
    1376:	0e 94 28 11 	call	0x2250	; 0x2250 <pvPortMalloc>
    137a:	ec 01       	movw	r28, r24

				if( pxNewTCB != NULL )
    137c:	00 97       	sbiw	r24, 0x00	; 0
    137e:	49 f0       	breq	.+18     	; 0x1392 <xTaskCreate+0x58>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
    1380:	f8 8e       	std	Y+24, r15	; 0x18
    1382:	ef 8a       	std	Y+23, r14	; 0x17
    1384:	81 2f       	mov	r24, r17
    1386:	99 2d       	mov	r25, r9
    1388:	9c 01       	movw	r18, r24
    138a:	f9 01       	movw	r30, r18
    138c:	de 01       	movw	r26, r28
    138e:	90 e0       	ldi	r25, 0x00	; 0
    1390:	05 c0       	rjmp	.+10     	; 0x139c <xTaskCreate+0x62>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
    1392:	c7 01       	movw	r24, r14
    1394:	0e 94 18 11 	call	0x2230	; 0x2230 <vPortFree>
    1398:	8f ef       	ldi	r24, 0xFF	; 255
    139a:	b7 c0       	rjmp	.+366    	; 0x150a <xTaskCreate+0x1d0>
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
    139c:	80 81       	ld	r24, Z
    139e:	59 96       	adiw	r26, 0x19	; 25
    13a0:	8c 93       	st	X, r24
    13a2:	59 97       	sbiw	r26, 0x19	; 25

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
    13a4:	80 81       	ld	r24, Z
    13a6:	88 23       	and	r24, r24
    13a8:	29 f0       	breq	.+10     	; 0x13b4 <xTaskCreate+0x7a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    13aa:	9f 5f       	subi	r25, 0xFF	; 255
    13ac:	31 96       	adiw	r30, 0x01	; 1
    13ae:	11 96       	adiw	r26, 0x01	; 1
    13b0:	98 30       	cpi	r25, 0x08	; 8
    13b2:	a1 f7       	brne	.-24     	; 0x139c <xTaskCreate+0x62>
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
    13b4:	18 a2       	std	Y+32, r1	; 0x20
    13b6:	04 30       	cpi	r16, 0x04	; 4
    13b8:	08 f0       	brcs	.+2      	; 0x13bc <xTaskCreate+0x82>
    13ba:	03 e0       	ldi	r16, 0x03	; 3
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
    13bc:	0e 8b       	std	Y+22, r16	; 0x16
		pxNewTCB->uxBasePriority = uxPriority;
		pxNewTCB->uxMutexesHeld = 0;
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
    13be:	72 e0       	ldi	r23, 0x02	; 2
    13c0:	87 2e       	mov	r8, r23
    13c2:	91 2c       	mov	r9, r1
    13c4:	8c 0e       	add	r8, r28
    13c6:	9d 1e       	adc	r9, r29
    13c8:	c4 01       	movw	r24, r8
    13ca:	0e 94 da 0e 	call	0x1db4	; 0x1db4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
    13ce:	ce 01       	movw	r24, r28
    13d0:	0c 96       	adiw	r24, 0x0c	; 12
    13d2:	0e 94 da 0e 	call	0x1db4	; 0x1db4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
    13d6:	d9 87       	std	Y+9, r29	; 0x09
    13d8:	c8 87       	std	Y+8, r28	; 0x08

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    13da:	84 e0       	ldi	r24, 0x04	; 4
    13dc:	90 e0       	ldi	r25, 0x00	; 0
    13de:	80 1b       	sub	r24, r16
    13e0:	91 09       	sbc	r25, r1
    13e2:	9d 87       	std	Y+13, r25	; 0x0d
    13e4:	8c 87       	std	Y+12, r24	; 0x0c
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
    13e6:	db 8b       	std	Y+19, r29	; 0x13
    13e8:	ca 8b       	std	Y+18, r28	; 0x12
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
    13ea:	19 a2       	std	Y+33, r1	; 0x21
    13ec:	1a a2       	std	Y+34, r1	; 0x22
    13ee:	1b a2       	std	Y+35, r1	; 0x23
    13f0:	1c a2       	std	Y+36, r1	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    13f2:	1d a2       	std	Y+37, r1	; 0x25
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    13f4:	08 94       	sec
    13f6:	c1 08       	sbc	r12, r1
    13f8:	d1 08       	sbc	r13, r1
    13fa:	c7 01       	movw	r24, r14
    13fc:	8c 0d       	add	r24, r12
    13fe:	9d 1d       	adc	r25, r13
    1400:	b2 01       	movw	r22, r4
    1402:	a3 01       	movw	r20, r6
    1404:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <pxPortInitialiseStack>
    1408:	99 83       	std	Y+1, r25	; 0x01
    140a:	88 83       	st	Y, r24
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
    140c:	a1 14       	cp	r10, r1
    140e:	b1 04       	cpc	r11, r1
    1410:	19 f0       	breq	.+6      	; 0x1418 <xTaskCreate+0xde>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
    1412:	f5 01       	movw	r30, r10
    1414:	d1 83       	std	Z+1, r29	; 0x01
    1416:	c0 83       	st	Z, r28

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
    1418:	0f b6       	in	r0, 0x3f	; 63
    141a:	f8 94       	cli
    141c:	0f 92       	push	r0
	{
		uxCurrentNumberOfTasks++;
    141e:	80 91 61 01 	lds	r24, 0x0161
    1422:	8f 5f       	subi	r24, 0xFF	; 255
    1424:	80 93 61 01 	sts	0x0161, r24
		if( pxCurrentTCB == NULL )
    1428:	80 91 56 01 	lds	r24, 0x0156
    142c:	90 91 57 01 	lds	r25, 0x0157
    1430:	89 2b       	or	r24, r25
    1432:	a9 f5       	brne	.+106    	; 0x149e <xTaskCreate+0x164>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
    1434:	d0 93 57 01 	sts	0x0157, r29
    1438:	c0 93 56 01 	sts	0x0156, r28

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
    143c:	80 91 61 01 	lds	r24, 0x0161
    1440:	81 30       	cpi	r24, 0x01	; 1
    1442:	e9 f5       	brne	.+122    	; 0x14be <xTaskCreate+0x184>
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
    1444:	87 e6       	ldi	r24, 0x67	; 103
    1446:	91 e0       	ldi	r25, 0x01	; 1
    1448:	0e 94 ca 0e 	call	0x1d94	; 0x1d94 <vListInitialise>
    144c:	80 e7       	ldi	r24, 0x70	; 112
    144e:	91 e0       	ldi	r25, 0x01	; 1
    1450:	0e 94 ca 0e 	call	0x1d94	; 0x1d94 <vListInitialise>
    1454:	89 e7       	ldi	r24, 0x79	; 121
    1456:	91 e0       	ldi	r25, 0x01	; 1
    1458:	0e 94 ca 0e 	call	0x1d94	; 0x1d94 <vListInitialise>
    145c:	82 e8       	ldi	r24, 0x82	; 130
    145e:	91 e0       	ldi	r25, 0x01	; 1
    1460:	0e 94 ca 0e 	call	0x1d94	; 0x1d94 <vListInitialise>
	}

	vListInitialise( &xDelayedTaskList1 );
    1464:	6b e8       	ldi	r22, 0x8B	; 139
    1466:	e6 2e       	mov	r14, r22
    1468:	61 e0       	ldi	r22, 0x01	; 1
    146a:	f6 2e       	mov	r15, r22
    146c:	c7 01       	movw	r24, r14
    146e:	0e 94 ca 0e 	call	0x1d94	; 0x1d94 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
    1472:	04 e9       	ldi	r16, 0x94	; 148
    1474:	11 e0       	ldi	r17, 0x01	; 1
    1476:	c8 01       	movw	r24, r16
    1478:	0e 94 ca 0e 	call	0x1d94	; 0x1d94 <vListInitialise>
	vListInitialise( &xPendingReadyList );
    147c:	81 ea       	ldi	r24, 0xA1	; 161
    147e:	91 e0       	ldi	r25, 0x01	; 1
    1480:	0e 94 ca 0e 	call	0x1d94	; 0x1d94 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
    1484:	8a ea       	ldi	r24, 0xAA	; 170
    1486:	91 e0       	ldi	r25, 0x01	; 1
    1488:	0e 94 ca 0e 	call	0x1d94	; 0x1d94 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
    148c:	f0 92 9e 01 	sts	0x019E, r15
    1490:	e0 92 9d 01 	sts	0x019D, r14
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    1494:	10 93 a0 01 	sts	0x01A0, r17
    1498:	00 93 9f 01 	sts	0x019F, r16
    149c:	10 c0       	rjmp	.+32     	; 0x14be <xTaskCreate+0x184>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
    149e:	80 91 62 01 	lds	r24, 0x0162
    14a2:	88 23       	and	r24, r24
    14a4:	61 f4       	brne	.+24     	; 0x14be <xTaskCreate+0x184>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
    14a6:	e0 91 56 01 	lds	r30, 0x0156
    14aa:	f0 91 57 01 	lds	r31, 0x0157
    14ae:	96 89       	ldd	r25, Z+22	; 0x16
    14b0:	8e 89       	ldd	r24, Y+22	; 0x16
    14b2:	89 17       	cp	r24, r25
    14b4:	20 f0       	brcs	.+8      	; 0x14be <xTaskCreate+0x184>
				{
					pxCurrentTCB = pxNewTCB;
    14b6:	d0 93 57 01 	sts	0x0157, r29
    14ba:	c0 93 56 01 	sts	0x0156, r28
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
    14be:	80 91 66 01 	lds	r24, 0x0166
    14c2:	8f 5f       	subi	r24, 0xFF	; 255
    14c4:	80 93 66 01 	sts	0x0166, r24
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
    14c8:	9e 89       	ldd	r25, Y+22	; 0x16
    14ca:	80 91 59 01 	lds	r24, 0x0159
    14ce:	89 17       	cp	r24, r25
    14d0:	10 f4       	brcc	.+4      	; 0x14d6 <xTaskCreate+0x19c>
    14d2:	90 93 59 01 	sts	0x0159, r25
    14d6:	89 e0       	ldi	r24, 0x09	; 9
    14d8:	98 9f       	mul	r25, r24
    14da:	c0 01       	movw	r24, r0
    14dc:	11 24       	eor	r1, r1
    14de:	89 59       	subi	r24, 0x99	; 153
    14e0:	9e 4f       	sbci	r25, 0xFE	; 254
    14e2:	b4 01       	movw	r22, r8
    14e4:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
    14e8:	0f 90       	pop	r0
    14ea:	0f be       	out	0x3f, r0	; 63

	if( xSchedulerRunning != pdFALSE )
    14ec:	80 91 62 01 	lds	r24, 0x0162
    14f0:	88 23       	and	r24, r24
    14f2:	51 f0       	breq	.+20     	; 0x1508 <xTaskCreate+0x1ce>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
    14f4:	e0 91 56 01 	lds	r30, 0x0156
    14f8:	f0 91 57 01 	lds	r31, 0x0157
    14fc:	96 89       	ldd	r25, Z+22	; 0x16
    14fe:	8e 89       	ldd	r24, Y+22	; 0x16
    1500:	98 17       	cp	r25, r24
    1502:	10 f4       	brcc	.+4      	; 0x1508 <xTaskCreate+0x1ce>
		{
			taskYIELD_IF_USING_PREEMPTION();
    1504:	0e 94 3d 12 	call	0x247a	; 0x247a <vPortYield>
    1508:	81 e0       	ldi	r24, 0x01	; 1
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
		}

		return xReturn;
	}
    150a:	df 91       	pop	r29
    150c:	cf 91       	pop	r28
    150e:	1f 91       	pop	r17
    1510:	0f 91       	pop	r16
    1512:	ff 90       	pop	r15
    1514:	ef 90       	pop	r14
    1516:	df 90       	pop	r13
    1518:	cf 90       	pop	r12
    151a:	bf 90       	pop	r11
    151c:	af 90       	pop	r10
    151e:	9f 90       	pop	r9
    1520:	8f 90       	pop	r8
    1522:	7f 90       	pop	r7
    1524:	6f 90       	pop	r6
    1526:	5f 90       	pop	r5
    1528:	4f 90       	pop	r4
    152a:	08 95       	ret

0000152c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
    152c:	ef 92       	push	r14
    152e:	ff 92       	push	r15
    1530:	0f 93       	push	r16
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
    1532:	83 ef       	ldi	r24, 0xF3	; 243
    1534:	98 e0       	ldi	r25, 0x08	; 8
    1536:	65 e1       	ldi	r22, 0x15	; 21
    1538:	71 e0       	ldi	r23, 0x01	; 1
    153a:	45 e5       	ldi	r20, 0x55	; 85
    153c:	50 e0       	ldi	r21, 0x00	; 0
    153e:	20 e0       	ldi	r18, 0x00	; 0
    1540:	30 e0       	ldi	r19, 0x00	; 0
    1542:	00 e0       	ldi	r16, 0x00	; 0
    1544:	e3 e6       	ldi	r30, 0x63	; 99
    1546:	ee 2e       	mov	r14, r30
    1548:	e1 e0       	ldi	r30, 0x01	; 1
    154a:	fe 2e       	mov	r15, r30
    154c:	0e 94 9d 09 	call	0x133a	; 0x133a <xTaskCreate>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
    1550:	81 30       	cpi	r24, 0x01	; 1
    1552:	81 f4       	brne	.+32     	; 0x1574 <vTaskStartScheduler+0x48>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
    1554:	f8 94       	cli
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
    1556:	8f ef       	ldi	r24, 0xFF	; 255
    1558:	9f ef       	ldi	r25, 0xFF	; 255
    155a:	90 93 5e 01 	sts	0x015E, r25
    155e:	80 93 5d 01 	sts	0x015D, r24
		xSchedulerRunning = pdTRUE;
    1562:	81 e0       	ldi	r24, 0x01	; 1
    1564:	80 93 62 01 	sts	0x0162, r24
		xTickCount = ( TickType_t ) 0U;
    1568:	10 92 5c 01 	sts	0x015C, r1
    156c:	10 92 5b 01 	sts	0x015B, r1
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
    1570:	0e 94 a2 11 	call	0x2344	; 0x2344 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
    1574:	0f 91       	pop	r16
    1576:	ff 90       	pop	r15
    1578:	ef 90       	pop	r14
    157a:	08 95       	ret

0000157c <uxQueueMessagesWaiting>:
{
UBaseType_t uxReturn;

	configASSERT( xQueue );

	taskENTER_CRITICAL();
    157c:	0f b6       	in	r0, 0x3f	; 63
    157e:	f8 94       	cli
    1580:	0f 92       	push	r0
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
    1582:	fc 01       	movw	r30, r24
    1584:	82 8d       	ldd	r24, Z+26	; 0x1a
	}
	taskEXIT_CRITICAL();
    1586:	0f 90       	pop	r0
    1588:	0f be       	out	0x3f, r0	; 63

	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
    158a:	08 95       	ret

0000158c <uxQueueSpacesAvailable>:
UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
{
UBaseType_t uxReturn;
Queue_t *pxQueue;

	pxQueue = ( Queue_t * ) xQueue;
    158c:	fc 01       	movw	r30, r24
	configASSERT( pxQueue );

	taskENTER_CRITICAL();
    158e:	0f b6       	in	r0, 0x3f	; 63
    1590:	f8 94       	cli
    1592:	0f 92       	push	r0
	{
		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
    1594:	92 8d       	ldd	r25, Z+26	; 0x1a
	}
	taskEXIT_CRITICAL();
    1596:	0f 90       	pop	r0
    1598:	0f be       	out	0x3f, r0	; 63
    159a:	83 8d       	ldd	r24, Z+27	; 0x1b

	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
    159c:	89 1b       	sub	r24, r25
    159e:	08 95       	ret

000015a0 <uxQueueMessagesWaitingFromISR>:
{
UBaseType_t uxReturn;

	configASSERT( xQueue );

	uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
    15a0:	fc 01       	movw	r30, r24
    15a2:	82 8d       	ldd	r24, Z+26	; 0x1a

	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
    15a4:	08 95       	ret

000015a6 <xQueueIsQueueEmptyFromISR>:
BaseType_t xQueueIsQueueEmptyFromISR( const QueueHandle_t xQueue )
{
BaseType_t xReturn;

	configASSERT( xQueue );
	if( ( ( Queue_t * ) xQueue )->uxMessagesWaiting == ( UBaseType_t ) 0 )
    15a6:	fc 01       	movw	r30, r24
    15a8:	82 8d       	ldd	r24, Z+26	; 0x1a
    15aa:	90 e0       	ldi	r25, 0x00	; 0
    15ac:	88 23       	and	r24, r24
    15ae:	09 f4       	brne	.+2      	; 0x15b2 <xQueueIsQueueEmptyFromISR+0xc>
    15b0:	91 e0       	ldi	r25, 0x01	; 1
	{
		xReturn = pdFALSE;
	}

	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
    15b2:	89 2f       	mov	r24, r25
    15b4:	08 95       	ret

000015b6 <xQueueIsQueueFullFromISR>:
BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
{
BaseType_t xReturn;

	configASSERT( xQueue );
	if( ( ( Queue_t * ) xQueue )->uxMessagesWaiting == ( ( Queue_t * ) xQueue )->uxLength )
    15b6:	fc 01       	movw	r30, r24
    15b8:	92 8d       	ldd	r25, Z+26	; 0x1a
    15ba:	20 e0       	ldi	r18, 0x00	; 0
    15bc:	83 8d       	ldd	r24, Z+27	; 0x1b
    15be:	98 17       	cp	r25, r24
    15c0:	09 f4       	brne	.+2      	; 0x15c4 <xQueueIsQueueFullFromISR+0xe>
    15c2:	21 e0       	ldi	r18, 0x01	; 1
	{
		xReturn = pdFALSE;
	}

	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
    15c4:	82 2f       	mov	r24, r18
    15c6:	08 95       	ret

000015c8 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
    15c8:	0f 93       	push	r16
    15ca:	1f 93       	push	r17
    15cc:	cf 93       	push	r28
    15ce:	df 93       	push	r29
    15d0:	ec 01       	movw	r28, r24
    15d2:	04 2f       	mov	r16, r20
BaseType_t xReturn = pdFALSE;
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    15d4:	1a 8d       	ldd	r17, Y+26	; 0x1a

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
    15d6:	4c 8d       	ldd	r20, Y+28	; 0x1c
    15d8:	44 23       	and	r20, r20
    15da:	c1 f1       	breq	.+112    	; 0x164c <prvCopyDataToQueue+0x84>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
    15dc:	00 23       	and	r16, r16
    15de:	b1 f4       	brne	.+44     	; 0x160c <prvCopyDataToQueue+0x44>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
    15e0:	8c 81       	ldd	r24, Y+4	; 0x04
    15e2:	9d 81       	ldd	r25, Y+5	; 0x05
    15e4:	50 e0       	ldi	r21, 0x00	; 0
    15e6:	0e 94 a5 15 	call	0x2b4a	; 0x2b4a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    15ea:	8c 8d       	ldd	r24, Y+28	; 0x1c
    15ec:	2c 81       	ldd	r18, Y+4	; 0x04
    15ee:	3d 81       	ldd	r19, Y+5	; 0x05
    15f0:	28 0f       	add	r18, r24
    15f2:	31 1d       	adc	r19, r1
    15f4:	3d 83       	std	Y+5, r19	; 0x05
    15f6:	2c 83       	std	Y+4, r18	; 0x04
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    15f8:	8a 81       	ldd	r24, Y+2	; 0x02
    15fa:	9b 81       	ldd	r25, Y+3	; 0x03
    15fc:	28 17       	cp	r18, r24
    15fe:	39 07       	cpc	r19, r25
    1600:	28 f1       	brcs	.+74     	; 0x164c <prvCopyDataToQueue+0x84>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
    1602:	88 81       	ld	r24, Y
    1604:	99 81       	ldd	r25, Y+1	; 0x01
    1606:	9d 83       	std	Y+5, r25	; 0x05
    1608:	8c 83       	std	Y+4, r24	; 0x04
    160a:	20 c0       	rjmp	.+64     	; 0x164c <prvCopyDataToQueue+0x84>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    160c:	8e 81       	ldd	r24, Y+6	; 0x06
    160e:	9f 81       	ldd	r25, Y+7	; 0x07
    1610:	50 e0       	ldi	r21, 0x00	; 0
    1612:	0e 94 a5 15 	call	0x2b4a	; 0x2b4a <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
    1616:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1618:	90 e0       	ldi	r25, 0x00	; 0
    161a:	44 27       	eor	r20, r20
    161c:	55 27       	eor	r21, r21
    161e:	48 1b       	sub	r20, r24
    1620:	59 0b       	sbc	r21, r25
    1622:	8e 81       	ldd	r24, Y+6	; 0x06
    1624:	9f 81       	ldd	r25, Y+7	; 0x07
    1626:	84 0f       	add	r24, r20
    1628:	95 1f       	adc	r25, r21
    162a:	9f 83       	std	Y+7, r25	; 0x07
    162c:	8e 83       	std	Y+6, r24	; 0x06
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    162e:	28 81       	ld	r18, Y
    1630:	39 81       	ldd	r19, Y+1	; 0x01
    1632:	82 17       	cp	r24, r18
    1634:	93 07       	cpc	r25, r19
    1636:	30 f4       	brcc	.+12     	; 0x1644 <prvCopyDataToQueue+0x7c>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
    1638:	8a 81       	ldd	r24, Y+2	; 0x02
    163a:	9b 81       	ldd	r25, Y+3	; 0x03
    163c:	84 0f       	add	r24, r20
    163e:	95 1f       	adc	r25, r21
    1640:	9f 83       	std	Y+7, r25	; 0x07
    1642:	8e 83       	std	Y+6, r24	; 0x06
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
    1644:	02 30       	cpi	r16, 0x02	; 2
    1646:	11 f4       	brne	.+4      	; 0x164c <prvCopyDataToQueue+0x84>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    1648:	11 11       	cpse	r17, r1
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
    164a:	11 50       	subi	r17, 0x01	; 1
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
    164c:	1f 5f       	subi	r17, 0xFF	; 255
    164e:	1a 8f       	std	Y+26, r17	; 0x1a

	return xReturn;
}
    1650:	80 e0       	ldi	r24, 0x00	; 0
    1652:	df 91       	pop	r29
    1654:	cf 91       	pop	r28
    1656:	1f 91       	pop	r17
    1658:	0f 91       	pop	r16
    165a:	08 95       	ret

0000165c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
    165c:	fc 01       	movw	r30, r24
    165e:	56 2f       	mov	r21, r22
    1660:	a7 2f       	mov	r26, r23
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
    1662:	24 8d       	ldd	r18, Z+28	; 0x1c
    1664:	22 23       	and	r18, r18
    1666:	b9 f0       	breq	.+46     	; 0x1696 <prvCopyDataFromQueue+0x3a>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
    1668:	86 81       	ldd	r24, Z+6	; 0x06
    166a:	97 81       	ldd	r25, Z+7	; 0x07
    166c:	82 0f       	add	r24, r18
    166e:	91 1d       	adc	r25, r1
    1670:	97 83       	std	Z+7, r25	; 0x07
    1672:	86 83       	std	Z+6, r24	; 0x06
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
    1674:	22 81       	ldd	r18, Z+2	; 0x02
    1676:	33 81       	ldd	r19, Z+3	; 0x03
    1678:	82 17       	cp	r24, r18
    167a:	93 07       	cpc	r25, r19
    167c:	20 f0       	brcs	.+8      	; 0x1686 <prvCopyDataFromQueue+0x2a>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
    167e:	80 81       	ld	r24, Z
    1680:	91 81       	ldd	r25, Z+1	; 0x01
    1682:	97 83       	std	Z+7, r25	; 0x07
    1684:	86 83       	std	Z+6, r24	; 0x06
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
    1686:	44 8d       	ldd	r20, Z+28	; 0x1c
    1688:	66 81       	ldd	r22, Z+6	; 0x06
    168a:	77 81       	ldd	r23, Z+7	; 0x07
    168c:	85 2f       	mov	r24, r21
    168e:	9a 2f       	mov	r25, r26
    1690:	50 e0       	ldi	r21, 0x00	; 0
    1692:	0e 94 a5 15 	call	0x2b4a	; 0x2b4a <memcpy>
    1696:	08 95       	ret

00001698 <xQueuePeekFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueuePeekFromISR( QueueHandle_t xQueue,  void * const pvBuffer )
{
    1698:	0f 93       	push	r16
    169a:	1f 93       	push	r17
    169c:	cf 93       	push	r28
    169e:	df 93       	push	r29
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    16a0:	ec 01       	movw	r28, r24
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		/* Cannot block in an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
    16a2:	8a 8d       	ldd	r24, Y+26	; 0x1a
    16a4:	88 23       	and	r24, r24
    16a6:	41 f0       	breq	.+16     	; 0x16b8 <xQueuePeekFromISR+0x20>
		{
			traceQUEUE_PEEK_FROM_ISR( pxQueue );

			/* Remember the read position so it can be reset as nothing is
			actually being removed from the queue. */
			pcOriginalReadPosition = pxQueue->u.pcReadFrom;
    16a8:	0e 81       	ldd	r16, Y+6	; 0x06
    16aa:	1f 81       	ldd	r17, Y+7	; 0x07
			prvCopyDataFromQueue( pxQueue, pvBuffer );
    16ac:	ce 01       	movw	r24, r28
    16ae:	0e 94 2e 0b 	call	0x165c	; 0x165c <prvCopyDataFromQueue>
			pxQueue->u.pcReadFrom = pcOriginalReadPosition;
    16b2:	1f 83       	std	Y+7, r17	; 0x07
    16b4:	0e 83       	std	Y+6, r16	; 0x06
    16b6:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
    16b8:	df 91       	pop	r29
    16ba:	cf 91       	pop	r28
    16bc:	1f 91       	pop	r17
    16be:	0f 91       	pop	r16
    16c0:	08 95       	ret

000016c2 <xQueueCRReceiveFromISR>:
/*-----------------------------------------------------------*/

#if ( configUSE_CO_ROUTINES == 1 )

	BaseType_t xQueueCRReceiveFromISR( QueueHandle_t xQueue, void *pvBuffer, BaseType_t *pxCoRoutineWoken )
	{
    16c2:	0f 93       	push	r16
    16c4:	1f 93       	push	r17
    16c6:	cf 93       	push	r28
    16c8:	df 93       	push	r29
    16ca:	fb 01       	movw	r30, r22
    16cc:	8a 01       	movw	r16, r20
	BaseType_t xReturn;
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    16ce:	ec 01       	movw	r28, r24

		/* We cannot block from an ISR, so check there is data available. If
		not then just leave without doing anything. */
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
    16d0:	8a 8d       	ldd	r24, Y+26	; 0x1a
    16d2:	88 23       	and	r24, r24
    16d4:	61 f1       	breq	.+88     	; 0x172e <xQueueCRReceiveFromISR+0x6c>
		{
			/* Copy the data from the queue. */
			pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
    16d6:	8c 8d       	ldd	r24, Y+28	; 0x1c
    16d8:	2e 81       	ldd	r18, Y+6	; 0x06
    16da:	3f 81       	ldd	r19, Y+7	; 0x07
    16dc:	28 0f       	add	r18, r24
    16de:	31 1d       	adc	r19, r1
    16e0:	3f 83       	std	Y+7, r19	; 0x07
    16e2:	2e 83       	std	Y+6, r18	; 0x06
			if( pxQueue->u.pcReadFrom >= pxQueue->pcTail )
    16e4:	8a 81       	ldd	r24, Y+2	; 0x02
    16e6:	9b 81       	ldd	r25, Y+3	; 0x03
    16e8:	28 17       	cp	r18, r24
    16ea:	39 07       	cpc	r19, r25
    16ec:	20 f0       	brcs	.+8      	; 0x16f6 <xQueueCRReceiveFromISR+0x34>
			{
				pxQueue->u.pcReadFrom = pxQueue->pcHead;
    16ee:	88 81       	ld	r24, Y
    16f0:	99 81       	ldd	r25, Y+1	; 0x01
    16f2:	9f 83       	std	Y+7, r25	; 0x07
    16f4:	8e 83       	std	Y+6, r24	; 0x06
			}
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
			--( pxQueue->uxMessagesWaiting );
    16f6:	8a 8d       	ldd	r24, Y+26	; 0x1a
    16f8:	81 50       	subi	r24, 0x01	; 1
    16fa:	8a 8f       	std	Y+26, r24	; 0x1a
			( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
    16fc:	4c 8d       	ldd	r20, Y+28	; 0x1c
    16fe:	6e 81       	ldd	r22, Y+6	; 0x06
    1700:	7f 81       	ldd	r23, Y+7	; 0x07
    1702:	cf 01       	movw	r24, r30
    1704:	50 e0       	ldi	r21, 0x00	; 0
    1706:	0e 94 a5 15 	call	0x2b4a	; 0x2b4a <memcpy>

			if( ( *pxCoRoutineWoken ) == pdFALSE )
    170a:	f8 01       	movw	r30, r16
    170c:	80 81       	ld	r24, Z
    170e:	88 23       	and	r24, r24
    1710:	69 f4       	brne	.+26     	; 0x172c <xQueueCRReceiveFromISR+0x6a>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    1712:	88 85       	ldd	r24, Y+8	; 0x08
    1714:	88 23       	and	r24, r24
    1716:	51 f0       	breq	.+20     	; 0x172c <xQueueCRReceiveFromISR+0x6a>
				{
					if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    1718:	ce 01       	movw	r24, r28
    171a:	08 96       	adiw	r24, 0x08	; 8
    171c:	0e 94 59 0f 	call	0x1eb2	; 0x1eb2 <xCoRoutineRemoveFromEventList>
    1720:	88 23       	and	r24, r24
    1722:	21 f0       	breq	.+8      	; 0x172c <xQueueCRReceiveFromISR+0x6a>
					{
						*pxCoRoutineWoken = pdTRUE;
    1724:	81 e0       	ldi	r24, 0x01	; 1
    1726:	f8 01       	movw	r30, r16
    1728:	80 83       	st	Z, r24
    172a:	01 c0       	rjmp	.+2      	; 0x172e <xQueueCRReceiveFromISR+0x6c>
    172c:	81 e0       	ldi	r24, 0x01	; 1
		{
			xReturn = pdFAIL;
		}

		return xReturn;
	}
    172e:	df 91       	pop	r29
    1730:	cf 91       	pop	r28
    1732:	1f 91       	pop	r17
    1734:	0f 91       	pop	r16
    1736:	08 95       	ret

00001738 <xQueueCRSendFromISR>:
/*-----------------------------------------------------------*/

#if ( configUSE_CO_ROUTINES == 1 )

	BaseType_t xQueueCRSendFromISR( QueueHandle_t xQueue, const void *pvItemToQueue, BaseType_t xCoRoutinePreviouslyWoken )
	{
    1738:	1f 93       	push	r17
    173a:	cf 93       	push	r28
    173c:	df 93       	push	r29
    173e:	14 2f       	mov	r17, r20
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    1740:	ec 01       	movw	r28, r24

		/* Cannot block within an ISR so if there is no space on the queue then
		exit without doing anything. */
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    1742:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1744:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1746:	98 17       	cp	r25, r24
    1748:	88 f4       	brcc	.+34     	; 0x176c <xQueueCRSendFromISR+0x34>
		{
			prvCopyDataToQueue( pxQueue, pvItemToQueue, queueSEND_TO_BACK );
    174a:	ce 01       	movw	r24, r28
    174c:	40 e0       	ldi	r20, 0x00	; 0
    174e:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <prvCopyDataToQueue>

			/* We only want to wake one co-routine per ISR, so check that a
			co-routine has not already been woken. */
			if( xCoRoutinePreviouslyWoken == pdFALSE )
    1752:	11 23       	and	r17, r17
    1754:	59 f4       	brne	.+22     	; 0x176c <xQueueCRSendFromISR+0x34>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    1756:	89 89       	ldd	r24, Y+17	; 0x11
    1758:	88 23       	and	r24, r24
    175a:	41 f0       	breq	.+16     	; 0x176c <xQueueCRSendFromISR+0x34>
				{
					if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    175c:	ce 01       	movw	r24, r28
    175e:	41 96       	adiw	r24, 0x11	; 17
    1760:	0e 94 59 0f 	call	0x1eb2	; 0x1eb2 <xCoRoutineRemoveFromEventList>
    1764:	48 2f       	mov	r20, r24
    1766:	81 11       	cpse	r24, r1
    1768:	41 e0       	ldi	r20, 0x01	; 1
    176a:	14 2f       	mov	r17, r20
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xCoRoutinePreviouslyWoken;
	}
    176c:	81 2f       	mov	r24, r17
    176e:	df 91       	pop	r29
    1770:	cf 91       	pop	r28
    1772:	1f 91       	pop	r17
    1774:	08 95       	ret

00001776 <xQueueCRReceive>:
/*-----------------------------------------------------------*/

#if ( configUSE_CO_ROUTINES == 1 )

	BaseType_t xQueueCRReceive( QueueHandle_t xQueue, void *pvBuffer, TickType_t xTicksToWait )
	{
    1776:	cf 93       	push	r28
    1778:	df 93       	push	r29
    177a:	fb 01       	movw	r30, r22
	BaseType_t xReturn;
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    177c:	ec 01       	movw	r28, r24

		/* If the queue is already empty we may have to block.  A critical section
		is required to prevent an interrupt adding something to the queue
		between the check to see if the queue is empty and blocking on the queue. */
		portDISABLE_INTERRUPTS();
    177e:	f8 94       	cli
		{
			if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
    1780:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1782:	88 23       	and	r24, r24
    1784:	71 f4       	brne	.+28     	; 0x17a2 <xQueueCRReceive+0x2c>
			{
				/* There are no messages in the queue, do we want to block or just
				leave with nothing? */
				if( xTicksToWait > ( TickType_t ) 0 )
    1786:	41 15       	cp	r20, r1
    1788:	51 05       	cpc	r21, r1
    178a:	41 f0       	breq	.+16     	; 0x179c <xQueueCRReceive+0x26>
				{
					/* As this is a co-routine we cannot block directly, but return
					indicating that we need to block. */
					vCoRoutineAddToDelayedList( xTicksToWait, &( pxQueue->xTasksWaitingToReceive ) );
    178c:	61 96       	adiw	r28, 0x11	; 17
    178e:	ca 01       	movw	r24, r20
    1790:	be 01       	movw	r22, r28
    1792:	0e 94 61 10 	call	0x20c2	; 0x20c2 <vCoRoutineAddToDelayedList>
					portENABLE_INTERRUPTS();
    1796:	78 94       	sei
    1798:	8c ef       	ldi	r24, 0xFC	; 252
    179a:	2f c0       	rjmp	.+94     	; 0x17fa <xQueueCRReceive+0x84>
					return errQUEUE_BLOCKED;
				}
				else
				{
					portENABLE_INTERRUPTS();
    179c:	78 94       	sei
    179e:	80 e0       	ldi	r24, 0x00	; 0
    17a0:	2c c0       	rjmp	.+88     	; 0x17fa <xQueueCRReceive+0x84>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portENABLE_INTERRUPTS();
    17a2:	78 94       	sei

		portDISABLE_INTERRUPTS();
    17a4:	f8 94       	cli
		{
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
    17a6:	8a 8d       	ldd	r24, Y+26	; 0x1a
    17a8:	88 23       	and	r24, r24
    17aa:	31 f1       	breq	.+76     	; 0x17f8 <xQueueCRReceive+0x82>
			{
				/* Data is available from the queue. */
				pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
    17ac:	8c 8d       	ldd	r24, Y+28	; 0x1c
    17ae:	2e 81       	ldd	r18, Y+6	; 0x06
    17b0:	3f 81       	ldd	r19, Y+7	; 0x07
    17b2:	28 0f       	add	r18, r24
    17b4:	31 1d       	adc	r19, r1
    17b6:	3f 83       	std	Y+7, r19	; 0x07
    17b8:	2e 83       	std	Y+6, r18	; 0x06
				if( pxQueue->u.pcReadFrom >= pxQueue->pcTail )
    17ba:	8a 81       	ldd	r24, Y+2	; 0x02
    17bc:	9b 81       	ldd	r25, Y+3	; 0x03
    17be:	28 17       	cp	r18, r24
    17c0:	39 07       	cpc	r19, r25
    17c2:	20 f0       	brcs	.+8      	; 0x17cc <xQueueCRReceive+0x56>
				{
					pxQueue->u.pcReadFrom = pxQueue->pcHead;
    17c4:	88 81       	ld	r24, Y
    17c6:	99 81       	ldd	r25, Y+1	; 0x01
    17c8:	9f 83       	std	Y+7, r25	; 0x07
    17ca:	8e 83       	std	Y+6, r24	; 0x06
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				--( pxQueue->uxMessagesWaiting );
    17cc:	8a 8d       	ldd	r24, Y+26	; 0x1a
    17ce:	81 50       	subi	r24, 0x01	; 1
    17d0:	8a 8f       	std	Y+26, r24	; 0x1a
				( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
    17d2:	4c 8d       	ldd	r20, Y+28	; 0x1c
    17d4:	6e 81       	ldd	r22, Y+6	; 0x06
    17d6:	7f 81       	ldd	r23, Y+7	; 0x07
    17d8:	cf 01       	movw	r24, r30
    17da:	50 e0       	ldi	r21, 0x00	; 0
    17dc:	0e 94 a5 15 	call	0x2b4a	; 0x2b4a <memcpy>

				xReturn = pdPASS;

				/* Were any co-routines waiting for space to become available? */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    17e0:	88 85       	ldd	r24, Y+8	; 0x08
    17e2:	88 23       	and	r24, r24
    17e4:	41 f0       	breq	.+16     	; 0x17f6 <xQueueCRReceive+0x80>
				{
					/* In this instance the co-routine could be placed directly
					into the ready list as we are within a critical section.
					Instead the same pending ready list mechanism is used as if
					the event were caused from within an interrupt. */
					if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    17e6:	ce 01       	movw	r24, r28
    17e8:	08 96       	adiw	r24, 0x08	; 8
    17ea:	0e 94 59 0f 	call	0x1eb2	; 0x1eb2 <xCoRoutineRemoveFromEventList>
    17ee:	88 23       	and	r24, r24
    17f0:	11 f0       	breq	.+4      	; 0x17f6 <xQueueCRReceive+0x80>
    17f2:	8b ef       	ldi	r24, 0xFB	; 251
    17f4:	01 c0       	rjmp	.+2      	; 0x17f8 <xQueueCRReceive+0x82>
    17f6:	81 e0       	ldi	r24, 0x01	; 1
			else
			{
				xReturn = pdFAIL;
			}
		}
		portENABLE_INTERRUPTS();
    17f8:	78 94       	sei

		return xReturn;
	}
    17fa:	df 91       	pop	r29
    17fc:	cf 91       	pop	r28
    17fe:	08 95       	ret

00001800 <xQueueCRSend>:
/*-----------------------------------------------------------*/

#if ( configUSE_CO_ROUTINES == 1 )

	BaseType_t xQueueCRSend( QueueHandle_t xQueue, const void *pvItemToQueue, TickType_t xTicksToWait )
	{
    1800:	cf 93       	push	r28
    1802:	df 93       	push	r29
	BaseType_t xReturn;
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    1804:	ec 01       	movw	r28, r24

		/* If the queue is already full we may have to block.  A critical section
		is required to prevent an interrupt removing something from the queue
		between the check to see if the queue is full and blocking on the queue. */
		portDISABLE_INTERRUPTS();
    1806:	f8 94       	cli

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
    1808:	0f b6       	in	r0, 0x3f	; 63
    180a:	f8 94       	cli
    180c:	0f 92       	push	r0
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
    180e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1810:	9b 8d       	ldd	r25, Y+27	; 0x1b
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
    1812:	0f 90       	pop	r0
    1814:	0f be       	out	0x3f, r0	; 63
		/* If the queue is already full we may have to block.  A critical section
		is required to prevent an interrupt removing something from the queue
		between the check to see if the queue is full and blocking on the queue. */
		portDISABLE_INTERRUPTS();
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
    1816:	89 17       	cp	r24, r25
    1818:	71 f4       	brne	.+28     	; 0x1836 <xQueueCRSend+0x36>
			{
				/* The queue is full - do we want to block or just leave without
				posting? */
				if( xTicksToWait > ( TickType_t ) 0 )
    181a:	41 15       	cp	r20, r1
    181c:	51 05       	cpc	r21, r1
    181e:	41 f0       	breq	.+16     	; 0x1830 <xQueueCRSend+0x30>
				{
					/* As this is called from a coroutine we cannot block directly, but
					return indicating that we need to block. */
					vCoRoutineAddToDelayedList( xTicksToWait, &( pxQueue->xTasksWaitingToSend ) );
    1820:	28 96       	adiw	r28, 0x08	; 8
    1822:	ca 01       	movw	r24, r20
    1824:	be 01       	movw	r22, r28
    1826:	0e 94 61 10 	call	0x20c2	; 0x20c2 <vCoRoutineAddToDelayedList>
					portENABLE_INTERRUPTS();
    182a:	78 94       	sei
    182c:	8c ef       	ldi	r24, 0xFC	; 252
    182e:	1b c0       	rjmp	.+54     	; 0x1866 <xQueueCRSend+0x66>
					return errQUEUE_BLOCKED;
				}
				else
				{
					portENABLE_INTERRUPTS();
    1830:	78 94       	sei
    1832:	80 e0       	ldi	r24, 0x00	; 0
    1834:	18 c0       	rjmp	.+48     	; 0x1866 <xQueueCRSend+0x66>
					return errQUEUE_FULL;
				}
			}
		}
		portENABLE_INTERRUPTS();
    1836:	78 94       	sei

		portDISABLE_INTERRUPTS();
    1838:	f8 94       	cli
		{
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    183a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    183c:	89 17       	cp	r24, r25
    183e:	10 f0       	brcs	.+4      	; 0x1844 <xQueueCRSend+0x44>
    1840:	80 e0       	ldi	r24, 0x00	; 0
    1842:	10 c0       	rjmp	.+32     	; 0x1864 <xQueueCRSend+0x64>
			{
				/* There is room in the queue, copy the data into the queue. */
				prvCopyDataToQueue( pxQueue, pvItemToQueue, queueSEND_TO_BACK );
    1844:	ce 01       	movw	r24, r28
    1846:	40 e0       	ldi	r20, 0x00	; 0
    1848:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <prvCopyDataToQueue>
				xReturn = pdPASS;

				/* Were any co-routines waiting for data to become available? */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    184c:	89 89       	ldd	r24, Y+17	; 0x11
    184e:	88 23       	and	r24, r24
    1850:	41 f0       	breq	.+16     	; 0x1862 <xQueueCRSend+0x62>
				{
					/* In this instance the co-routine could be placed directly
					into the ready list as we are within a critical section.
					Instead the same pending ready list mechanism is used as if
					the event were caused from within an interrupt. */
					if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    1852:	ce 01       	movw	r24, r28
    1854:	41 96       	adiw	r24, 0x11	; 17
    1856:	0e 94 59 0f 	call	0x1eb2	; 0x1eb2 <xCoRoutineRemoveFromEventList>
    185a:	88 23       	and	r24, r24
    185c:	11 f0       	breq	.+4      	; 0x1862 <xQueueCRSend+0x62>
    185e:	8b ef       	ldi	r24, 0xFB	; 251
    1860:	01 c0       	rjmp	.+2      	; 0x1864 <xQueueCRSend+0x64>
    1862:	81 e0       	ldi	r24, 0x01	; 1
			else
			{
				xReturn = errQUEUE_FULL;
			}
		}
		portENABLE_INTERRUPTS();
    1864:	78 94       	sei

		return xReturn;
	}
    1866:	df 91       	pop	r29
    1868:	cf 91       	pop	r28
    186a:	08 95       	ret

0000186c <vQueueDelete>:

	#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
	{
		/* The queue can only have been allocated dynamically - free it
		again. */
		vPortFree( pxQueue );
    186c:	0e 94 18 11 	call	0x2230	; 0x2230 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
    1870:	08 95       	ret

00001872 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
    1872:	ef 92       	push	r14
    1874:	ff 92       	push	r15
    1876:	0f 93       	push	r16
    1878:	1f 93       	push	r17
    187a:	cf 93       	push	r28
    187c:	df 93       	push	r29
    187e:	7a 01       	movw	r14, r20
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    1880:	ec 01       	movw	r28, r24
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    1882:	1a 8d       	ldd	r17, Y+26	; 0x1a

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    1884:	11 23       	and	r17, r17
    1886:	11 f4       	brne	.+4      	; 0x188c <xQueueReceiveFromISR+0x1a>
    1888:	80 e0       	ldi	r24, 0x00	; 0
    188a:	1a c0       	rjmp	.+52     	; 0x18c0 <xQueueReceiveFromISR+0x4e>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
    188c:	0d 8d       	ldd	r16, Y+29	; 0x1d

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
    188e:	0e 94 2e 0b 	call	0x165c	; 0x165c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
    1892:	11 50       	subi	r17, 0x01	; 1
    1894:	1a 8f       	std	Y+26, r17	; 0x1a

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
    1896:	0f 3f       	cpi	r16, 0xFF	; 255
    1898:	81 f4       	brne	.+32     	; 0x18ba <xQueueReceiveFromISR+0x48>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    189a:	88 85       	ldd	r24, Y+8	; 0x08
    189c:	88 23       	and	r24, r24
    189e:	79 f0       	breq	.+30     	; 0x18be <xQueueReceiveFromISR+0x4c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    18a0:	ce 01       	movw	r24, r28
    18a2:	08 96       	adiw	r24, 0x08	; 8
    18a4:	0e 94 61 05 	call	0xac2	; 0xac2 <xTaskRemoveFromEventList>
    18a8:	88 23       	and	r24, r24
    18aa:	49 f0       	breq	.+18     	; 0x18be <xQueueReceiveFromISR+0x4c>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
    18ac:	e1 14       	cp	r14, r1
    18ae:	f1 04       	cpc	r15, r1
    18b0:	31 f0       	breq	.+12     	; 0x18be <xQueueReceiveFromISR+0x4c>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
    18b2:	81 e0       	ldi	r24, 0x01	; 1
    18b4:	f7 01       	movw	r30, r14
    18b6:	80 83       	st	Z, r24
    18b8:	03 c0       	rjmp	.+6      	; 0x18c0 <xQueueReceiveFromISR+0x4e>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
    18ba:	0f 5f       	subi	r16, 0xFF	; 255
    18bc:	0d 8f       	std	Y+29, r16	; 0x1d
    18be:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
    18c0:	df 91       	pop	r29
    18c2:	cf 91       	pop	r28
    18c4:	1f 91       	pop	r17
    18c6:	0f 91       	pop	r16
    18c8:	ff 90       	pop	r15
    18ca:	ef 90       	pop	r14
    18cc:	08 95       	ret

000018ce <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
    18ce:	cf 93       	push	r28
    18d0:	df 93       	push	r29
    18d2:	eb 01       	movw	r28, r22
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    18d4:	fc 01       	movw	r30, r24
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    18d6:	92 8d       	ldd	r25, Z+26	; 0x1a

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
    18d8:	83 8d       	ldd	r24, Z+27	; 0x1b
    18da:	98 17       	cp	r25, r24
    18dc:	10 f0       	brcs	.+4      	; 0x18e2 <xQueueGiveFromISR+0x14>
    18de:	80 e0       	ldi	r24, 0x00	; 0
    18e0:	16 c0       	rjmp	.+44     	; 0x190e <xQueueGiveFromISR+0x40>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
    18e2:	86 8d       	ldd	r24, Z+30	; 0x1e
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
    18e4:	9f 5f       	subi	r25, 0xFF	; 255
    18e6:	92 8f       	std	Z+26, r25	; 0x1a

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
    18e8:	8f 3f       	cpi	r24, 0xFF	; 255
    18ea:	71 f4       	brne	.+28     	; 0x1908 <xQueueGiveFromISR+0x3a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    18ec:	81 89       	ldd	r24, Z+17	; 0x11
    18ee:	88 23       	and	r24, r24
    18f0:	69 f0       	breq	.+26     	; 0x190c <xQueueGiveFromISR+0x3e>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    18f2:	cf 01       	movw	r24, r30
    18f4:	41 96       	adiw	r24, 0x11	; 17
    18f6:	0e 94 61 05 	call	0xac2	; 0xac2 <xTaskRemoveFromEventList>
    18fa:	88 23       	and	r24, r24
    18fc:	39 f0       	breq	.+14     	; 0x190c <xQueueGiveFromISR+0x3e>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
    18fe:	20 97       	sbiw	r28, 0x00	; 0
    1900:	29 f0       	breq	.+10     	; 0x190c <xQueueGiveFromISR+0x3e>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
    1902:	81 e0       	ldi	r24, 0x01	; 1
    1904:	88 83       	st	Y, r24
    1906:	03 c0       	rjmp	.+6      	; 0x190e <xQueueGiveFromISR+0x40>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
    1908:	8f 5f       	subi	r24, 0xFF	; 255
    190a:	86 8f       	std	Z+30, r24	; 0x1e
    190c:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
    190e:	df 91       	pop	r29
    1910:	cf 91       	pop	r28
    1912:	08 95       	ret

00001914 <xQueueGenericSendFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
    1914:	ef 92       	push	r14
    1916:	ff 92       	push	r15
    1918:	1f 93       	push	r17
    191a:	cf 93       	push	r28
    191c:	df 93       	push	r29
    191e:	7a 01       	movw	r14, r20
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    1920:	ec 01       	movw	r28, r24
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    1922:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1924:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1926:	98 17       	cp	r25, r24
    1928:	20 f0       	brcs	.+8      	; 0x1932 <xQueueGenericSendFromISR+0x1e>
    192a:	22 30       	cpi	r18, 0x02	; 2
    192c:	11 f0       	breq	.+4      	; 0x1932 <xQueueGenericSendFromISR+0x1e>
    192e:	80 e0       	ldi	r24, 0x00	; 0
    1930:	1a c0       	rjmp	.+52     	; 0x1966 <xQueueGenericSendFromISR+0x52>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
    1932:	1e 8d       	ldd	r17, Y+30	; 0x1e
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    1934:	ce 01       	movw	r24, r28
    1936:	42 2f       	mov	r20, r18
    1938:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
    193c:	1f 3f       	cpi	r17, 0xFF	; 255
    193e:	81 f4       	brne	.+32     	; 0x1960 <xQueueGenericSendFromISR+0x4c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    1940:	89 89       	ldd	r24, Y+17	; 0x11
    1942:	88 23       	and	r24, r24
    1944:	79 f0       	breq	.+30     	; 0x1964 <xQueueGenericSendFromISR+0x50>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    1946:	ce 01       	movw	r24, r28
    1948:	41 96       	adiw	r24, 0x11	; 17
    194a:	0e 94 61 05 	call	0xac2	; 0xac2 <xTaskRemoveFromEventList>
    194e:	88 23       	and	r24, r24
    1950:	49 f0       	breq	.+18     	; 0x1964 <xQueueGenericSendFromISR+0x50>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
    1952:	e1 14       	cp	r14, r1
    1954:	f1 04       	cpc	r15, r1
    1956:	31 f0       	breq	.+12     	; 0x1964 <xQueueGenericSendFromISR+0x50>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
    1958:	81 e0       	ldi	r24, 0x01	; 1
    195a:	f7 01       	movw	r30, r14
    195c:	80 83       	st	Z, r24
    195e:	03 c0       	rjmp	.+6      	; 0x1966 <xQueueGenericSendFromISR+0x52>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
    1960:	1f 5f       	subi	r17, 0xFF	; 255
    1962:	1e 8f       	std	Y+30, r17	; 0x1e
    1964:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
    1966:	df 91       	pop	r29
    1968:	cf 91       	pop	r28
    196a:	1f 91       	pop	r17
    196c:	ff 90       	pop	r15
    196e:	ef 90       	pop	r14
    1970:	08 95       	ret

00001972 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
    1972:	ef 92       	push	r14
    1974:	ff 92       	push	r15
    1976:	1f 93       	push	r17
    1978:	cf 93       	push	r28
    197a:	df 93       	push	r29
    197c:	ec 01       	movw	r28, r24

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
    197e:	0f b6       	in	r0, 0x3f	; 63
    1980:	f8 94       	cli
    1982:	0f 92       	push	r0
	{
		int8_t cTxLock = pxQueue->cTxLock;
    1984:	1e 8d       	ldd	r17, Y+30	; 0x1e
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    1986:	91 e1       	ldi	r25, 0x11	; 17
    1988:	e9 2e       	mov	r14, r25
    198a:	f1 2c       	mov	r15, r1
    198c:	ec 0e       	add	r14, r28
    198e:	fd 1e       	adc	r15, r29
    1990:	0b c0       	rjmp	.+22     	; 0x19a8 <prvUnlockQueue+0x36>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    1992:	89 89       	ldd	r24, Y+17	; 0x11
    1994:	88 23       	and	r24, r24
    1996:	51 f0       	breq	.+20     	; 0x19ac <prvUnlockQueue+0x3a>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    1998:	c7 01       	movw	r24, r14
    199a:	0e 94 61 05 	call	0xac2	; 0xac2 <xTaskRemoveFromEventList>
    199e:	88 23       	and	r24, r24
    19a0:	11 f0       	breq	.+4      	; 0x19a6 <prvUnlockQueue+0x34>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
    19a2:	0e 94 2f 04 	call	0x85e	; 0x85e <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
    19a6:	11 50       	subi	r17, 0x01	; 1
	taskENTER_CRITICAL();
	{
		int8_t cTxLock = pxQueue->cTxLock;

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
    19a8:	11 16       	cp	r1, r17
    19aa:	9c f3       	brlt	.-26     	; 0x1992 <prvUnlockQueue+0x20>
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
		}

		pxQueue->cTxLock = queueUNLOCKED;
    19ac:	8f ef       	ldi	r24, 0xFF	; 255
    19ae:	8e 8f       	std	Y+30, r24	; 0x1e
	}
	taskEXIT_CRITICAL();
    19b0:	0f 90       	pop	r0
    19b2:	0f be       	out	0x3f, r0	; 63

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
    19b4:	0f b6       	in	r0, 0x3f	; 63
    19b6:	f8 94       	cli
    19b8:	0f 92       	push	r0
	{
		int8_t cRxLock = pxQueue->cRxLock;
    19ba:	1d 8d       	ldd	r17, Y+29	; 0x1d

		while( cRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    19bc:	88 e0       	ldi	r24, 0x08	; 8
    19be:	e8 2e       	mov	r14, r24
    19c0:	f1 2c       	mov	r15, r1
    19c2:	ec 0e       	add	r14, r28
    19c4:	fd 1e       	adc	r15, r29
    19c6:	0b c0       	rjmp	.+22     	; 0x19de <prvUnlockQueue+0x6c>
	{
		int8_t cRxLock = pxQueue->cRxLock;

		while( cRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    19c8:	88 85       	ldd	r24, Y+8	; 0x08
    19ca:	88 23       	and	r24, r24
    19cc:	51 f0       	breq	.+20     	; 0x19e2 <prvUnlockQueue+0x70>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    19ce:	c7 01       	movw	r24, r14
    19d0:	0e 94 61 05 	call	0xac2	; 0xac2 <xTaskRemoveFromEventList>
    19d4:	88 23       	and	r24, r24
    19d6:	11 f0       	breq	.+4      	; 0x19dc <prvUnlockQueue+0x6a>
				{
					vTaskMissedYield();
    19d8:	0e 94 2f 04 	call	0x85e	; 0x85e <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
    19dc:	11 50       	subi	r17, 0x01	; 1
	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		int8_t cRxLock = pxQueue->cRxLock;

		while( cRxLock > queueLOCKED_UNMODIFIED )
    19de:	11 16       	cp	r1, r17
    19e0:	9c f3       	brlt	.-26     	; 0x19c8 <prvUnlockQueue+0x56>
			{
				break;
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
    19e2:	8f ef       	ldi	r24, 0xFF	; 255
    19e4:	8d 8f       	std	Y+29, r24	; 0x1d
	}
	taskEXIT_CRITICAL();
    19e6:	0f 90       	pop	r0
    19e8:	0f be       	out	0x3f, r0	; 63
}
    19ea:	df 91       	pop	r29
    19ec:	cf 91       	pop	r28
    19ee:	1f 91       	pop	r17
    19f0:	ff 90       	pop	r15
    19f2:	ef 90       	pop	r14
    19f4:	08 95       	ret

000019f6 <xQueueGenericReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
    19f6:	6f 92       	push	r6
    19f8:	7f 92       	push	r7
    19fa:	8f 92       	push	r8
    19fc:	9f 92       	push	r9
    19fe:	af 92       	push	r10
    1a00:	bf 92       	push	r11
    1a02:	cf 92       	push	r12
    1a04:	df 92       	push	r13
    1a06:	ef 92       	push	r14
    1a08:	ff 92       	push	r15
    1a0a:	0f 93       	push	r16
    1a0c:	1f 93       	push	r17
    1a0e:	df 93       	push	r29
    1a10:	cf 93       	push	r28
    1a12:	00 d0       	rcall	.+0      	; 0x1a14 <xQueueGenericReceive+0x1e>
    1a14:	00 d0       	rcall	.+0      	; 0x1a16 <xQueueGenericReceive+0x20>
    1a16:	0f 92       	push	r0
    1a18:	cd b7       	in	r28, 0x3d	; 61
    1a1a:	de b7       	in	r29, 0x3e	; 62
    1a1c:	4b 01       	movw	r8, r22
    1a1e:	5d 83       	std	Y+5, r21	; 0x05
    1a20:	4c 83       	std	Y+4, r20	; 0x04
    1a22:	e2 2e       	mov	r14, r18
BaseType_t xEntryTimeSet = pdFALSE;
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    1a24:	8c 01       	movw	r16, r24
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    1a26:	41 e1       	ldi	r20, 0x11	; 17
    1a28:	a4 2e       	mov	r10, r20
    1a2a:	b1 2c       	mov	r11, r1
    1a2c:	a8 0e       	add	r10, r24
    1a2e:	b9 1e       	adc	r11, r25
    1a30:	20 e0       	ldi	r18, 0x00	; 0
				}
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    1a32:	6e 01       	movw	r12, r28
    1a34:	08 94       	sec
    1a36:	c1 1c       	adc	r12, r1
    1a38:	d1 1c       	adc	r13, r1

		vTaskSuspendAll();
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    1a3a:	34 e0       	ldi	r19, 0x04	; 4
    1a3c:	63 2e       	mov	r6, r19
    1a3e:	71 2c       	mov	r7, r1
    1a40:	6c 0e       	add	r6, r28
    1a42:	7d 1e       	adc	r7, r29
    1a44:	01 c0       	rjmp	.+2      	; 0x1a48 <xQueueGenericReceive+0x52>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    1a46:	21 e0       	ldi	r18, 0x01	; 1
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    1a48:	0f b6       	in	r0, 0x3f	; 63
    1a4a:	f8 94       	cli
    1a4c:	0f 92       	push	r0
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    1a4e:	f8 01       	movw	r30, r16
    1a50:	f2 8c       	ldd	r15, Z+26	; 0x1a

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    1a52:	ff 20       	and	r15, r15
    1a54:	11 f1       	breq	.+68     	; 0x1a9a <xQueueGenericReceive+0xa4>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
    1a56:	c6 80       	ldd	r12, Z+6	; 0x06
    1a58:	d7 80       	ldd	r13, Z+7	; 0x07

				prvCopyDataFromQueue( pxQueue, pvBuffer );
    1a5a:	c8 01       	movw	r24, r16
    1a5c:	b4 01       	movw	r22, r8
    1a5e:	0e 94 2e 0b 	call	0x165c	; 0x165c <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
    1a62:	ee 20       	and	r14, r14
    1a64:	49 f4       	brne	.+18     	; 0x1a78 <xQueueGenericReceive+0x82>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
    1a66:	fa 94       	dec	r15
    1a68:	f8 01       	movw	r30, r16
    1a6a:	f2 8e       	std	Z+26, r15	; 0x1a
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    1a6c:	80 85       	ldd	r24, Z+8	; 0x08
    1a6e:	88 23       	and	r24, r24
    1a70:	81 f0       	breq	.+32     	; 0x1a92 <xQueueGenericReceive+0x9c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    1a72:	c8 01       	movw	r24, r16
    1a74:	08 96       	adiw	r24, 0x08	; 8
    1a76:	07 c0       	rjmp	.+14     	; 0x1a86 <xQueueGenericReceive+0x90>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
    1a78:	f8 01       	movw	r30, r16
    1a7a:	d7 82       	std	Z+7, r13	; 0x07
    1a7c:	c6 82       	std	Z+6, r12	; 0x06

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    1a7e:	81 89       	ldd	r24, Z+17	; 0x11
    1a80:	88 23       	and	r24, r24
    1a82:	39 f0       	breq	.+14     	; 0x1a92 <xQueueGenericReceive+0x9c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    1a84:	c5 01       	movw	r24, r10
    1a86:	0e 94 61 05 	call	0xac2	; 0xac2 <xTaskRemoveFromEventList>
    1a8a:	88 23       	and	r24, r24
    1a8c:	11 f0       	breq	.+4      	; 0x1a92 <xQueueGenericReceive+0x9c>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
    1a8e:	0e 94 3d 12 	call	0x247a	; 0x247a <vPortYield>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
    1a92:	0f 90       	pop	r0
    1a94:	0f be       	out	0x3f, r0	; 63
    1a96:	81 e0       	ldi	r24, 0x01	; 1
    1a98:	54 c0       	rjmp	.+168    	; 0x1b42 <xQueueGenericReceive+0x14c>
				return pdPASS;
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    1a9a:	8c 81       	ldd	r24, Y+4	; 0x04
    1a9c:	9d 81       	ldd	r25, Y+5	; 0x05
    1a9e:	89 2b       	or	r24, r25
    1aa0:	21 f4       	brne	.+8      	; 0x1aaa <xQueueGenericReceive+0xb4>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    1aa2:	0f 90       	pop	r0
    1aa4:	0f be       	out	0x3f, r0	; 63
    1aa6:	80 e0       	ldi	r24, 0x00	; 0
    1aa8:	4c c0       	rjmp	.+152    	; 0x1b42 <xQueueGenericReceive+0x14c>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
				}
				else if( xEntryTimeSet == pdFALSE )
    1aaa:	22 23       	and	r18, r18
    1aac:	19 f4       	brne	.+6      	; 0x1ab4 <xQueueGenericReceive+0xbe>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    1aae:	c6 01       	movw	r24, r12
    1ab0:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <vTaskSetTimeOutState>
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    1ab4:	0f 90       	pop	r0
    1ab6:	0f be       	out	0x3f, r0	; 63

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    1ab8:	0e 94 92 03 	call	0x724	; 0x724 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    1abc:	0f b6       	in	r0, 0x3f	; 63
    1abe:	f8 94       	cli
    1ac0:	0f 92       	push	r0
    1ac2:	f8 01       	movw	r30, r16
    1ac4:	85 8d       	ldd	r24, Z+29	; 0x1d
    1ac6:	8f 3f       	cpi	r24, 0xFF	; 255
    1ac8:	09 f4       	brne	.+2      	; 0x1acc <xQueueGenericReceive+0xd6>
    1aca:	15 8e       	std	Z+29, r1	; 0x1d
    1acc:	f8 01       	movw	r30, r16
    1ace:	86 8d       	ldd	r24, Z+30	; 0x1e
    1ad0:	8f 3f       	cpi	r24, 0xFF	; 255
    1ad2:	09 f4       	brne	.+2      	; 0x1ad6 <xQueueGenericReceive+0xe0>
    1ad4:	16 8e       	std	Z+30, r1	; 0x1e
    1ad6:	0f 90       	pop	r0
    1ad8:	0f be       	out	0x3f, r0	; 63

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    1ada:	c6 01       	movw	r24, r12
    1adc:	b3 01       	movw	r22, r6
    1ade:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <xTaskCheckForTimeOut>
    1ae2:	88 23       	and	r24, r24
    1ae4:	f9 f4       	brne	.+62     	; 0x1b24 <xQueueGenericReceive+0x12e>

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
    1ae6:	0f b6       	in	r0, 0x3f	; 63
    1ae8:	f8 94       	cli
    1aea:	0f 92       	push	r0
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
    1aec:	f8 01       	movw	r30, r16
    1aee:	82 8d       	ldd	r24, Z+26	; 0x1a
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
    1af0:	0f 90       	pop	r0
    1af2:	0f be       	out	0x3f, r0	; 63
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    1af4:	88 23       	and	r24, r24
    1af6:	81 f4       	brne	.+32     	; 0x1b18 <xQueueGenericReceive+0x122>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    1af8:	6c 81       	ldd	r22, Y+4	; 0x04
    1afa:	7d 81       	ldd	r23, Y+5	; 0x05
    1afc:	c5 01       	movw	r24, r10
    1afe:	0e 94 db 08 	call	0x11b6	; 0x11b6 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
    1b02:	c8 01       	movw	r24, r16
    1b04:	0e 94 b9 0c 	call	0x1972	; 0x1972 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
    1b08:	0e 94 d4 06 	call	0xda8	; 0xda8 <xTaskResumeAll>
    1b0c:	88 23       	and	r24, r24
    1b0e:	09 f0       	breq	.+2      	; 0x1b12 <xQueueGenericReceive+0x11c>
    1b10:	9a cf       	rjmp	.-204    	; 0x1a46 <xQueueGenericReceive+0x50>
				{
					portYIELD_WITHIN_API();
    1b12:	0e 94 3d 12 	call	0x247a	; 0x247a <vPortYield>
    1b16:	97 cf       	rjmp	.-210    	; 0x1a46 <xQueueGenericReceive+0x50>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    1b18:	c8 01       	movw	r24, r16
    1b1a:	0e 94 b9 0c 	call	0x1972	; 0x1972 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    1b1e:	0e 94 d4 06 	call	0xda8	; 0xda8 <xTaskResumeAll>
    1b22:	91 cf       	rjmp	.-222    	; 0x1a46 <xQueueGenericReceive+0x50>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
    1b24:	c8 01       	movw	r24, r16
    1b26:	0e 94 b9 0c 	call	0x1972	; 0x1972 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    1b2a:	0e 94 d4 06 	call	0xda8	; 0xda8 <xTaskResumeAll>

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
    1b2e:	0f b6       	in	r0, 0x3f	; 63
    1b30:	f8 94       	cli
    1b32:	0f 92       	push	r0
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
    1b34:	f8 01       	movw	r30, r16
    1b36:	82 8d       	ldd	r24, Z+26	; 0x1a
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
    1b38:	0f 90       	pop	r0
    1b3a:	0f be       	out	0x3f, r0	; 63
		else
		{
			prvUnlockQueue( pxQueue );
			( void ) xTaskResumeAll();

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    1b3c:	88 23       	and	r24, r24
    1b3e:	09 f0       	breq	.+2      	; 0x1b42 <xQueueGenericReceive+0x14c>
    1b40:	82 cf       	rjmp	.-252    	; 0x1a46 <xQueueGenericReceive+0x50>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
    1b42:	0f 90       	pop	r0
    1b44:	0f 90       	pop	r0
    1b46:	0f 90       	pop	r0
    1b48:	0f 90       	pop	r0
    1b4a:	0f 90       	pop	r0
    1b4c:	cf 91       	pop	r28
    1b4e:	df 91       	pop	r29
    1b50:	1f 91       	pop	r17
    1b52:	0f 91       	pop	r16
    1b54:	ff 90       	pop	r15
    1b56:	ef 90       	pop	r14
    1b58:	df 90       	pop	r13
    1b5a:	cf 90       	pop	r12
    1b5c:	bf 90       	pop	r11
    1b5e:	af 90       	pop	r10
    1b60:	9f 90       	pop	r9
    1b62:	8f 90       	pop	r8
    1b64:	7f 90       	pop	r7
    1b66:	6f 90       	pop	r6
    1b68:	08 95       	ret

00001b6a <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
    1b6a:	6f 92       	push	r6
    1b6c:	7f 92       	push	r7
    1b6e:	9f 92       	push	r9
    1b70:	af 92       	push	r10
    1b72:	bf 92       	push	r11
    1b74:	cf 92       	push	r12
    1b76:	df 92       	push	r13
    1b78:	ef 92       	push	r14
    1b7a:	ff 92       	push	r15
    1b7c:	0f 93       	push	r16
    1b7e:	1f 93       	push	r17
    1b80:	df 93       	push	r29
    1b82:	cf 93       	push	r28
    1b84:	00 d0       	rcall	.+0      	; 0x1b86 <xQueueGenericSend+0x1c>
    1b86:	00 d0       	rcall	.+0      	; 0x1b88 <xQueueGenericSend+0x1e>
    1b88:	0f 92       	push	r0
    1b8a:	cd b7       	in	r28, 0x3d	; 61
    1b8c:	de b7       	in	r29, 0x3e	; 62
    1b8e:	6b 01       	movw	r12, r22
    1b90:	5d 83       	std	Y+5, r21	; 0x05
    1b92:	4c 83       	std	Y+4, r20	; 0x04
    1b94:	92 2e       	mov	r9, r18
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    1b96:	8c 01       	movw	r16, r24
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    1b98:	68 e0       	ldi	r22, 0x08	; 8
    1b9a:	e6 2e       	mov	r14, r22
    1b9c:	f1 2c       	mov	r15, r1
    1b9e:	e8 0e       	add	r14, r24
    1ba0:	f9 1e       	adc	r15, r25
    1ba2:	20 e0       	ldi	r18, 0x00	; 0
				}
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    1ba4:	5e 01       	movw	r10, r28
    1ba6:	08 94       	sec
    1ba8:	a1 1c       	adc	r10, r1
    1baa:	b1 1c       	adc	r11, r1

		vTaskSuspendAll();
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    1bac:	54 e0       	ldi	r21, 0x04	; 4
    1bae:	65 2e       	mov	r6, r21
    1bb0:	71 2c       	mov	r7, r1
    1bb2:	6c 0e       	add	r6, r28
    1bb4:	7d 1e       	adc	r7, r29
    1bb6:	01 c0       	rjmp	.+2      	; 0x1bba <xQueueGenericSend+0x50>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    1bb8:	21 e0       	ldi	r18, 0x01	; 1
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    1bba:	0f b6       	in	r0, 0x3f	; 63
    1bbc:	f8 94       	cli
    1bbe:	0f 92       	push	r0
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    1bc0:	f8 01       	movw	r30, r16
    1bc2:	92 8d       	ldd	r25, Z+26	; 0x1a
    1bc4:	83 8d       	ldd	r24, Z+27	; 0x1b
    1bc6:	98 17       	cp	r25, r24
    1bc8:	18 f0       	brcs	.+6      	; 0x1bd0 <xQueueGenericSend+0x66>
    1bca:	f2 e0       	ldi	r31, 0x02	; 2
    1bcc:	9f 16       	cp	r9, r31
    1bce:	c9 f4       	brne	.+50     	; 0x1c02 <xQueueGenericSend+0x98>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    1bd0:	c8 01       	movw	r24, r16
    1bd2:	b6 01       	movw	r22, r12
    1bd4:	49 2d       	mov	r20, r9
    1bd6:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <prvCopyDataToQueue>
    1bda:	98 2f       	mov	r25, r24
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    1bdc:	f8 01       	movw	r30, r16
    1bde:	81 89       	ldd	r24, Z+17	; 0x11
    1be0:	88 23       	and	r24, r24
    1be2:	39 f0       	breq	.+14     	; 0x1bf2 <xQueueGenericSend+0x88>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    1be4:	c8 01       	movw	r24, r16
    1be6:	41 96       	adiw	r24, 0x11	; 17
    1be8:	0e 94 61 05 	call	0xac2	; 0xac2 <xTaskRemoveFromEventList>
    1bec:	88 23       	and	r24, r24
    1bee:	29 f0       	breq	.+10     	; 0x1bfa <xQueueGenericSend+0x90>
    1bf0:	02 c0       	rjmp	.+4      	; 0x1bf6 <xQueueGenericSend+0x8c>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
    1bf2:	99 23       	and	r25, r25
    1bf4:	11 f0       	breq	.+4      	; 0x1bfa <xQueueGenericSend+0x90>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
    1bf6:	0e 94 3d 12 	call	0x247a	; 0x247a <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
    1bfa:	0f 90       	pop	r0
    1bfc:	0f be       	out	0x3f, r0	; 63
    1bfe:	81 e0       	ldi	r24, 0x01	; 1
    1c00:	4c c0       	rjmp	.+152    	; 0x1c9a <xQueueGenericSend+0x130>
				return pdPASS;
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    1c02:	8c 81       	ldd	r24, Y+4	; 0x04
    1c04:	9d 81       	ldd	r25, Y+5	; 0x05
    1c06:	89 2b       	or	r24, r25
    1c08:	19 f4       	brne	.+6      	; 0x1c10 <xQueueGenericSend+0xa6>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    1c0a:	0f 90       	pop	r0
    1c0c:	0f be       	out	0x3f, r0	; 63
    1c0e:	44 c0       	rjmp	.+136    	; 0x1c98 <xQueueGenericSend+0x12e>
					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
				}
				else if( xEntryTimeSet == pdFALSE )
    1c10:	22 23       	and	r18, r18
    1c12:	19 f4       	brne	.+6      	; 0x1c1a <xQueueGenericSend+0xb0>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    1c14:	c5 01       	movw	r24, r10
    1c16:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <vTaskSetTimeOutState>
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    1c1a:	0f 90       	pop	r0
    1c1c:	0f be       	out	0x3f, r0	; 63

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    1c1e:	0e 94 92 03 	call	0x724	; 0x724 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    1c22:	0f b6       	in	r0, 0x3f	; 63
    1c24:	f8 94       	cli
    1c26:	0f 92       	push	r0
    1c28:	f8 01       	movw	r30, r16
    1c2a:	85 8d       	ldd	r24, Z+29	; 0x1d
    1c2c:	8f 3f       	cpi	r24, 0xFF	; 255
    1c2e:	09 f4       	brne	.+2      	; 0x1c32 <xQueueGenericSend+0xc8>
    1c30:	15 8e       	std	Z+29, r1	; 0x1d
    1c32:	f8 01       	movw	r30, r16
    1c34:	86 8d       	ldd	r24, Z+30	; 0x1e
    1c36:	8f 3f       	cpi	r24, 0xFF	; 255
    1c38:	09 f4       	brne	.+2      	; 0x1c3c <xQueueGenericSend+0xd2>
    1c3a:	16 8e       	std	Z+30, r1	; 0x1e
    1c3c:	0f 90       	pop	r0
    1c3e:	0f be       	out	0x3f, r0	; 63

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    1c40:	c5 01       	movw	r24, r10
    1c42:	b3 01       	movw	r22, r6
    1c44:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <xTaskCheckForTimeOut>
    1c48:	88 23       	and	r24, r24
    1c4a:	09 f5       	brne	.+66     	; 0x1c8e <xQueueGenericSend+0x124>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
    1c4c:	0f b6       	in	r0, 0x3f	; 63
    1c4e:	f8 94       	cli
    1c50:	0f 92       	push	r0
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
    1c52:	f8 01       	movw	r30, r16
    1c54:	92 8d       	ldd	r25, Z+26	; 0x1a
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
    1c56:	0f 90       	pop	r0
    1c58:	0f be       	out	0x3f, r0	; 63
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
    1c5a:	f8 01       	movw	r30, r16
    1c5c:	83 8d       	ldd	r24, Z+27	; 0x1b
    1c5e:	98 17       	cp	r25, r24
    1c60:	81 f4       	brne	.+32     	; 0x1c82 <xQueueGenericSend+0x118>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    1c62:	6c 81       	ldd	r22, Y+4	; 0x04
    1c64:	7d 81       	ldd	r23, Y+5	; 0x05
    1c66:	c7 01       	movw	r24, r14
    1c68:	0e 94 db 08 	call	0x11b6	; 0x11b6 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
    1c6c:	c8 01       	movw	r24, r16
    1c6e:	0e 94 b9 0c 	call	0x1972	; 0x1972 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
    1c72:	0e 94 d4 06 	call	0xda8	; 0xda8 <xTaskResumeAll>
    1c76:	88 23       	and	r24, r24
    1c78:	09 f0       	breq	.+2      	; 0x1c7c <xQueueGenericSend+0x112>
    1c7a:	9e cf       	rjmp	.-196    	; 0x1bb8 <xQueueGenericSend+0x4e>
				{
					portYIELD_WITHIN_API();
    1c7c:	0e 94 3d 12 	call	0x247a	; 0x247a <vPortYield>
    1c80:	9b cf       	rjmp	.-202    	; 0x1bb8 <xQueueGenericSend+0x4e>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    1c82:	c8 01       	movw	r24, r16
    1c84:	0e 94 b9 0c 	call	0x1972	; 0x1972 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    1c88:	0e 94 d4 06 	call	0xda8	; 0xda8 <xTaskResumeAll>
    1c8c:	95 cf       	rjmp	.-214    	; 0x1bb8 <xQueueGenericSend+0x4e>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
    1c8e:	c8 01       	movw	r24, r16
    1c90:	0e 94 b9 0c 	call	0x1972	; 0x1972 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    1c94:	0e 94 d4 06 	call	0xda8	; 0xda8 <xTaskResumeAll>
    1c98:	80 e0       	ldi	r24, 0x00	; 0

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
}
    1c9a:	0f 90       	pop	r0
    1c9c:	0f 90       	pop	r0
    1c9e:	0f 90       	pop	r0
    1ca0:	0f 90       	pop	r0
    1ca2:	0f 90       	pop	r0
    1ca4:	cf 91       	pop	r28
    1ca6:	df 91       	pop	r29
    1ca8:	1f 91       	pop	r17
    1caa:	0f 91       	pop	r16
    1cac:	ff 90       	pop	r15
    1cae:	ef 90       	pop	r14
    1cb0:	df 90       	pop	r13
    1cb2:	cf 90       	pop	r12
    1cb4:	bf 90       	pop	r11
    1cb6:	af 90       	pop	r10
    1cb8:	9f 90       	pop	r9
    1cba:	7f 90       	pop	r7
    1cbc:	6f 90       	pop	r6
    1cbe:	08 95       	ret

00001cc0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
    1cc0:	cf 93       	push	r28
    1cc2:	df 93       	push	r29
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    1cc4:	ec 01       	movw	r28, r24

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
    1cc6:	0f b6       	in	r0, 0x3f	; 63
    1cc8:	f8 94       	cli
    1cca:	0f 92       	push	r0
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
    1ccc:	ec 8d       	ldd	r30, Y+28	; 0x1c
    1cce:	2b 8d       	ldd	r18, Y+27	; 0x1b
    1cd0:	e2 9f       	mul	r30, r18
    1cd2:	c0 01       	movw	r24, r0
    1cd4:	11 24       	eor	r1, r1
    1cd6:	48 81       	ld	r20, Y
    1cd8:	59 81       	ldd	r21, Y+1	; 0x01
    1cda:	84 0f       	add	r24, r20
    1cdc:	95 1f       	adc	r25, r21
    1cde:	9b 83       	std	Y+3, r25	; 0x03
    1ce0:	8a 83       	std	Y+2, r24	; 0x02
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
    1ce2:	1a 8e       	std	Y+26, r1	; 0x1a
		pxQueue->pcWriteTo = pxQueue->pcHead;
    1ce4:	5d 83       	std	Y+5, r21	; 0x05
    1ce6:	4c 83       	std	Y+4, r20	; 0x04
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
    1ce8:	30 e0       	ldi	r19, 0x00	; 0
    1cea:	21 50       	subi	r18, 0x01	; 1
    1cec:	30 40       	sbci	r19, 0x00	; 0
    1cee:	f0 e0       	ldi	r31, 0x00	; 0
    1cf0:	2e 9f       	mul	r18, r30
    1cf2:	c0 01       	movw	r24, r0
    1cf4:	2f 9f       	mul	r18, r31
    1cf6:	90 0d       	add	r25, r0
    1cf8:	3e 9f       	mul	r19, r30
    1cfa:	90 0d       	add	r25, r0
    1cfc:	11 24       	eor	r1, r1
    1cfe:	48 0f       	add	r20, r24
    1d00:	59 1f       	adc	r21, r25
    1d02:	5f 83       	std	Y+7, r21	; 0x07
    1d04:	4e 83       	std	Y+6, r20	; 0x06
		pxQueue->cRxLock = queueUNLOCKED;
    1d06:	8f ef       	ldi	r24, 0xFF	; 255
    1d08:	8d 8f       	std	Y+29, r24	; 0x1d
		pxQueue->cTxLock = queueUNLOCKED;
    1d0a:	8e 8f       	std	Y+30, r24	; 0x1e

		if( xNewQueue == pdFALSE )
    1d0c:	66 23       	and	r22, r22
    1d0e:	61 f4       	brne	.+24     	; 0x1d28 <xQueueGenericReset+0x68>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    1d10:	88 85       	ldd	r24, Y+8	; 0x08
    1d12:	88 23       	and	r24, r24
    1d14:	89 f0       	breq	.+34     	; 0x1d38 <xQueueGenericReset+0x78>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    1d16:	ce 01       	movw	r24, r28
    1d18:	08 96       	adiw	r24, 0x08	; 8
    1d1a:	0e 94 61 05 	call	0xac2	; 0xac2 <xTaskRemoveFromEventList>
    1d1e:	88 23       	and	r24, r24
    1d20:	59 f0       	breq	.+22     	; 0x1d38 <xQueueGenericReset+0x78>
				{
					queueYIELD_IF_USING_PREEMPTION();
    1d22:	0e 94 3d 12 	call	0x247a	; 0x247a <vPortYield>
    1d26:	08 c0       	rjmp	.+16     	; 0x1d38 <xQueueGenericReset+0x78>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
    1d28:	ce 01       	movw	r24, r28
    1d2a:	08 96       	adiw	r24, 0x08	; 8
    1d2c:	0e 94 ca 0e 	call	0x1d94	; 0x1d94 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
    1d30:	ce 01       	movw	r24, r28
    1d32:	41 96       	adiw	r24, 0x11	; 17
    1d34:	0e 94 ca 0e 	call	0x1d94	; 0x1d94 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
    1d38:	0f 90       	pop	r0
    1d3a:	0f be       	out	0x3f, r0	; 63

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
}
    1d3c:	81 e0       	ldi	r24, 0x01	; 1
    1d3e:	df 91       	pop	r29
    1d40:	cf 91       	pop	r28
    1d42:	08 95       	ret

00001d44 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
    1d44:	0f 93       	push	r16
    1d46:	1f 93       	push	r17
    1d48:	cf 93       	push	r28
    1d4a:	df 93       	push	r29
    1d4c:	08 2f       	mov	r16, r24
    1d4e:	16 2f       	mov	r17, r22
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );

		if( uxItemSize == ( UBaseType_t ) 0 )
    1d50:	66 23       	and	r22, r22
    1d52:	19 f4       	brne	.+6      	; 0x1d5a <xQueueGenericCreate+0x16>
    1d54:	80 e0       	ldi	r24, 0x00	; 0
    1d56:	90 e0       	ldi	r25, 0x00	; 0
    1d58:	03 c0       	rjmp	.+6      	; 0x1d60 <xQueueGenericCreate+0x1c>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    1d5a:	68 9f       	mul	r22, r24
    1d5c:	c0 01       	movw	r24, r0
    1d5e:	11 24       	eor	r1, r1
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
    1d60:	4f 96       	adiw	r24, 0x1f	; 31
    1d62:	0e 94 28 11 	call	0x2250	; 0x2250 <pvPortMalloc>
    1d66:	ec 01       	movw	r28, r24

		if( pxNewQueue != NULL )
    1d68:	00 97       	sbiw	r24, 0x00	; 0
    1d6a:	71 f0       	breq	.+28     	; 0x1d88 <xQueueGenericCreate+0x44>
{
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
    1d6c:	11 23       	and	r17, r17
    1d6e:	19 f4       	brne	.+6      	; 0x1d76 <xQueueGenericCreate+0x32>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
    1d70:	99 83       	std	Y+1, r25	; 0x01
    1d72:	88 83       	st	Y, r24
    1d74:	03 c0       	rjmp	.+6      	; 0x1d7c <xQueueGenericCreate+0x38>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
    1d76:	4f 96       	adiw	r24, 0x1f	; 31
    1d78:	99 83       	std	Y+1, r25	; 0x01
    1d7a:	88 83       	st	Y, r24
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
    1d7c:	0b 8f       	std	Y+27, r16	; 0x1b
	pxNewQueue->uxItemSize = uxItemSize;
    1d7e:	1c 8f       	std	Y+28, r17	; 0x1c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
    1d80:	ce 01       	movw	r24, r28
    1d82:	61 e0       	ldi	r22, 0x01	; 1
    1d84:	0e 94 60 0e 	call	0x1cc0	; 0x1cc0 <xQueueGenericReset>

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
		}

		return pxNewQueue;
	}
    1d88:	ce 01       	movw	r24, r28
    1d8a:	df 91       	pop	r29
    1d8c:	cf 91       	pop	r28
    1d8e:	1f 91       	pop	r17
    1d90:	0f 91       	pop	r16
    1d92:	08 95       	ret

00001d94 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
    1d94:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1d96:	9c 01       	movw	r18, r24
    1d98:	2d 5f       	subi	r18, 0xFD	; 253
    1d9a:	3f 4f       	sbci	r19, 0xFF	; 255
    1d9c:	32 83       	std	Z+2, r19	; 0x02
    1d9e:	21 83       	std	Z+1, r18	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    1da0:	8f ef       	ldi	r24, 0xFF	; 255
    1da2:	9f ef       	ldi	r25, 0xFF	; 255
    1da4:	94 83       	std	Z+4, r25	; 0x04
    1da6:	83 83       	std	Z+3, r24	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1da8:	36 83       	std	Z+6, r19	; 0x06
    1daa:	25 83       	std	Z+5, r18	; 0x05
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1dac:	30 87       	std	Z+8, r19	; 0x08
    1dae:	27 83       	std	Z+7, r18	; 0x07

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    1db0:	10 82       	st	Z, r1

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
    1db2:	08 95       	ret

00001db4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    1db4:	fc 01       	movw	r30, r24
    1db6:	11 86       	std	Z+9, r1	; 0x09
    1db8:	10 86       	std	Z+8, r1	; 0x08

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
    1dba:	08 95       	ret

00001dbc <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    1dbc:	ac 01       	movw	r20, r24
ListItem_t * const pxIndex = pxList->pxIndex;
    1dbe:	fc 01       	movw	r30, r24
    1dc0:	a1 81       	ldd	r26, Z+1	; 0x01
    1dc2:	b2 81       	ldd	r27, Z+2	; 0x02
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
    1dc4:	fb 01       	movw	r30, r22
    1dc6:	b3 83       	std	Z+3, r27	; 0x03
    1dc8:	a2 83       	std	Z+2, r26	; 0x02
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    1dca:	14 96       	adiw	r26, 0x04	; 4
    1dcc:	8d 91       	ld	r24, X+
    1dce:	9c 91       	ld	r25, X
    1dd0:	15 97       	sbiw	r26, 0x05	; 5
    1dd2:	95 83       	std	Z+5, r25	; 0x05
    1dd4:	84 83       	std	Z+4, r24	; 0x04

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
    1dd6:	14 96       	adiw	r26, 0x04	; 4
    1dd8:	ed 91       	ld	r30, X+
    1dda:	fc 91       	ld	r31, X
    1ddc:	15 97       	sbiw	r26, 0x05	; 5
    1dde:	73 83       	std	Z+3, r23	; 0x03
    1de0:	62 83       	std	Z+2, r22	; 0x02
	pxIndex->pxPrevious = pxNewListItem;
    1de2:	15 96       	adiw	r26, 0x05	; 5
    1de4:	7c 93       	st	X, r23
    1de6:	6e 93       	st	-X, r22
    1de8:	14 97       	sbiw	r26, 0x04	; 4

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    1dea:	fb 01       	movw	r30, r22
    1dec:	51 87       	std	Z+9, r21	; 0x09
    1dee:	40 87       	std	Z+8, r20	; 0x08

	( pxList->uxNumberOfItems )++;
    1df0:	fa 01       	movw	r30, r20
    1df2:	80 81       	ld	r24, Z
    1df4:	8f 5f       	subi	r24, 0xFF	; 255
    1df6:	80 83       	st	Z, r24
}
    1df8:	08 95       	ret

00001dfa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    1dfa:	cf 93       	push	r28
    1dfc:	df 93       	push	r29
    1dfe:	9c 01       	movw	r18, r24
    1e00:	eb 01       	movw	r28, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    1e02:	48 81       	ld	r20, Y
    1e04:	59 81       	ldd	r21, Y+1	; 0x01
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    1e06:	8f ef       	ldi	r24, 0xFF	; 255
    1e08:	4f 3f       	cpi	r20, 0xFF	; 255
    1e0a:	58 07       	cpc	r21, r24
    1e0c:	21 f4       	brne	.+8      	; 0x1e16 <vListInsert+0x1c>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    1e0e:	f9 01       	movw	r30, r18
    1e10:	a7 81       	ldd	r26, Z+7	; 0x07
    1e12:	b0 85       	ldd	r27, Z+8	; 0x08
    1e14:	0d c0       	rjmp	.+26     	; 0x1e30 <vListInsert+0x36>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1e16:	d9 01       	movw	r26, r18
    1e18:	13 96       	adiw	r26, 0x03	; 3
    1e1a:	12 96       	adiw	r26, 0x02	; 2
    1e1c:	ed 91       	ld	r30, X+
    1e1e:	fc 91       	ld	r31, X
    1e20:	13 97       	sbiw	r26, 0x03	; 3
    1e22:	80 81       	ld	r24, Z
    1e24:	91 81       	ldd	r25, Z+1	; 0x01
    1e26:	48 17       	cp	r20, r24
    1e28:	59 07       	cpc	r21, r25
    1e2a:	10 f0       	brcs	.+4      	; 0x1e30 <vListInsert+0x36>
    1e2c:	df 01       	movw	r26, r30
    1e2e:	f5 cf       	rjmp	.-22     	; 0x1e1a <vListInsert+0x20>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    1e30:	12 96       	adiw	r26, 0x02	; 2
    1e32:	ed 91       	ld	r30, X+
    1e34:	fc 91       	ld	r31, X
    1e36:	13 97       	sbiw	r26, 0x03	; 3
    1e38:	fb 83       	std	Y+3, r31	; 0x03
    1e3a:	ea 83       	std	Y+2, r30	; 0x02
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    1e3c:	d5 83       	std	Z+5, r29	; 0x05
    1e3e:	c4 83       	std	Z+4, r28	; 0x04
	pxNewListItem->pxPrevious = pxIterator;
    1e40:	bd 83       	std	Y+5, r27	; 0x05
    1e42:	ac 83       	std	Y+4, r26	; 0x04
	pxIterator->pxNext = pxNewListItem;
    1e44:	13 96       	adiw	r26, 0x03	; 3
    1e46:	dc 93       	st	X, r29
    1e48:	ce 93       	st	-X, r28
    1e4a:	12 97       	sbiw	r26, 0x02	; 2

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    1e4c:	39 87       	std	Y+9, r19	; 0x09
    1e4e:	28 87       	std	Y+8, r18	; 0x08

	( pxList->uxNumberOfItems )++;
    1e50:	f9 01       	movw	r30, r18
    1e52:	80 81       	ld	r24, Z
    1e54:	8f 5f       	subi	r24, 0xFF	; 255
    1e56:	80 83       	st	Z, r24
}
    1e58:	df 91       	pop	r29
    1e5a:	cf 91       	pop	r28
    1e5c:	08 95       	ret

00001e5e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    1e5e:	cf 93       	push	r28
    1e60:	df 93       	push	r29
    1e62:	dc 01       	movw	r26, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
    1e64:	18 96       	adiw	r26, 0x08	; 8
    1e66:	cd 91       	ld	r28, X+
    1e68:	dc 91       	ld	r29, X
    1e6a:	19 97       	sbiw	r26, 0x09	; 9

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    1e6c:	12 96       	adiw	r26, 0x02	; 2
    1e6e:	4d 91       	ld	r20, X+
    1e70:	5c 91       	ld	r21, X
    1e72:	13 97       	sbiw	r26, 0x03	; 3
    1e74:	14 96       	adiw	r26, 0x04	; 4
    1e76:	8d 91       	ld	r24, X+
    1e78:	9c 91       	ld	r25, X
    1e7a:	15 97       	sbiw	r26, 0x05	; 5
    1e7c:	fa 01       	movw	r30, r20
    1e7e:	95 83       	std	Z+5, r25	; 0x05
    1e80:	84 83       	std	Z+4, r24	; 0x04
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    1e82:	14 96       	adiw	r26, 0x04	; 4
    1e84:	2d 91       	ld	r18, X+
    1e86:	3c 91       	ld	r19, X
    1e88:	15 97       	sbiw	r26, 0x05	; 5
    1e8a:	f9 01       	movw	r30, r18
    1e8c:	53 83       	std	Z+3, r21	; 0x03
    1e8e:	42 83       	std	Z+2, r20	; 0x02

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    1e90:	89 81       	ldd	r24, Y+1	; 0x01
    1e92:	9a 81       	ldd	r25, Y+2	; 0x02
    1e94:	8a 17       	cp	r24, r26
    1e96:	9b 07       	cpc	r25, r27
    1e98:	11 f4       	brne	.+4      	; 0x1e9e <uxListRemove+0x40>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    1e9a:	3a 83       	std	Y+2, r19	; 0x02
    1e9c:	29 83       	std	Y+1, r18	; 0x01
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
    1e9e:	19 96       	adiw	r26, 0x09	; 9
    1ea0:	1c 92       	st	X, r1
    1ea2:	1e 92       	st	-X, r1
    1ea4:	18 97       	sbiw	r26, 0x08	; 8
	( pxList->uxNumberOfItems )--;
    1ea6:	88 81       	ld	r24, Y
    1ea8:	81 50       	subi	r24, 0x01	; 1
    1eaa:	88 83       	st	Y, r24

	return pxList->uxNumberOfItems;
}
    1eac:	df 91       	pop	r29
    1eae:	cf 91       	pop	r28
    1eb0:	08 95       	ret

00001eb2 <xCoRoutineRemoveFromEventList>:
	pxOverflowDelayedCoRoutineList = &xDelayedCoRoutineList2;
}
/*-----------------------------------------------------------*/

BaseType_t xCoRoutineRemoveFromEventList( const List_t *pxEventList )
{
    1eb2:	ef 92       	push	r14
    1eb4:	ff 92       	push	r15
    1eb6:	0f 93       	push	r16
    1eb8:	1f 93       	push	r17
BaseType_t xReturn;

	/* This function is called from within an interrupt.  It can only access
	event lists and the pending ready list.  This function assumes that a
	check has already been made to ensure pxEventList is not empty. */
	pxUnblockedCRCB = ( CRCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    1eba:	dc 01       	movw	r26, r24
    1ebc:	15 96       	adiw	r26, 0x05	; 5
    1ebe:	ed 91       	ld	r30, X+
    1ec0:	fc 91       	ld	r31, X
    1ec2:	16 97       	sbiw	r26, 0x06	; 6
    1ec4:	e6 80       	ldd	r14, Z+6	; 0x06
    1ec6:	f7 80       	ldd	r15, Z+7	; 0x07
	( void ) uxListRemove( &( pxUnblockedCRCB->xEventListItem ) );
    1ec8:	87 01       	movw	r16, r14
    1eca:	04 5f       	subi	r16, 0xF4	; 244
    1ecc:	1f 4f       	sbci	r17, 0xFF	; 255
    1ece:	c8 01       	movw	r24, r16
    1ed0:	0e 94 2f 0f 	call	0x1e5e	; 0x1e5e <uxListRemove>
	vListInsertEnd( ( List_t * ) &( xPendingReadyCoRoutineList ), &( pxUnblockedCRCB->xEventListItem ) );
    1ed4:	84 ee       	ldi	r24, 0xE4	; 228
    1ed6:	91 e0       	ldi	r25, 0x01	; 1
    1ed8:	b8 01       	movw	r22, r16
    1eda:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <vListInsertEnd>
    1ede:	20 e0       	ldi	r18, 0x00	; 0
    1ee0:	e0 91 b3 01 	lds	r30, 0x01B3
    1ee4:	f0 91 b4 01 	lds	r31, 0x01B4
    1ee8:	d7 01       	movw	r26, r14
    1eea:	56 96       	adiw	r26, 0x16	; 22
    1eec:	9c 91       	ld	r25, X
    1eee:	86 89       	ldd	r24, Z+22	; 0x16
    1ef0:	98 17       	cp	r25, r24
    1ef2:	08 f0       	brcs	.+2      	; 0x1ef6 <xCoRoutineRemoveFromEventList+0x44>
    1ef4:	21 e0       	ldi	r18, 0x01	; 1
	{
		xReturn = pdFALSE;
	}

	return xReturn;
}
    1ef6:	82 2f       	mov	r24, r18
    1ef8:	1f 91       	pop	r17
    1efa:	0f 91       	pop	r16
    1efc:	ff 90       	pop	r15
    1efe:	ef 90       	pop	r14
    1f00:	08 95       	ret

00001f02 <vCoRoutineSchedule>:
	xLastTickCount = xCoRoutineTickCount;
}
/*-----------------------------------------------------------*/

void vCoRoutineSchedule( void )
{
    1f02:	ff 92       	push	r15
    1f04:	0f 93       	push	r16
    1f06:	1f 93       	push	r17
    1f08:	cf 93       	push	r28
    1f0a:	df 93       	push	r29
			( void ) uxListRemove( &( pxUnblockedCRCB->xEventListItem ) );
		}
		portENABLE_INTERRUPTS();

		( void ) uxListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );
    1f0c:	99 e0       	ldi	r25, 0x09	; 9
    1f0e:	f9 2e       	mov	r15, r25
    1f10:	21 c0       	rjmp	.+66     	; 0x1f54 <vCoRoutineSchedule+0x52>
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
	{
		CRCB_t *pxUnblockedCRCB;

		/* The pending ready list can be accessed by an ISR. */
		portDISABLE_INTERRUPTS();
    1f12:	f8 94       	cli
		{
			pxUnblockedCRCB = ( CRCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( (&xPendingReadyCoRoutineList) );
    1f14:	e0 91 e9 01 	lds	r30, 0x01E9
    1f18:	f0 91 ea 01 	lds	r31, 0x01EA
    1f1c:	06 81       	ldd	r16, Z+6	; 0x06
    1f1e:	17 81       	ldd	r17, Z+7	; 0x07
			( void ) uxListRemove( &( pxUnblockedCRCB->xEventListItem ) );
    1f20:	c8 01       	movw	r24, r16
    1f22:	0c 96       	adiw	r24, 0x0c	; 12
    1f24:	0e 94 2f 0f 	call	0x1e5e	; 0x1e5e <uxListRemove>
		}
		portENABLE_INTERRUPTS();
    1f28:	78 94       	sei

		( void ) uxListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
    1f2a:	e8 01       	movw	r28, r16
    1f2c:	22 96       	adiw	r28, 0x02	; 2
    1f2e:	ce 01       	movw	r24, r28
    1f30:	0e 94 2f 0f 	call	0x1e5e	; 0x1e5e <uxListRemove>
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );
    1f34:	f8 01       	movw	r30, r16
    1f36:	96 89       	ldd	r25, Z+22	; 0x16
    1f38:	80 91 b5 01 	lds	r24, 0x01B5
    1f3c:	89 17       	cp	r24, r25
    1f3e:	10 f4       	brcc	.+4      	; 0x1f44 <vCoRoutineSchedule+0x42>
    1f40:	90 93 b5 01 	sts	0x01B5, r25
    1f44:	9f 9d       	mul	r25, r15
    1f46:	c0 01       	movw	r24, r0
    1f48:	11 24       	eor	r1, r1
    1f4a:	84 54       	subi	r24, 0x44	; 68
    1f4c:	9e 4f       	sbci	r25, 0xFE	; 254
    1f4e:	be 01       	movw	r22, r28
    1f50:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <vListInsertEnd>
static void prvCheckPendingReadyList( void )
{
	/* Are there any co-routines waiting to get moved to the ready list?  These
	are co-routines that have been readied by an ISR.  The ISR cannot access
	the	ready lists itself. */
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
    1f54:	80 91 e4 01 	lds	r24, 0x01E4
    1f58:	88 23       	and	r24, r24
    1f5a:	d9 f6       	brne	.-74     	; 0x1f12 <vCoRoutineSchedule+0x10>

static void prvCheckDelayedList( void )
{
CRCB_t *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
    1f5c:	0e 94 98 03 	call	0x730	; 0x730 <xTaskGetTickCount>
    1f60:	20 91 b6 01 	lds	r18, 0x01B6
    1f64:	30 91 b7 01 	lds	r19, 0x01B7
    1f68:	82 1b       	sub	r24, r18
    1f6a:	93 0b       	sbc	r25, r19
    1f6c:	90 93 b9 01 	sts	0x01B9, r25
    1f70:	80 93 b8 01 	sts	0x01B8, r24
					( void ) uxListRemove( &( pxCRCB->xEventListItem ) );
				}
			}
			portENABLE_INTERRUPTS();

			prvAddCoRoutineToReadyQueue( pxCRCB );
    1f74:	89 e0       	ldi	r24, 0x09	; 9
    1f76:	f8 2e       	mov	r15, r24
    1f78:	53 c0       	rjmp	.+166    	; 0x2020 <vCoRoutineSchedule+0x11e>
CRCB_t *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
	while( xPassedTicks )
	{
		xCoRoutineTickCount++;
    1f7a:	01 96       	adiw	r24, 0x01	; 1
    1f7c:	90 93 bb 01 	sts	0x01BB, r25
    1f80:	80 93 ba 01 	sts	0x01BA, r24
		xPassedTicks--;
    1f84:	21 50       	subi	r18, 0x01	; 1
    1f86:	30 40       	sbci	r19, 0x00	; 0
    1f88:	30 93 b9 01 	sts	0x01B9, r19
    1f8c:	20 93 b8 01 	sts	0x01B8, r18

		/* If the tick count has overflowed we need to swap the ready lists. */
		if( xCoRoutineTickCount == 0 )
    1f90:	89 2b       	or	r24, r25
    1f92:	09 f0       	breq	.+2      	; 0x1f96 <vCoRoutineSchedule+0x94>
    1f94:	3e c0       	rjmp	.+124    	; 0x2012 <vCoRoutineSchedule+0x110>
		{
			List_t * pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.  If there are
			any items in pxDelayedCoRoutineList here then there is an error! */
			pxTemp = pxDelayedCoRoutineList;
    1f96:	20 91 e0 01 	lds	r18, 0x01E0
    1f9a:	30 91 e1 01 	lds	r19, 0x01E1
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
    1f9e:	80 91 e2 01 	lds	r24, 0x01E2
    1fa2:	90 91 e3 01 	lds	r25, 0x01E3
    1fa6:	90 93 e1 01 	sts	0x01E1, r25
    1faa:	80 93 e0 01 	sts	0x01E0, r24
			pxOverflowDelayedCoRoutineList = pxTemp;
    1fae:	30 93 e3 01 	sts	0x01E3, r19
    1fb2:	20 93 e2 01 	sts	0x01E2, r18
    1fb6:	2d c0       	rjmp	.+90     	; 0x2012 <vCoRoutineSchedule+0x110>
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
		{
			pxCRCB = ( CRCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedCoRoutineList );
    1fb8:	05 80       	ldd	r0, Z+5	; 0x05
    1fba:	f6 81       	ldd	r31, Z+6	; 0x06
    1fbc:	e0 2d       	mov	r30, r0
    1fbe:	c6 81       	ldd	r28, Z+6	; 0x06
    1fc0:	d7 81       	ldd	r29, Z+7	; 0x07

			if( xCoRoutineTickCount < listGET_LIST_ITEM_VALUE( &( pxCRCB->xGenericListItem ) ) )
    1fc2:	20 91 ba 01 	lds	r18, 0x01BA
    1fc6:	30 91 bb 01 	lds	r19, 0x01BB
    1fca:	8a 81       	ldd	r24, Y+2	; 0x02
    1fcc:	9b 81       	ldd	r25, Y+3	; 0x03
    1fce:	28 17       	cp	r18, r24
    1fd0:	39 07       	cpc	r19, r25
    1fd2:	30 f1       	brcs	.+76     	; 0x2020 <vCoRoutineSchedule+0x11e>
			{
				/* Timeout not yet expired. */
				break;
			}

			portDISABLE_INTERRUPTS();
    1fd4:	f8 94       	cli
				/* The event could have occurred just before this critical
				section.  If this is the case then the generic list item will
				have been moved to the pending ready list and the following
				line is still valid.  Also the pvContainer parameter will have
				been set to NULL so the following lines are also valid. */
				( void ) uxListRemove( &( pxCRCB->xGenericListItem ) );
    1fd6:	8e 01       	movw	r16, r28
    1fd8:	0e 5f       	subi	r16, 0xFE	; 254
    1fda:	1f 4f       	sbci	r17, 0xFF	; 255
    1fdc:	c8 01       	movw	r24, r16
    1fde:	0e 94 2f 0f 	call	0x1e5e	; 0x1e5e <uxListRemove>

				/* Is the co-routine waiting on an event also? */
				if( pxCRCB->xEventListItem.pvContainer )
    1fe2:	8c 89       	ldd	r24, Y+20	; 0x14
    1fe4:	9d 89       	ldd	r25, Y+21	; 0x15
    1fe6:	89 2b       	or	r24, r25
    1fe8:	21 f0       	breq	.+8      	; 0x1ff2 <vCoRoutineSchedule+0xf0>
				{
					( void ) uxListRemove( &( pxCRCB->xEventListItem ) );
    1fea:	ce 01       	movw	r24, r28
    1fec:	0c 96       	adiw	r24, 0x0c	; 12
    1fee:	0e 94 2f 0f 	call	0x1e5e	; 0x1e5e <uxListRemove>
				}
			}
			portENABLE_INTERRUPTS();
    1ff2:	78 94       	sei

			prvAddCoRoutineToReadyQueue( pxCRCB );
    1ff4:	9e 89       	ldd	r25, Y+22	; 0x16
    1ff6:	80 91 b5 01 	lds	r24, 0x01B5
    1ffa:	89 17       	cp	r24, r25
    1ffc:	10 f4       	brcc	.+4      	; 0x2002 <vCoRoutineSchedule+0x100>
    1ffe:	90 93 b5 01 	sts	0x01B5, r25
    2002:	9f 9d       	mul	r25, r15
    2004:	c0 01       	movw	r24, r0
    2006:	11 24       	eor	r1, r1
    2008:	84 54       	subi	r24, 0x44	; 68
    200a:	9e 4f       	sbci	r25, 0xFE	; 254
    200c:	b8 01       	movw	r22, r16
    200e:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <vListInsertEnd>
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
			pxOverflowDelayedCoRoutineList = pxTemp;
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
    2012:	e0 91 e0 01 	lds	r30, 0x01E0
    2016:	f0 91 e1 01 	lds	r31, 0x01E1
    201a:	80 81       	ld	r24, Z
    201c:	88 23       	and	r24, r24
    201e:	61 f6       	brne	.-104    	; 0x1fb8 <vCoRoutineSchedule+0xb6>
static void prvCheckDelayedList( void )
{
CRCB_t *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
	while( xPassedTicks )
    2020:	20 91 b8 01 	lds	r18, 0x01B8
    2024:	30 91 b9 01 	lds	r19, 0x01B9
    2028:	80 91 ba 01 	lds	r24, 0x01BA
    202c:	90 91 bb 01 	lds	r25, 0x01BB
    2030:	21 15       	cp	r18, r1
    2032:	31 05       	cpc	r19, r1
    2034:	09 f0       	breq	.+2      	; 0x2038 <vCoRoutineSchedule+0x136>
    2036:	a1 cf       	rjmp	.-190    	; 0x1f7a <vCoRoutineSchedule+0x78>

			prvAddCoRoutineToReadyQueue( pxCRCB );
		}
	}

	xLastTickCount = xCoRoutineTickCount;
    2038:	90 93 b7 01 	sts	0x01B7, r25
    203c:	80 93 b6 01 	sts	0x01B6, r24
    2040:	90 91 b5 01 	lds	r25, 0x01B5

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
    2044:	29 e0       	ldi	r18, 0x09	; 9
    2046:	06 c0       	rjmp	.+12     	; 0x2054 <vCoRoutineSchedule+0x152>
	{
		if( uxTopCoRoutineReadyPriority == 0 )
    2048:	99 23       	and	r25, r25
    204a:	19 f4       	brne	.+6      	; 0x2052 <vCoRoutineSchedule+0x150>
    204c:	10 92 b5 01 	sts	0x01B5, r1
    2050:	32 c0       	rjmp	.+100    	; 0x20b6 <vCoRoutineSchedule+0x1b4>
    2052:	91 50       	subi	r25, 0x01	; 1

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
    2054:	92 9f       	mul	r25, r18
    2056:	d0 01       	movw	r26, r0
    2058:	11 24       	eor	r1, r1
    205a:	a4 54       	subi	r26, 0x44	; 68
    205c:	be 4f       	sbci	r27, 0xFE	; 254
    205e:	8c 91       	ld	r24, X
    2060:	88 23       	and	r24, r24
    2062:	91 f3       	breq	.-28     	; 0x2048 <vCoRoutineSchedule+0x146>
    2064:	90 93 b5 01 	sts	0x01B5, r25
		--uxTopCoRoutineReadyPriority;
	}

	/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the co-routines
	 of the	same priority get an equal share of the processor time. */
	listGET_OWNER_OF_NEXT_ENTRY( pxCurrentCoRoutine, &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) );
    2068:	11 96       	adiw	r26, 0x01	; 1
    206a:	ed 91       	ld	r30, X+
    206c:	fc 91       	ld	r31, X
    206e:	12 97       	sbiw	r26, 0x02	; 2
    2070:	02 80       	ldd	r0, Z+2	; 0x02
    2072:	f3 81       	ldd	r31, Z+3	; 0x03
    2074:	e0 2d       	mov	r30, r0
    2076:	12 96       	adiw	r26, 0x02	; 2
    2078:	fc 93       	st	X, r31
    207a:	ee 93       	st	-X, r30
    207c:	11 97       	sbiw	r26, 0x01	; 1
    207e:	cd 01       	movw	r24, r26
    2080:	03 96       	adiw	r24, 0x03	; 3
    2082:	e8 17       	cp	r30, r24
    2084:	f9 07       	cpc	r31, r25
    2086:	31 f4       	brne	.+12     	; 0x2094 <vCoRoutineSchedule+0x192>
    2088:	82 81       	ldd	r24, Z+2	; 0x02
    208a:	93 81       	ldd	r25, Z+3	; 0x03
    208c:	12 96       	adiw	r26, 0x02	; 2
    208e:	9c 93       	st	X, r25
    2090:	8e 93       	st	-X, r24
    2092:	11 97       	sbiw	r26, 0x01	; 1
    2094:	11 96       	adiw	r26, 0x01	; 1
    2096:	ed 91       	ld	r30, X+
    2098:	fc 91       	ld	r31, X
    209a:	12 97       	sbiw	r26, 0x02	; 2
    209c:	06 80       	ldd	r0, Z+6	; 0x06
    209e:	f7 81       	ldd	r31, Z+7	; 0x07
    20a0:	e0 2d       	mov	r30, r0
    20a2:	f0 93 b4 01 	sts	0x01B4, r31
    20a6:	e0 93 b3 01 	sts	0x01B3, r30

	/* Call the co-routine. */
	( pxCurrentCoRoutine->pxCoRoutineFunction )( pxCurrentCoRoutine, pxCurrentCoRoutine->uxIndex );
    20aa:	20 81       	ld	r18, Z
    20ac:	31 81       	ldd	r19, Z+1	; 0x01
    20ae:	cf 01       	movw	r24, r30
    20b0:	67 89       	ldd	r22, Z+23	; 0x17
    20b2:	f9 01       	movw	r30, r18
    20b4:	09 95       	icall

	return;
}
    20b6:	df 91       	pop	r29
    20b8:	cf 91       	pop	r28
    20ba:	1f 91       	pop	r17
    20bc:	0f 91       	pop	r16
    20be:	ff 90       	pop	r15
    20c0:	08 95       	ret

000020c2 <vCoRoutineAddToDelayedList>:
	return xReturn;
}
/*-----------------------------------------------------------*/

void vCoRoutineAddToDelayedList( TickType_t xTicksToDelay, List_t *pxEventList )
{
    20c2:	0f 93       	push	r16
    20c4:	1f 93       	push	r17
    20c6:	cf 93       	push	r28
    20c8:	df 93       	push	r29
    20ca:	eb 01       	movw	r28, r22
TickType_t xTimeToWake;

	/* Calculate the time to wake - this may overflow but this is
	not a problem. */
	xTimeToWake = xCoRoutineTickCount + xTicksToDelay;
    20cc:	00 91 ba 01 	lds	r16, 0x01BA
    20d0:	10 91 bb 01 	lds	r17, 0x01BB
    20d4:	08 0f       	add	r16, r24
    20d6:	19 1f       	adc	r17, r25

	/* We must remove ourselves from the ready list before adding
	ourselves to the blocked list as the same list item is used for
	both lists. */
	( void ) uxListRemove( ( ListItem_t * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    20d8:	80 91 b3 01 	lds	r24, 0x01B3
    20dc:	90 91 b4 01 	lds	r25, 0x01B4
    20e0:	02 96       	adiw	r24, 0x02	; 2
    20e2:	0e 94 2f 0f 	call	0x1e5e	; 0x1e5e <uxListRemove>

	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentCoRoutine->xGenericListItem ), xTimeToWake );
    20e6:	e0 91 b3 01 	lds	r30, 0x01B3
    20ea:	f0 91 b4 01 	lds	r31, 0x01B4
    20ee:	13 83       	std	Z+3, r17	; 0x03
    20f0:	02 83       	std	Z+2, r16	; 0x02

	if( xTimeToWake < xCoRoutineTickCount )
    20f2:	80 91 ba 01 	lds	r24, 0x01BA
    20f6:	90 91 bb 01 	lds	r25, 0x01BB
    20fa:	bf 01       	movw	r22, r30
    20fc:	6e 5f       	subi	r22, 0xFE	; 254
    20fe:	7f 4f       	sbci	r23, 0xFF	; 255
    2100:	08 17       	cp	r16, r24
    2102:	19 07       	cpc	r17, r25
    2104:	28 f4       	brcc	.+10     	; 0x2110 <vCoRoutineAddToDelayedList+0x4e>
	{
		/* Wake time has overflowed.  Place this item in the
		overflow list. */
		vListInsert( ( List_t * ) pxOverflowDelayedCoRoutineList, ( ListItem_t * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    2106:	80 91 e2 01 	lds	r24, 0x01E2
    210a:	90 91 e3 01 	lds	r25, 0x01E3
    210e:	04 c0       	rjmp	.+8      	; 0x2118 <vCoRoutineAddToDelayedList+0x56>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the
		current block list. */
		vListInsert( ( List_t * ) pxDelayedCoRoutineList, ( ListItem_t * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    2110:	80 91 e0 01 	lds	r24, 0x01E0
    2114:	90 91 e1 01 	lds	r25, 0x01E1
    2118:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <vListInsert>
	}

	if( pxEventList )
    211c:	20 97       	sbiw	r28, 0x00	; 0
    211e:	49 f0       	breq	.+18     	; 0x2132 <vCoRoutineAddToDelayedList+0x70>
	{
		/* Also add the co-routine to an event list.  If this is done then the
		function must be called with interrupts disabled. */
		vListInsert( pxEventList, &( pxCurrentCoRoutine->xEventListItem ) );
    2120:	60 91 b3 01 	lds	r22, 0x01B3
    2124:	70 91 b4 01 	lds	r23, 0x01B4
    2128:	64 5f       	subi	r22, 0xF4	; 244
    212a:	7f 4f       	sbci	r23, 0xFF	; 255
    212c:	ce 01       	movw	r24, r28
    212e:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <vListInsert>
	}
}
    2132:	df 91       	pop	r29
    2134:	cf 91       	pop	r28
    2136:	1f 91       	pop	r17
    2138:	0f 91       	pop	r16
    213a:	08 95       	ret

0000213c <xCoRoutineCreate>:
static void prvCheckDelayedList( void );

/*-----------------------------------------------------------*/

BaseType_t xCoRoutineCreate( crCOROUTINE_CODE pxCoRoutineCode, UBaseType_t uxPriority, UBaseType_t uxIndex )
{
    213c:	af 92       	push	r10
    213e:	bf 92       	push	r11
    2140:	cf 92       	push	r12
    2142:	df 92       	push	r13
    2144:	ef 92       	push	r14
    2146:	ff 92       	push	r15
    2148:	0f 93       	push	r16
    214a:	1f 93       	push	r17
    214c:	cf 93       	push	r28
    214e:	df 93       	push	r29
    2150:	6c 01       	movw	r12, r24
    2152:	b6 2e       	mov	r11, r22
    2154:	a4 2e       	mov	r10, r20
BaseType_t xReturn;
CRCB_t *pxCoRoutine;

	/* Allocate the memory that will store the co-routine control block. */
	pxCoRoutine = ( CRCB_t * ) pvPortMalloc( sizeof( CRCB_t ) );
    2156:	8a e1       	ldi	r24, 0x1A	; 26
    2158:	90 e0       	ldi	r25, 0x00	; 0
    215a:	0e 94 28 11 	call	0x2250	; 0x2250 <pvPortMalloc>
    215e:	ec 01       	movw	r28, r24
	if( pxCoRoutine )
    2160:	00 97       	sbiw	r24, 0x00	; 0
    2162:	11 f4       	brne	.+4      	; 0x2168 <xCoRoutineCreate+0x2c>
    2164:	8f ef       	ldi	r24, 0xFF	; 255
    2166:	59 c0       	rjmp	.+178    	; 0x221a <xCoRoutineCreate+0xde>
	{
		/* If pxCurrentCoRoutine is NULL then this is the first co-routine to
		be created and the co-routine data structures need initialising. */
		if( pxCurrentCoRoutine == NULL )
    2168:	80 91 b3 01 	lds	r24, 0x01B3
    216c:	90 91 b4 01 	lds	r25, 0x01B4
    2170:	89 2b       	or	r24, r25
    2172:	21 f5       	brne	.+72     	; 0x21bc <xCoRoutineCreate+0x80>
		{
			pxCurrentCoRoutine = pxCoRoutine;
    2174:	d0 93 b4 01 	sts	0x01B4, r29
    2178:	c0 93 b3 01 	sts	0x01B3, r28
{
UBaseType_t uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
	{
		vListInitialise( ( List_t * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
    217c:	8c eb       	ldi	r24, 0xBC	; 188
    217e:	91 e0       	ldi	r25, 0x01	; 1
    2180:	0e 94 ca 0e 	call	0x1d94	; 0x1d94 <vListInitialise>
    2184:	85 ec       	ldi	r24, 0xC5	; 197
    2186:	91 e0       	ldi	r25, 0x01	; 1
    2188:	0e 94 ca 0e 	call	0x1d94	; 0x1d94 <vListInitialise>
	}

	vListInitialise( ( List_t * ) &xDelayedCoRoutineList1 );
    218c:	2e ec       	ldi	r18, 0xCE	; 206
    218e:	e2 2e       	mov	r14, r18
    2190:	21 e0       	ldi	r18, 0x01	; 1
    2192:	f2 2e       	mov	r15, r18
    2194:	c7 01       	movw	r24, r14
    2196:	0e 94 ca 0e 	call	0x1d94	; 0x1d94 <vListInitialise>
	vListInitialise( ( List_t * ) &xDelayedCoRoutineList2 );
    219a:	07 ed       	ldi	r16, 0xD7	; 215
    219c:	11 e0       	ldi	r17, 0x01	; 1
    219e:	c8 01       	movw	r24, r16
    21a0:	0e 94 ca 0e 	call	0x1d94	; 0x1d94 <vListInitialise>
	vListInitialise( ( List_t * ) &xPendingReadyCoRoutineList );
    21a4:	84 ee       	ldi	r24, 0xE4	; 228
    21a6:	91 e0       	ldi	r25, 0x01	; 1
    21a8:	0e 94 ca 0e 	call	0x1d94	; 0x1d94 <vListInitialise>

	/* Start with pxDelayedCoRoutineList using list1 and the
	pxOverflowDelayedCoRoutineList using list2. */
	pxDelayedCoRoutineList = &xDelayedCoRoutineList1;
    21ac:	f0 92 e1 01 	sts	0x01E1, r15
    21b0:	e0 92 e0 01 	sts	0x01E0, r14
	pxOverflowDelayedCoRoutineList = &xDelayedCoRoutineList2;
    21b4:	10 93 e3 01 	sts	0x01E3, r17
    21b8:	00 93 e2 01 	sts	0x01E2, r16
    21bc:	eb 2c       	mov	r14, r11
    21be:	bb 20       	and	r11, r11
    21c0:	11 f0       	breq	.+4      	; 0x21c6 <xCoRoutineCreate+0x8a>
    21c2:	ee 24       	eor	r14, r14
    21c4:	e3 94       	inc	r14
		{
			uxPriority = configMAX_CO_ROUTINE_PRIORITIES - 1;
		}

		/* Fill out the co-routine control block from the function parameters. */
		pxCoRoutine->uxState = corINITIAL_STATE;
    21c6:	19 8e       	std	Y+25, r1	; 0x19
    21c8:	18 8e       	std	Y+24, r1	; 0x18
		pxCoRoutine->uxPriority = uxPriority;
    21ca:	ee 8a       	std	Y+22, r14	; 0x16
		pxCoRoutine->uxIndex = uxIndex;
    21cc:	af 8a       	std	Y+23, r10	; 0x17
		pxCoRoutine->pxCoRoutineFunction = pxCoRoutineCode;
    21ce:	fe 01       	movw	r30, r28
    21d0:	c1 92       	st	Z+, r12
    21d2:	d1 92       	st	Z+, r13
    21d4:	8f 01       	movw	r16, r30

		/* Initialise all the other co-routine control block parameters. */
		vListInitialiseItem( &( pxCoRoutine->xGenericListItem ) );
    21d6:	cf 01       	movw	r24, r30
    21d8:	0e 94 da 0e 	call	0x1db4	; 0x1db4 <vListInitialiseItem>
		vListInitialiseItem( &( pxCoRoutine->xEventListItem ) );
    21dc:	ce 01       	movw	r24, r28
    21de:	0c 96       	adiw	r24, 0x0c	; 12
    21e0:	0e 94 da 0e 	call	0x1db4	; 0x1db4 <vListInitialiseItem>

		/* Set the co-routine control block as a link back from the ListItem_t.
		This is so we can get back to the containing CRCB from a generic item
		in a list. */
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xGenericListItem ), pxCoRoutine );
    21e4:	d9 87       	std	Y+9, r29	; 0x09
    21e6:	c8 87       	std	Y+8, r28	; 0x08
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xEventListItem ), pxCoRoutine );
    21e8:	db 8b       	std	Y+19, r29	; 0x13
    21ea:	ca 8b       	std	Y+18, r28	; 0x12

		/* Event lists are always in priority order. */
		listSET_LIST_ITEM_VALUE( &( pxCoRoutine->xEventListItem ), ( ( TickType_t ) configMAX_CO_ROUTINE_PRIORITIES - ( TickType_t ) uxPriority ) );
    21ec:	82 e0       	ldi	r24, 0x02	; 2
    21ee:	90 e0       	ldi	r25, 0x00	; 0
    21f0:	8e 19       	sub	r24, r14
    21f2:	91 09       	sbc	r25, r1
    21f4:	9d 87       	std	Y+13, r25	; 0x0d
    21f6:	8c 87       	std	Y+12, r24	; 0x0c

		/* Now the co-routine has been initialised it can be added to the ready
		list at the correct priority. */
		prvAddCoRoutineToReadyQueue( pxCoRoutine );
    21f8:	9e 89       	ldd	r25, Y+22	; 0x16
    21fa:	80 91 b5 01 	lds	r24, 0x01B5
    21fe:	89 17       	cp	r24, r25
    2200:	10 f4       	brcc	.+4      	; 0x2206 <xCoRoutineCreate+0xca>
    2202:	90 93 b5 01 	sts	0x01B5, r25
    2206:	89 e0       	ldi	r24, 0x09	; 9
    2208:	98 9f       	mul	r25, r24
    220a:	c0 01       	movw	r24, r0
    220c:	11 24       	eor	r1, r1
    220e:	84 54       	subi	r24, 0x44	; 68
    2210:	9e 4f       	sbci	r25, 0xFE	; 254
    2212:	b8 01       	movw	r22, r16
    2214:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <vListInsertEnd>
    2218:	81 e0       	ldi	r24, 0x01	; 1
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
	}

	return xReturn;
}
    221a:	df 91       	pop	r29
    221c:	cf 91       	pop	r28
    221e:	1f 91       	pop	r17
    2220:	0f 91       	pop	r16
    2222:	ff 90       	pop	r15
    2224:	ef 90       	pop	r14
    2226:	df 90       	pop	r13
    2228:	cf 90       	pop	r12
    222a:	bf 90       	pop	r11
    222c:	af 90       	pop	r10
    222e:	08 95       	ret

00002230 <vPortFree>:
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
}
    2230:	08 95       	ret

00002232 <vPortInitialiseBlocks>:
/*-----------------------------------------------------------*/

void vPortInitialiseBlocks( void )
{
	/* Only required when static memory is not cleared. */
	xNextFreeByte = ( size_t ) 0;
    2232:	10 92 ee 01 	sts	0x01EE, r1
    2236:	10 92 ed 01 	sts	0x01ED, r1
}
    223a:	08 95       	ret

0000223c <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
    223c:	2b ed       	ldi	r18, 0xDB	; 219
    223e:	35 e0       	ldi	r19, 0x05	; 5
    2240:	80 91 ed 01 	lds	r24, 0x01ED
    2244:	90 91 ee 01 	lds	r25, 0x01EE
    2248:	28 1b       	sub	r18, r24
    224a:	39 0b       	sbc	r19, r25
	return ( configADJUSTED_HEAP_SIZE - xNextFreeByte );
}
    224c:	c9 01       	movw	r24, r18
    224e:	08 95       	ret

00002250 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    2250:	cf 93       	push	r28
    2252:	df 93       	push	r29
    2254:	ec 01       	movw	r28, r24
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	}
	#endif

	vTaskSuspendAll();
    2256:	0e 94 92 03 	call	0x724	; 0x724 <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
    225a:	80 91 ef 01 	lds	r24, 0x01EF
    225e:	90 91 f0 01 	lds	r25, 0x01F0
    2262:	89 2b       	or	r24, r25
    2264:	31 f4       	brne	.+12     	; 0x2272 <pvPortMalloc+0x22>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
    2266:	82 ef       	ldi	r24, 0xF2	; 242
    2268:	91 e0       	ldi	r25, 0x01	; 1
    226a:	90 93 f0 01 	sts	0x01F0, r25
    226e:	80 93 ef 01 	sts	0x01EF, r24
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
    2272:	20 91 ed 01 	lds	r18, 0x01ED
    2276:	30 91 ee 01 	lds	r19, 0x01EE
    227a:	ce 01       	movw	r24, r28
    227c:	82 0f       	add	r24, r18
    227e:	93 1f       	adc	r25, r19
    2280:	45 e0       	ldi	r20, 0x05	; 5
    2282:	8b 3d       	cpi	r24, 0xDB	; 219
    2284:	94 07       	cpc	r25, r20
    2286:	70 f4       	brcc	.+28     	; 0x22a4 <pvPortMalloc+0x54>
    2288:	28 17       	cp	r18, r24
    228a:	39 07       	cpc	r19, r25
    228c:	58 f4       	brcc	.+22     	; 0x22a4 <pvPortMalloc+0x54>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
    228e:	c0 91 ef 01 	lds	r28, 0x01EF
    2292:	d0 91 f0 01 	lds	r29, 0x01F0
    2296:	c2 0f       	add	r28, r18
    2298:	d3 1f       	adc	r29, r19
			xNextFreeByte += xWantedSize;
    229a:	90 93 ee 01 	sts	0x01EE, r25
    229e:	80 93 ed 01 	sts	0x01ED, r24
    22a2:	02 c0       	rjmp	.+4      	; 0x22a8 <pvPortMalloc+0x58>
    22a4:	c0 e0       	ldi	r28, 0x00	; 0
    22a6:	d0 e0       	ldi	r29, 0x00	; 0
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
    22a8:	0e 94 d4 06 	call	0xda8	; 0xda8 <xTaskResumeAll>
		}
	}
	#endif

	return pvReturn;
}
    22ac:	ce 01       	movw	r24, r28
    22ae:	df 91       	pop	r29
    22b0:	cf 91       	pop	r28
    22b2:	08 95       	ret

000022b4 <pxPortInitialiseStack>:

/* 
 * See header file for description. 
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
    22b4:	fc 01       	movw	r30, r24
uint16_t usAddress;

	/* Place a few bytes of known values on the bottom of the stack. 
	This is just useful for debugging. */

	*pxTopOfStack = 0x11;
    22b6:	91 e1       	ldi	r25, 0x11	; 17
    22b8:	90 83       	st	Z, r25
	pxTopOfStack--;
	*pxTopOfStack = 0x22;
    22ba:	22 e2       	ldi	r18, 0x22	; 34
    22bc:	22 93       	st	-Z, r18
	pxTopOfStack--;
	*pxTopOfStack = 0x33;
    22be:	83 e3       	ldi	r24, 0x33	; 51
    22c0:	82 93       	st	-Z, r24
	/*lint -e950 -e611 -e923 Lint doesn't like this much - but nothing I can do about it. */

	/* The start of the task code will be popped off the stack last, so place
	it on first. */
	usAddress = ( uint16_t ) pxCode;
	*pxTopOfStack = ( StackType_t ) ( usAddress & ( uint16_t ) 0x00ff );
    22c2:	62 93       	st	-Z, r22
	pxTopOfStack--;

	usAddress >>= 8;
	*pxTopOfStack = ( StackType_t ) ( usAddress & ( uint16_t ) 0x00ff );
    22c4:	72 93       	st	-Z, r23

	/* Next simulate the stack as if after a call to portSAVE_CONTEXT().  
	portSAVE_CONTEXT places the flags on the stack immediately after r0
	to ensure the interrupts get disabled as soon as possible, and so ensuring
	the stack use is minimal should a context switch interrupt occur. */
	*pxTopOfStack = ( StackType_t ) 0x00;	/* R0 */
    22c6:	12 92       	st	-Z, r1
	pxTopOfStack--;
	*pxTopOfStack = portFLAGS_INT_ENABLED;
    22c8:	80 e8       	ldi	r24, 0x80	; 128
    22ca:	82 93       	st	-Z, r24
	pxTopOfStack--;


	/* Now the remaining registers.   The compiler expects R1 to be 0. */
	*pxTopOfStack = ( StackType_t ) 0x00;	/* R1 */
    22cc:	12 92       	st	-Z, r1
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x02;	/* R2 */
    22ce:	82 e0       	ldi	r24, 0x02	; 2
    22d0:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x03;	/* R3 */
    22d2:	83 e0       	ldi	r24, 0x03	; 3
    22d4:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x04;	/* R4 */
    22d6:	84 e0       	ldi	r24, 0x04	; 4
    22d8:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x05;	/* R5 */
    22da:	85 e0       	ldi	r24, 0x05	; 5
    22dc:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x06;	/* R6 */
    22de:	86 e0       	ldi	r24, 0x06	; 6
    22e0:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x07;	/* R7 */
    22e2:	87 e0       	ldi	r24, 0x07	; 7
    22e4:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x08;	/* R8 */
    22e6:	88 e0       	ldi	r24, 0x08	; 8
    22e8:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x09;	/* R9 */
    22ea:	89 e0       	ldi	r24, 0x09	; 9
    22ec:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x10;	/* R10 */
    22ee:	80 e1       	ldi	r24, 0x10	; 16
    22f0:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x11;	/* R11 */
    22f2:	92 93       	st	-Z, r25
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x12;	/* R12 */
    22f4:	82 e1       	ldi	r24, 0x12	; 18
    22f6:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x13;	/* R13 */
    22f8:	83 e1       	ldi	r24, 0x13	; 19
    22fa:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x14;	/* R14 */
    22fc:	84 e1       	ldi	r24, 0x14	; 20
    22fe:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x15;	/* R15 */
    2300:	85 e1       	ldi	r24, 0x15	; 21
    2302:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x16;	/* R16 */
    2304:	86 e1       	ldi	r24, 0x16	; 22
    2306:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x17;	/* R17 */
    2308:	87 e1       	ldi	r24, 0x17	; 23
    230a:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x18;	/* R18 */
    230c:	88 e1       	ldi	r24, 0x18	; 24
    230e:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x19;	/* R19 */
    2310:	89 e1       	ldi	r24, 0x19	; 25
    2312:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x20;	/* R20 */
    2314:	80 e2       	ldi	r24, 0x20	; 32
    2316:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x21;	/* R21 */
    2318:	81 e2       	ldi	r24, 0x21	; 33
    231a:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x22;	/* R22 */
    231c:	22 93       	st	-Z, r18
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x23;	/* R23 */
    231e:	83 e2       	ldi	r24, 0x23	; 35
    2320:	82 93       	st	-Z, r24
	pxTopOfStack--;

	/* Place the parameter on the stack in the expected location. */
	usAddress = ( uint16_t ) pvParameters;
	*pxTopOfStack = ( StackType_t ) ( usAddress & ( uint16_t ) 0x00ff );
    2322:	42 93       	st	-Z, r20
	pxTopOfStack--;

	usAddress >>= 8;
	*pxTopOfStack = ( StackType_t ) ( usAddress & ( uint16_t ) 0x00ff );
    2324:	52 93       	st	-Z, r21
	pxTopOfStack--;

	*pxTopOfStack = ( StackType_t ) 0x26;	/* R26 X */
    2326:	86 e2       	ldi	r24, 0x26	; 38
    2328:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x27;	/* R27 */
    232a:	87 e2       	ldi	r24, 0x27	; 39
    232c:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x28;	/* R28 Y */
    232e:	88 e2       	ldi	r24, 0x28	; 40
    2330:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x29;	/* R29 */
    2332:	89 e2       	ldi	r24, 0x29	; 41
    2334:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x30;	/* R30 Z */
    2336:	80 e3       	ldi	r24, 0x30	; 48
    2338:	82 93       	st	-Z, r24
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) 0x031;	/* R31 */
    233a:	81 e3       	ldi	r24, 0x31	; 49
    233c:	82 93       	st	-Z, r24
    233e:	31 97       	sbiw	r30, 0x01	; 1
	pxTopOfStack--;

	/*lint +e950 +e611 +e923 */

	return pxTopOfStack;
}
    2340:	cf 01       	movw	r24, r30
    2342:	08 95       	ret

00002344 <xPortStartScheduler>:
	/* Setup compare match value for compare match A.  Interrupts are disabled 
	before this is called so we need not worry here. */
	ucLowByte = ( uint8_t ) ( ulCompareMatch & ( uint32_t ) 0xff );
	ulCompareMatch >>= 8;
	ucHighByte = ( uint8_t ) ( ulCompareMatch & ( uint32_t ) 0xff );
	OCR1AH = ucHighByte;
    2344:	10 92 89 00 	sts	0x0089, r1
	OCR1AL = ucLowByte;
    2348:	8c e7       	ldi	r24, 0x7C	; 124
    234a:	80 93 88 00 	sts	0x0088, r24

	/* Setup clock source and compare match behaviour. */
	ucLowByte = portCLEAR_COUNTER_ON_MATCH | portPRESCALE_64;
	TCCR1B = ucLowByte;
    234e:	8b e0       	ldi	r24, 0x0B	; 11
    2350:	80 93 81 00 	sts	0x0081, r24

	/* Enable the interrupt - this is okay as interrupt are currently globally
	disabled. */
	ucLowByte = TIMSK1;
    2354:	ef e6       	ldi	r30, 0x6F	; 111
    2356:	f0 e0       	ldi	r31, 0x00	; 0
    2358:	80 81       	ld	r24, Z
	ucLowByte |= portCOMPARE_MATCH_A_INTERRUPT_ENABLE;
    235a:	82 60       	ori	r24, 0x02	; 2
	TIMSK1 = ucLowByte;
    235c:	80 83       	st	Z, r24
{
	/* Setup the hardware to generate the tick. */
	prvSetupTimerInterrupt();

	/* Restore the context of the first task that is going to run. */
	portRESTORE_CONTEXT();
    235e:	a0 91 56 01 	lds	r26, 0x0156
    2362:	b0 91 57 01 	lds	r27, 0x0157
    2366:	cd 91       	ld	r28, X+
    2368:	cd bf       	out	0x3d, r28	; 61
    236a:	dd 91       	ld	r29, X+
    236c:	de bf       	out	0x3e, r29	; 62
    236e:	ff 91       	pop	r31
    2370:	ef 91       	pop	r30
    2372:	df 91       	pop	r29
    2374:	cf 91       	pop	r28
    2376:	bf 91       	pop	r27
    2378:	af 91       	pop	r26
    237a:	9f 91       	pop	r25
    237c:	8f 91       	pop	r24
    237e:	7f 91       	pop	r23
    2380:	6f 91       	pop	r22
    2382:	5f 91       	pop	r21
    2384:	4f 91       	pop	r20
    2386:	3f 91       	pop	r19
    2388:	2f 91       	pop	r18
    238a:	1f 91       	pop	r17
    238c:	0f 91       	pop	r16
    238e:	ff 90       	pop	r15
    2390:	ef 90       	pop	r14
    2392:	df 90       	pop	r13
    2394:	cf 90       	pop	r12
    2396:	bf 90       	pop	r11
    2398:	af 90       	pop	r10
    239a:	9f 90       	pop	r9
    239c:	8f 90       	pop	r8
    239e:	7f 90       	pop	r7
    23a0:	6f 90       	pop	r6
    23a2:	5f 90       	pop	r5
    23a4:	4f 90       	pop	r4
    23a6:	3f 90       	pop	r3
    23a8:	2f 90       	pop	r2
    23aa:	1f 90       	pop	r1
    23ac:	0f 90       	pop	r0
    23ae:	0f be       	out	0x3f, r0	; 63
    23b0:	0f 90       	pop	r0

	/* Simulate a function call end as generated by the compiler.  We will now
	jump to the start of the task the context of which we have just restored. */
	asm volatile ( "ret" );
    23b2:	08 95       	ret

	/* Should not get here. */
	return pdTRUE;
}
    23b4:	81 e0       	ldi	r24, 0x01	; 1
    23b6:	08 95       	ret

000023b8 <vPortEndScheduler>:

void vPortEndScheduler( void )
{
	/* It is unlikely that the AVR port will get stopped.  If required simply
	disable the tick interrupt here. */
}
    23b8:	08 95       	ret

000023ba <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
    23ba:	0f 92       	push	r0
    23bc:	0f b6       	in	r0, 0x3f	; 63
    23be:	f8 94       	cli
    23c0:	0f 92       	push	r0
    23c2:	1f 92       	push	r1
    23c4:	11 24       	eor	r1, r1
    23c6:	2f 92       	push	r2
    23c8:	3f 92       	push	r3
    23ca:	4f 92       	push	r4
    23cc:	5f 92       	push	r5
    23ce:	6f 92       	push	r6
    23d0:	7f 92       	push	r7
    23d2:	8f 92       	push	r8
    23d4:	9f 92       	push	r9
    23d6:	af 92       	push	r10
    23d8:	bf 92       	push	r11
    23da:	cf 92       	push	r12
    23dc:	df 92       	push	r13
    23de:	ef 92       	push	r14
    23e0:	ff 92       	push	r15
    23e2:	0f 93       	push	r16
    23e4:	1f 93       	push	r17
    23e6:	2f 93       	push	r18
    23e8:	3f 93       	push	r19
    23ea:	4f 93       	push	r20
    23ec:	5f 93       	push	r21
    23ee:	6f 93       	push	r22
    23f0:	7f 93       	push	r23
    23f2:	8f 93       	push	r24
    23f4:	9f 93       	push	r25
    23f6:	af 93       	push	r26
    23f8:	bf 93       	push	r27
    23fa:	cf 93       	push	r28
    23fc:	df 93       	push	r29
    23fe:	ef 93       	push	r30
    2400:	ff 93       	push	r31
    2402:	a0 91 56 01 	lds	r26, 0x0156
    2406:	b0 91 57 01 	lds	r27, 0x0157
    240a:	0d b6       	in	r0, 0x3d	; 61
    240c:	0d 92       	st	X+, r0
    240e:	0e b6       	in	r0, 0x3e	; 62
    2410:	0d 92       	st	X+, r0
	if( xTaskIncrementTick() != pdFALSE )
    2412:	0e 94 a1 05 	call	0xb42	; 0xb42 <xTaskIncrementTick>
    2416:	88 23       	and	r24, r24
    2418:	11 f0       	breq	.+4      	; 0x241e <vPortYieldFromTick+0x64>
	{
		vTaskSwitchContext();
    241a:	0e 94 b7 03 	call	0x76e	; 0x76e <vTaskSwitchContext>
	}
	portRESTORE_CONTEXT();
    241e:	a0 91 56 01 	lds	r26, 0x0156
    2422:	b0 91 57 01 	lds	r27, 0x0157
    2426:	cd 91       	ld	r28, X+
    2428:	cd bf       	out	0x3d, r28	; 61
    242a:	dd 91       	ld	r29, X+
    242c:	de bf       	out	0x3e, r29	; 62
    242e:	ff 91       	pop	r31
    2430:	ef 91       	pop	r30
    2432:	df 91       	pop	r29
    2434:	cf 91       	pop	r28
    2436:	bf 91       	pop	r27
    2438:	af 91       	pop	r26
    243a:	9f 91       	pop	r25
    243c:	8f 91       	pop	r24
    243e:	7f 91       	pop	r23
    2440:	6f 91       	pop	r22
    2442:	5f 91       	pop	r21
    2444:	4f 91       	pop	r20
    2446:	3f 91       	pop	r19
    2448:	2f 91       	pop	r18
    244a:	1f 91       	pop	r17
    244c:	0f 91       	pop	r16
    244e:	ff 90       	pop	r15
    2450:	ef 90       	pop	r14
    2452:	df 90       	pop	r13
    2454:	cf 90       	pop	r12
    2456:	bf 90       	pop	r11
    2458:	af 90       	pop	r10
    245a:	9f 90       	pop	r9
    245c:	8f 90       	pop	r8
    245e:	7f 90       	pop	r7
    2460:	6f 90       	pop	r6
    2462:	5f 90       	pop	r5
    2464:	4f 90       	pop	r4
    2466:	3f 90       	pop	r3
    2468:	2f 90       	pop	r2
    246a:	1f 90       	pop	r1
    246c:	0f 90       	pop	r0
    246e:	0f be       	out	0x3f, r0	; 63
    2470:	0f 90       	pop	r0

	asm volatile ( "ret" );
    2472:	08 95       	ret

00002474 <__vector_11>:
	 * count is incremented after the context is saved.
	 */
	void TIMER1_COMPA_vect( void ) __attribute__ ( ( signal, naked ) );
	void TIMER1_COMPA_vect( void )
	{
		vPortYieldFromTick();
    2474:	0e 94 dd 11 	call	0x23ba	; 0x23ba <vPortYieldFromTick>
		asm volatile ( "reti" );
    2478:	18 95       	reti

0000247a <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
    247a:	0f 92       	push	r0
    247c:	0f b6       	in	r0, 0x3f	; 63
    247e:	f8 94       	cli
    2480:	0f 92       	push	r0
    2482:	1f 92       	push	r1
    2484:	11 24       	eor	r1, r1
    2486:	2f 92       	push	r2
    2488:	3f 92       	push	r3
    248a:	4f 92       	push	r4
    248c:	5f 92       	push	r5
    248e:	6f 92       	push	r6
    2490:	7f 92       	push	r7
    2492:	8f 92       	push	r8
    2494:	9f 92       	push	r9
    2496:	af 92       	push	r10
    2498:	bf 92       	push	r11
    249a:	cf 92       	push	r12
    249c:	df 92       	push	r13
    249e:	ef 92       	push	r14
    24a0:	ff 92       	push	r15
    24a2:	0f 93       	push	r16
    24a4:	1f 93       	push	r17
    24a6:	2f 93       	push	r18
    24a8:	3f 93       	push	r19
    24aa:	4f 93       	push	r20
    24ac:	5f 93       	push	r21
    24ae:	6f 93       	push	r22
    24b0:	7f 93       	push	r23
    24b2:	8f 93       	push	r24
    24b4:	9f 93       	push	r25
    24b6:	af 93       	push	r26
    24b8:	bf 93       	push	r27
    24ba:	cf 93       	push	r28
    24bc:	df 93       	push	r29
    24be:	ef 93       	push	r30
    24c0:	ff 93       	push	r31
    24c2:	a0 91 56 01 	lds	r26, 0x0156
    24c6:	b0 91 57 01 	lds	r27, 0x0157
    24ca:	0d b6       	in	r0, 0x3d	; 61
    24cc:	0d 92       	st	X+, r0
    24ce:	0e b6       	in	r0, 0x3e	; 62
    24d0:	0d 92       	st	X+, r0
	vTaskSwitchContext();
    24d2:	0e 94 b7 03 	call	0x76e	; 0x76e <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    24d6:	a0 91 56 01 	lds	r26, 0x0156
    24da:	b0 91 57 01 	lds	r27, 0x0157
    24de:	cd 91       	ld	r28, X+
    24e0:	cd bf       	out	0x3d, r28	; 61
    24e2:	dd 91       	ld	r29, X+
    24e4:	de bf       	out	0x3e, r29	; 62
    24e6:	ff 91       	pop	r31
    24e8:	ef 91       	pop	r30
    24ea:	df 91       	pop	r29
    24ec:	cf 91       	pop	r28
    24ee:	bf 91       	pop	r27
    24f0:	af 91       	pop	r26
    24f2:	9f 91       	pop	r25
    24f4:	8f 91       	pop	r24
    24f6:	7f 91       	pop	r23
    24f8:	6f 91       	pop	r22
    24fa:	5f 91       	pop	r21
    24fc:	4f 91       	pop	r20
    24fe:	3f 91       	pop	r19
    2500:	2f 91       	pop	r18
    2502:	1f 91       	pop	r17
    2504:	0f 91       	pop	r16
    2506:	ff 90       	pop	r15
    2508:	ef 90       	pop	r14
    250a:	df 90       	pop	r13
    250c:	cf 90       	pop	r12
    250e:	bf 90       	pop	r11
    2510:	af 90       	pop	r10
    2512:	9f 90       	pop	r9
    2514:	8f 90       	pop	r8
    2516:	7f 90       	pop	r7
    2518:	6f 90       	pop	r6
    251a:	5f 90       	pop	r5
    251c:	4f 90       	pop	r4
    251e:	3f 90       	pop	r3
    2520:	2f 90       	pop	r2
    2522:	1f 90       	pop	r1
    2524:	0f 90       	pop	r0
    2526:	0f be       	out	0x3f, r0	; 63
    2528:	0f 90       	pop	r0

	asm volatile ( "ret" );
    252a:	08 95       	ret

0000252c <xAreFlashCoRoutinesStillRunning>:
BaseType_t xAreFlashCoRoutinesStillRunning( void )
{
	/* Return pdPASS or pdFAIL depending on whether an error has been detected
	or not. */
	return xCoRoutineFlashStatus;
}
    252c:	80 91 1a 01 	lds	r24, 0x011A
    2530:	08 95       	ret

00002532 <vStartFlashCoRoutines>:

/*
 * See the header file for details.
 */
void vStartFlashCoRoutines( UBaseType_t uxNumberToCreate )
{
    2532:	0f 93       	push	r16
    2534:	1f 93       	push	r17
    2536:	08 2f       	mov	r16, r24
    2538:	89 30       	cpi	r24, 0x09	; 9
    253a:	08 f0       	brcs	.+2      	; 0x253e <vStartFlashCoRoutines+0xc>
    253c:	08 e0       	ldi	r16, 0x08	; 8
	{
		uxNumberToCreate = crfMAX_FLASH_TASKS;
	}

	/* Create the queue used to pass data between the co-routines. */
	xFlashQueue = xQueueCreate( crfQUEUE_LENGTH, sizeof( UBaseType_t ) );
    253e:	81 e0       	ldi	r24, 0x01	; 1
    2540:	61 e0       	ldi	r22, 0x01	; 1
    2542:	40 e0       	ldi	r20, 0x00	; 0
    2544:	0e 94 a2 0e 	call	0x1d44	; 0x1d44 <xQueueGenericCreate>
    2548:	90 93 ce 07 	sts	0x07CE, r25
    254c:	80 93 cd 07 	sts	0x07CD, r24

	if( xFlashQueue )
    2550:	89 2b       	or	r24, r25
    2552:	89 f0       	breq	.+34     	; 0x2576 <vStartFlashCoRoutines+0x44>
    2554:	10 e0       	ldi	r17, 0x00	; 0
    2556:	07 c0       	rjmp	.+14     	; 0x2566 <vStartFlashCoRoutines+0x34>
	{
		/* Create uxNumberToCreate 'fixed delay' co-routines. */
		for( uxIndex = 0; uxIndex < uxNumberToCreate; uxIndex++ )
		{
			xCoRoutineCreate( prvFixedDelayCoRoutine, crfFIXED_DELAY_PRIORITY, uxIndex );
    2558:	85 e0       	ldi	r24, 0x05	; 5
    255a:	93 e1       	ldi	r25, 0x13	; 19
    255c:	60 e0       	ldi	r22, 0x00	; 0
    255e:	41 2f       	mov	r20, r17
    2560:	0e 94 9e 10 	call	0x213c	; 0x213c <xCoRoutineCreate>
	xFlashQueue = xQueueCreate( crfQUEUE_LENGTH, sizeof( UBaseType_t ) );

	if( xFlashQueue )
	{
		/* Create uxNumberToCreate 'fixed delay' co-routines. */
		for( uxIndex = 0; uxIndex < uxNumberToCreate; uxIndex++ )
    2564:	1f 5f       	subi	r17, 0xFF	; 255
    2566:	10 17       	cp	r17, r16
    2568:	b8 f3       	brcs	.-18     	; 0x2558 <vStartFlashCoRoutines+0x26>
		{
			xCoRoutineCreate( prvFixedDelayCoRoutine, crfFIXED_DELAY_PRIORITY, uxIndex );
		}

		/* Create the 'flash' co-routine. */
		xCoRoutineCreate( prvFlashCoRoutine, crfFLASH_PRIORITY, crfFLASH_INDEX );
    256a:	8e eb       	ldi	r24, 0xBE	; 190
    256c:	92 e1       	ldi	r25, 0x12	; 18
    256e:	61 e0       	ldi	r22, 0x01	; 1
    2570:	40 e0       	ldi	r20, 0x00	; 0
    2572:	0e 94 9e 10 	call	0x213c	; 0x213c <xCoRoutineCreate>
	}
}
    2576:	1f 91       	pop	r17
    2578:	0f 91       	pop	r16
    257a:	08 95       	ret

0000257c <prvFlashCoRoutine>:
	crEND();
}
/*-----------------------------------------------------------*/

static void prvFlashCoRoutine( CoRoutineHandle_t xHandle, UBaseType_t uxIndex )
{
    257c:	0f 93       	push	r16
    257e:	1f 93       	push	r17
    2580:	df 93       	push	r29
    2582:	cf 93       	push	r28
    2584:	0f 92       	push	r0
    2586:	cd b7       	in	r28, 0x3d	; 61
    2588:	de b7       	in	r29, 0x3e	; 62
static as we do not need it to maintain their state between blocks. */
BaseType_t xResult;
UBaseType_t uxLEDToFlash;

	/* Co-routines MUST start with a call to crSTART. */
	crSTART( xHandle );
    258a:	8c 01       	movw	r16, r24
    258c:	fc 01       	movw	r30, r24
    258e:	80 8d       	ldd	r24, Z+24	; 0x18
    2590:	91 8d       	ldd	r25, Z+25	; 0x19
    2592:	f1 e0       	ldi	r31, 0x01	; 1
    2594:	82 3c       	cpi	r24, 0xC2	; 194
    2596:	9f 07       	cpc	r25, r31
    2598:	b1 f0       	breq	.+44     	; 0x25c6 <prvFlashCoRoutine+0x4a>
    259a:	21 e0       	ldi	r18, 0x01	; 1
    259c:	83 3c       	cpi	r24, 0xC3	; 195
    259e:	92 07       	cpc	r25, r18
    25a0:	51 f1       	breq	.+84     	; 0x25f6 <prvFlashCoRoutine+0x7a>
    25a2:	89 2b       	or	r24, r25
    25a4:	61 f5       	brne	.+88     	; 0x25fe <prvFlashCoRoutine+0x82>
	( void ) uxIndex;
	
	for( ;; )
	{
		/* Block to wait for the number of the LED to flash. */
		crQUEUE_RECEIVE( xHandle, xFlashQueue, &uxLEDToFlash, portMAX_DELAY, &xResult );		
    25a6:	80 91 cd 07 	lds	r24, 0x07CD
    25aa:	90 91 ce 07 	lds	r25, 0x07CE
    25ae:	be 01       	movw	r22, r28
    25b0:	6f 5f       	subi	r22, 0xFF	; 255
    25b2:	7f 4f       	sbci	r23, 0xFF	; 255
    25b4:	4f ef       	ldi	r20, 0xFF	; 255
    25b6:	5f ef       	ldi	r21, 0xFF	; 255
    25b8:	0e 94 bb 0b 	call	0x1776	; 0x1776 <xQueueCRReceive>
    25bc:	8c 3f       	cpi	r24, 0xFC	; 252
    25be:	71 f4       	brne	.+28     	; 0x25dc <prvFlashCoRoutine+0x60>
    25c0:	82 ec       	ldi	r24, 0xC2	; 194
    25c2:	91 e0       	ldi	r25, 0x01	; 1
    25c4:	0f c0       	rjmp	.+30     	; 0x25e4 <prvFlashCoRoutine+0x68>
    25c6:	80 91 cd 07 	lds	r24, 0x07CD
    25ca:	90 91 ce 07 	lds	r25, 0x07CE
    25ce:	be 01       	movw	r22, r28
    25d0:	6f 5f       	subi	r22, 0xFF	; 255
    25d2:	7f 4f       	sbci	r23, 0xFF	; 255
    25d4:	40 e0       	ldi	r20, 0x00	; 0
    25d6:	50 e0       	ldi	r21, 0x00	; 0
    25d8:	0e 94 bb 0b 	call	0x1776	; 0x1776 <xQueueCRReceive>
    25dc:	8b 3f       	cpi	r24, 0xFB	; 251
    25de:	31 f4       	brne	.+12     	; 0x25ec <prvFlashCoRoutine+0x70>
    25e0:	83 ec       	ldi	r24, 0xC3	; 195
    25e2:	91 e0       	ldi	r25, 0x01	; 1
    25e4:	f8 01       	movw	r30, r16
    25e6:	91 8f       	std	Z+25, r25	; 0x19
    25e8:	80 8f       	std	Z+24, r24	; 0x18
    25ea:	09 c0       	rjmp	.+18     	; 0x25fe <prvFlashCoRoutine+0x82>

		if( xResult != pdPASS )
    25ec:	81 30       	cpi	r24, 0x01	; 1
    25ee:	19 f0       	breq	.+6      	; 0x25f6 <prvFlashCoRoutine+0x7a>
		{
			/* We would not expect to wake unless we received something. */
			xCoRoutineFlashStatus = pdFAIL;
    25f0:	10 92 1a 01 	sts	0x011A, r1
    25f4:	d8 cf       	rjmp	.-80     	; 0x25a6 <prvFlashCoRoutine+0x2a>
		}
		else
		{
			/* We received the number of an LED to flash - flash it! */
			vParTestToggleLED( uxLEDToFlash );
    25f6:	89 81       	ldd	r24, Y+1	; 0x01
    25f8:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <vParTestToggleLED>
    25fc:	d4 cf       	rjmp	.-88     	; 0x25a6 <prvFlashCoRoutine+0x2a>
		}
	}

	/* Co-routines MUST end with a call to crEND. */
	crEND();
}
    25fe:	0f 90       	pop	r0
    2600:	cf 91       	pop	r28
    2602:	df 91       	pop	r29
    2604:	1f 91       	pop	r17
    2606:	0f 91       	pop	r16
    2608:	08 95       	ret

0000260a <prvFixedDelayCoRoutine>:
	}
}
/*-----------------------------------------------------------*/

static void prvFixedDelayCoRoutine( CoRoutineHandle_t xHandle, UBaseType_t uxIndex )
{
    260a:	0f 93       	push	r16
    260c:	1f 93       	push	r17
    260e:	df 93       	push	r29
    2610:	cf 93       	push	r28
    2612:	0f 92       	push	r0
    2614:	cd b7       	in	r28, 0x3d	; 61
    2616:	de b7       	in	r29, 0x3e	; 62
    2618:	69 83       	std	Y+1, r22	; 0x01
																400 / portTICK_PERIOD_MS,
																450 / portTICK_PERIOD_MS,
																500  / portTICK_PERIOD_MS };

	/* Co-routines MUST start with a call to crSTART. */
	crSTART( xHandle );
    261a:	8c 01       	movw	r16, r24
    261c:	fc 01       	movw	r30, r24
    261e:	80 8d       	ldd	r24, Z+24	; 0x18
    2620:	91 8d       	ldd	r25, Z+25	; 0x19
    2622:	f1 e0       	ldi	r31, 0x01	; 1
    2624:	82 38       	cpi	r24, 0x82	; 130
    2626:	9f 07       	cpc	r25, r31
    2628:	f1 f0       	breq	.+60     	; 0x2666 <prvFixedDelayCoRoutine+0x5c>
    262a:	21 e0       	ldi	r18, 0x01	; 1
    262c:	83 38       	cpi	r24, 0x83	; 131
    262e:	92 07       	cpc	r25, r18
    2630:	18 f4       	brcc	.+6      	; 0x2638 <prvFixedDelayCoRoutine+0x2e>
    2632:	89 2b       	or	r24, r25
    2634:	41 f0       	breq	.+16     	; 0x2646 <prvFixedDelayCoRoutine+0x3c>
    2636:	3e c0       	rjmp	.+124    	; 0x26b4 <prvFixedDelayCoRoutine+0xaa>
    2638:	e1 e0       	ldi	r30, 0x01	; 1
    263a:	83 38       	cpi	r24, 0x83	; 131
    263c:	9e 07       	cpc	r25, r30
    263e:	39 f1       	breq	.+78     	; 0x268e <prvFixedDelayCoRoutine+0x84>
    2640:	86 59       	subi	r24, 0x96	; 150
    2642:	91 40       	sbci	r25, 0x01	; 1
    2644:	b9 f5       	brne	.+110    	; 0x26b4 <prvFixedDelayCoRoutine+0xaa>

	for( ;; )
	{
		/* Post our uxIndex value onto the queue.  This is used as the LED to
		flash. */
		crQUEUE_SEND( xHandle, xFlashQueue, ( void * ) &uxIndex, crfPOSTING_BLOCK_TIME, &xResult );
    2646:	80 91 cd 07 	lds	r24, 0x07CD
    264a:	90 91 ce 07 	lds	r25, 0x07CE
    264e:	be 01       	movw	r22, r28
    2650:	6f 5f       	subi	r22, 0xFF	; 255
    2652:	7f 4f       	sbci	r23, 0xFF	; 255
    2654:	40 e0       	ldi	r20, 0x00	; 0
    2656:	50 e0       	ldi	r21, 0x00	; 0
    2658:	0e 94 00 0c 	call	0x1800	; 0x1800 <xQueueCRSend>
    265c:	8c 3f       	cpi	r24, 0xFC	; 252
    265e:	71 f4       	brne	.+28     	; 0x267c <prvFixedDelayCoRoutine+0x72>
    2660:	82 e8       	ldi	r24, 0x82	; 130
    2662:	91 e0       	ldi	r25, 0x01	; 1
    2664:	24 c0       	rjmp	.+72     	; 0x26ae <prvFixedDelayCoRoutine+0xa4>
    2666:	80 91 cd 07 	lds	r24, 0x07CD
    266a:	90 91 ce 07 	lds	r25, 0x07CE
    266e:	be 01       	movw	r22, r28
    2670:	6f 5f       	subi	r22, 0xFF	; 255
    2672:	7f 4f       	sbci	r23, 0xFF	; 255
    2674:	40 e0       	ldi	r20, 0x00	; 0
    2676:	50 e0       	ldi	r21, 0x00	; 0
    2678:	0e 94 00 0c 	call	0x1800	; 0x1800 <xQueueCRSend>
    267c:	8b 3f       	cpi	r24, 0xFB	; 251
    267e:	19 f4       	brne	.+6      	; 0x2686 <prvFixedDelayCoRoutine+0x7c>
    2680:	83 e8       	ldi	r24, 0x83	; 131
    2682:	91 e0       	ldi	r25, 0x01	; 1
    2684:	14 c0       	rjmp	.+40     	; 0x26ae <prvFixedDelayCoRoutine+0xa4>

		if( xResult != pdPASS )
    2686:	81 30       	cpi	r24, 0x01	; 1
    2688:	11 f0       	breq	.+4      	; 0x268e <prvFixedDelayCoRoutine+0x84>
		{
			/* For the reasons stated at the top of the file we should always
			find that we can post to the queue.  If we could not then an error
			has occurred. */
			xCoRoutineFlashStatus = pdFAIL;
    268a:	10 92 1a 01 	sts	0x011A, r1
		}

		crDELAY( xHandle, xFlashRates[ uxIndex ] );
    268e:	e9 81       	ldd	r30, Y+1	; 0x01
    2690:	f0 e0       	ldi	r31, 0x00	; 0
    2692:	ee 0f       	add	r30, r30
    2694:	ff 1f       	adc	r31, r31
    2696:	e5 5e       	subi	r30, 0xE5	; 229
    2698:	fe 4f       	sbci	r31, 0xFE	; 254
    269a:	80 81       	ld	r24, Z
    269c:	91 81       	ldd	r25, Z+1	; 0x01
    269e:	00 97       	sbiw	r24, 0x00	; 0
    26a0:	21 f0       	breq	.+8      	; 0x26aa <prvFixedDelayCoRoutine+0xa0>
    26a2:	60 e0       	ldi	r22, 0x00	; 0
    26a4:	70 e0       	ldi	r23, 0x00	; 0
    26a6:	0e 94 61 10 	call	0x20c2	; 0x20c2 <vCoRoutineAddToDelayedList>
    26aa:	86 e9       	ldi	r24, 0x96	; 150
    26ac:	91 e0       	ldi	r25, 0x01	; 1
    26ae:	f8 01       	movw	r30, r16
    26b0:	91 8f       	std	Z+25, r25	; 0x19
    26b2:	80 8f       	std	Z+24, r24	; 0x18
	}

	/* Co-routines MUST end with a call to crEND. */
	crEND();
}
    26b4:	0f 90       	pop	r0
    26b6:	cf 91       	pop	r28
    26b8:	df 91       	pop	r29
    26ba:	1f 91       	pop	r17
    26bc:	0f 91       	pop	r16
    26be:	08 95       	ret

000026c0 <vCompeteingIntMathTask>:
	}
}
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( vCompeteingIntMathTask, pvParameters )
{
    26c0:	9f 92       	push	r9
    26c2:	af 92       	push	r10
    26c4:	bf 92       	push	r11
    26c6:	cf 92       	push	r12
    26c8:	df 92       	push	r13
    26ca:	ef 92       	push	r14
    26cc:	ff 92       	push	r15
    26ce:	0f 93       	push	r16
    26d0:	1f 93       	push	r17
    26d2:	df 93       	push	r29
    26d4:	cf 93       	push	r28
    26d6:	00 d0       	rcall	.+0      	; 0x26d8 <vCompeteingIntMathTask+0x18>
    26d8:	00 d0       	rcall	.+0      	; 0x26da <vCompeteingIntMathTask+0x1a>
    26da:	cd b7       	in	r28, 0x3d	; 61
    26dc:	de b7       	in	r29, 0x3e	; 62
volatile BaseType_t *pxTaskHasExecuted;

	/* Set a pointer to the variable we are going to set to true each
	iteration.  This is also a good test of the parameter passing mechanism
	within each port. */
	pxTaskHasExecuted = ( volatile BaseType_t * ) pvParameters;
    26de:	8c 01       	movw	r16, r24
    26e0:	ee 24       	eor	r14, r14
    26e2:	ff 24       	eor	r15, r15
	/* Keep performing a calculation and checking the result against a constant. */
	for( ;; )
	{
		/* Perform the calculation.  This will store partial value in
		registers, resulting in a good test of the context switch mechanism. */
		lValue = intgCONST1;
    26e4:	9b e7       	ldi	r25, 0x7B	; 123
    26e6:	a9 2e       	mov	r10, r25
    26e8:	b1 2c       	mov	r11, r1
    26ea:	c1 2c       	mov	r12, r1
    26ec:	d1 2c       	mov	r13, r1
		{
			/* We have not encountered any errors, so set the flag that show
			we are still executing.  This will be periodically cleared by
			the check task. */
			portENTER_CRITICAL();
				*pxTaskHasExecuted = pdTRUE;
    26ee:	99 24       	eor	r9, r9
    26f0:	93 94       	inc	r9
    26f2:	03 c0       	rjmp	.+6      	; 0x26fa <vCompeteingIntMathTask+0x3a>
volatile BaseType_t *pxTaskHasExecuted;

	/* Set a pointer to the variable we are going to set to true each
	iteration.  This is also a good test of the parameter passing mechanism
	within each port. */
	pxTaskHasExecuted = ( volatile BaseType_t * ) pvParameters;
    26f4:	81 e0       	ldi	r24, 0x01	; 1
    26f6:	e8 2e       	mov	r14, r24
    26f8:	f1 2c       	mov	r15, r1
	/* Keep performing a calculation and checking the result against a constant. */
	for( ;; )
	{
		/* Perform the calculation.  This will store partial value in
		registers, resulting in a good test of the context switch mechanism. */
		lValue = intgCONST1;
    26fa:	a9 82       	std	Y+1, r10	; 0x01
    26fc:	ba 82       	std	Y+2, r11	; 0x02
    26fe:	cb 82       	std	Y+3, r12	; 0x03
    2700:	dc 82       	std	Y+4, r13	; 0x04
		lValue += intgCONST2;
    2702:	89 81       	ldd	r24, Y+1	; 0x01
    2704:	9a 81       	ldd	r25, Y+2	; 0x02
    2706:	ab 81       	ldd	r26, Y+3	; 0x03
    2708:	bc 81       	ldd	r27, Y+4	; 0x04
    270a:	89 5b       	subi	r24, 0xB9	; 185
    270c:	9b 46       	sbci	r25, 0x6B	; 107
    270e:	ac 4f       	sbci	r26, 0xFC	; 252
    2710:	bf 4f       	sbci	r27, 0xFF	; 255
    2712:	89 83       	std	Y+1, r24	; 0x01
    2714:	9a 83       	std	Y+2, r25	; 0x02
    2716:	ab 83       	std	Y+3, r26	; 0x03
    2718:	bc 83       	std	Y+4, r27	; 0x04
			taskYIELD();
		}
		#endif

		/* Finish off the calculation. */
		lValue *= intgCONST3;
    271a:	69 81       	ldd	r22, Y+1	; 0x01
    271c:	7a 81       	ldd	r23, Y+2	; 0x02
    271e:	8b 81       	ldd	r24, Y+3	; 0x03
    2720:	9c 81       	ldd	r25, Y+4	; 0x04
    2722:	2d ef       	ldi	r18, 0xFD	; 253
    2724:	3f ef       	ldi	r19, 0xFF	; 255
    2726:	4f ef       	ldi	r20, 0xFF	; 255
    2728:	5f ef       	ldi	r21, 0xFF	; 255
    272a:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <__mulsi3>
    272e:	69 83       	std	Y+1, r22	; 0x01
    2730:	7a 83       	std	Y+2, r23	; 0x02
    2732:	8b 83       	std	Y+3, r24	; 0x03
    2734:	9c 83       	std	Y+4, r25	; 0x04
		lValue /= intgCONST4;
    2736:	69 81       	ldd	r22, Y+1	; 0x01
    2738:	7a 81       	ldd	r23, Y+2	; 0x02
    273a:	8b 81       	ldd	r24, Y+3	; 0x03
    273c:	9c 81       	ldd	r25, Y+4	; 0x04
    273e:	27 e0       	ldi	r18, 0x07	; 7
    2740:	30 e0       	ldi	r19, 0x00	; 0
    2742:	40 e0       	ldi	r20, 0x00	; 0
    2744:	50 e0       	ldi	r21, 0x00	; 0
    2746:	0e 94 8a 15 	call	0x2b14	; 0x2b14 <__divmodsi4>
    274a:	c9 01       	movw	r24, r18
    274c:	da 01       	movw	r26, r20
    274e:	89 83       	std	Y+1, r24	; 0x01
    2750:	9a 83       	std	Y+2, r25	; 0x02
    2752:	ab 83       	std	Y+3, r26	; 0x03
    2754:	bc 83       	std	Y+4, r27	; 0x04

		/* If the calculation is found to be incorrect we stop setting the 
		TaskHasExecuted variable so the check task can see an error has 
		occurred. */
		if( lValue != intgEXPECTED_ANSWER ) /*lint !e774 volatile used to prevent this being optimised out. */
    2756:	89 81       	ldd	r24, Y+1	; 0x01
    2758:	9a 81       	ldd	r25, Y+2	; 0x02
    275a:	ab 81       	ldd	r26, Y+3	; 0x03
    275c:	bc 81       	ldd	r27, Y+4	; 0x04
    275e:	8b 51       	subi	r24, 0x1B	; 27
    2760:	97 47       	sbci	r25, 0x77	; 119
    2762:	ae 4f       	sbci	r26, 0xFE	; 254
    2764:	bf 4f       	sbci	r27, 0xFF	; 255
    2766:	31 f6       	brne	.-116    	; 0x26f4 <vCompeteingIntMathTask+0x34>
		{
			sError = pdTRUE;
		}

		if( sError == pdFALSE )
    2768:	e1 14       	cp	r14, r1
    276a:	f1 04       	cpc	r15, r1
    276c:	09 f0       	breq	.+2      	; 0x2770 <vCompeteingIntMathTask+0xb0>
    276e:	c2 cf       	rjmp	.-124    	; 0x26f4 <vCompeteingIntMathTask+0x34>
		{
			/* We have not encountered any errors, so set the flag that show
			we are still executing.  This will be periodically cleared by
			the check task. */
			portENTER_CRITICAL();
    2770:	0f b6       	in	r0, 0x3f	; 63
    2772:	f8 94       	cli
    2774:	0f 92       	push	r0
				*pxTaskHasExecuted = pdTRUE;
    2776:	f8 01       	movw	r30, r16
    2778:	90 82       	st	Z, r9
			portEXIT_CRITICAL();
    277a:	0f 90       	pop	r0
    277c:	0f be       	out	0x3f, r0	; 63
    277e:	bd cf       	rjmp	.-134    	; 0x26fa <vCompeteingIntMathTask+0x3a>

00002780 <xAreIntegerMathsTaskStillRunning>:

	/* Check the maths tasks are still running by ensuring their check variables 
	are still being set to true. */
	for( sTask = 0; sTask < intgNUMBER_OF_TASKS; sTask++ )
	{
		if( xTaskCheck[ sTask ] == pdFALSE )
    2780:	80 91 cf 07 	lds	r24, 0x07CF
			xReturn = pdFALSE;
		}

		/* Reset the check variable so we can tell if it has been set by
		the next time around. */
		xTaskCheck[ sTask ] = pdFALSE;
    2784:	10 92 cf 07 	sts	0x07CF, r1
    2788:	81 11       	cpse	r24, r1
    278a:	81 e0       	ldi	r24, 0x01	; 1
	}

	return xReturn;
}
    278c:	08 95       	ret

0000278e <vStartIntegerMathTasks>:
static volatile BaseType_t xTaskCheck[ intgNUMBER_OF_TASKS ] = { ( BaseType_t ) pdFALSE };

/*-----------------------------------------------------------*/

void vStartIntegerMathTasks( UBaseType_t uxPriority )
{
    278e:	ef 92       	push	r14
    2790:	ff 92       	push	r15
    2792:	0f 93       	push	r16
    2794:	08 2f       	mov	r16, r24
short sTask;

	for( sTask = 0; sTask < intgNUMBER_OF_TASKS; sTask++ )
	{
		xTaskCreate( vCompeteingIntMathTask, "IntMath", intgSTACK_SIZE, ( void * ) &( xTaskCheck[ sTask ] ), uxPriority, ( TaskHandle_t * ) NULL );
    2796:	80 e6       	ldi	r24, 0x60	; 96
    2798:	93 e1       	ldi	r25, 0x13	; 19
    279a:	6b e2       	ldi	r22, 0x2B	; 43
    279c:	71 e0       	ldi	r23, 0x01	; 1
    279e:	45 e5       	ldi	r20, 0x55	; 85
    27a0:	50 e0       	ldi	r21, 0x00	; 0
    27a2:	2f ec       	ldi	r18, 0xCF	; 207
    27a4:	37 e0       	ldi	r19, 0x07	; 7
    27a6:	ee 24       	eor	r14, r14
    27a8:	ff 24       	eor	r15, r15
    27aa:	0e 94 9d 09 	call	0x133a	; 0x133a <xTaskCreate>
	}
}
    27ae:	0f 91       	pop	r16
    27b0:	ff 90       	pop	r15
    27b2:	ef 90       	pop	r14
    27b4:	08 95       	ret

000027b6 <xArePollingQueuesStillRunning>:

	/* Check both the consumer and producer poll count to check they have both
	been changed since out last trip round.  We do not need a critical section
	around the check variables as this is called from a higher priority than
	the other tasks that access the same variables. */
	if( ( xPollingConsumerCount == pollqINITIAL_VALUE ) ||
    27b6:	80 91 d0 07 	lds	r24, 0x07D0
    27ba:	88 23       	and	r24, r24
    27bc:	21 f0       	breq	.+8      	; 0x27c6 <xArePollingQueuesStillRunning+0x10>
    27be:	80 91 d1 07 	lds	r24, 0x07D1
    27c2:	81 11       	cpse	r24, r1
    27c4:	81 e0       	ldi	r24, 0x01	; 1
		xReturn = pdTRUE;
	}

	/* Set the check variables back down so we know if they have been
	incremented the next time around. */
	xPollingConsumerCount = pollqINITIAL_VALUE;
    27c6:	10 92 d0 07 	sts	0x07D0, r1
	xPollingProducerCount = pollqINITIAL_VALUE;
    27ca:	10 92 d1 07 	sts	0x07D1, r1

	return xReturn;
}
    27ce:	08 95       	ret

000027d0 <vStartPolledQueueTasks>:
static volatile BaseType_t xPollingConsumerCount = pollqINITIAL_VALUE, xPollingProducerCount = pollqINITIAL_VALUE;

/*-----------------------------------------------------------*/

void vStartPolledQueueTasks( UBaseType_t uxPriority )
{
    27d0:	ef 92       	push	r14
    27d2:	ff 92       	push	r15
    27d4:	0f 93       	push	r16
    27d6:	1f 93       	push	r17
    27d8:	18 2f       	mov	r17, r24
static QueueHandle_t xPolledQueue;

	/* Create the queue used by the producer and consumer. */
	xPolledQueue = xQueueCreate( pollqQUEUE_SIZE, ( UBaseType_t ) sizeof( uint16_t ) );
    27da:	8a e0       	ldi	r24, 0x0A	; 10
    27dc:	62 e0       	ldi	r22, 0x02	; 2
    27de:	40 e0       	ldi	r20, 0x00	; 0
    27e0:	0e 94 a2 0e 	call	0x1d44	; 0x1d44 <xQueueGenericCreate>
    27e4:	90 93 d3 07 	sts	0x07D3, r25
    27e8:	80 93 d2 07 	sts	0x07D2, r24

	if( xPolledQueue != NULL )
    27ec:	89 2b       	or	r24, r25
    27ee:	b9 f0       	breq	.+46     	; 0x281e <vStartPolledQueueTasks+0x4e>
		by the pre-processor if configQUEUE_REGISTRY_SIZE is not defined or is
		defined to be less than 1. */
		vQueueAddToRegistry( xPolledQueue, "Poll_Test_Queue" );

		/* Spawn the producer and consumer. */
		xTaskCreate( vPolledQueueConsumer, "QConsNB", pollqSTACK_SIZE, ( void * ) &xPolledQueue, uxPriority, ( TaskHandle_t * ) NULL );
    27f0:	80 e5       	ldi	r24, 0x50	; 80
    27f2:	94 e1       	ldi	r25, 0x14	; 20
    27f4:	63 e3       	ldi	r22, 0x33	; 51
    27f6:	71 e0       	ldi	r23, 0x01	; 1
    27f8:	45 e5       	ldi	r20, 0x55	; 85
    27fa:	50 e0       	ldi	r21, 0x00	; 0
    27fc:	22 ed       	ldi	r18, 0xD2	; 210
    27fe:	37 e0       	ldi	r19, 0x07	; 7
    2800:	01 2f       	mov	r16, r17
    2802:	ee 24       	eor	r14, r14
    2804:	ff 24       	eor	r15, r15
    2806:	0e 94 9d 09 	call	0x133a	; 0x133a <xTaskCreate>
		xTaskCreate( vPolledQueueProducer, "QProdNB", pollqSTACK_SIZE, ( void * ) &xPolledQueue, uxPriority, ( TaskHandle_t * ) NULL );
    280a:	84 e1       	ldi	r24, 0x14	; 20
    280c:	94 e1       	ldi	r25, 0x14	; 20
    280e:	6b e3       	ldi	r22, 0x3B	; 59
    2810:	71 e0       	ldi	r23, 0x01	; 1
    2812:	45 e5       	ldi	r20, 0x55	; 85
    2814:	50 e0       	ldi	r21, 0x00	; 0
    2816:	22 ed       	ldi	r18, 0xD2	; 210
    2818:	37 e0       	ldi	r19, 0x07	; 7
    281a:	0e 94 9d 09 	call	0x133a	; 0x133a <xTaskCreate>
	}
}
    281e:	1f 91       	pop	r17
    2820:	0f 91       	pop	r16
    2822:	ff 90       	pop	r15
    2824:	ef 90       	pop	r14
    2826:	08 95       	ret

00002828 <vPolledQueueProducer>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( vPolledQueueProducer, pvParameters )
{
    2828:	cf 92       	push	r12
    282a:	df 92       	push	r13
    282c:	ef 92       	push	r14
    282e:	ff 92       	push	r15
    2830:	0f 93       	push	r16
    2832:	1f 93       	push	r17
    2834:	df 93       	push	r29
    2836:	cf 93       	push	r28
    2838:	00 d0       	rcall	.+0      	; 0x283a <vPolledQueueProducer+0x12>
    283a:	cd b7       	in	r28, 0x3d	; 61
    283c:	de b7       	in	r29, 0x3e	; 62
    283e:	7c 01       	movw	r14, r24
uint16_t usValue = ( uint16_t ) 0;
    2840:	1a 82       	std	Y+2, r1	; 0x02
    2842:	19 82       	std	Y+1, r1	; 0x01
    2844:	00 e0       	ldi	r16, 0x00	; 0
    2846:	10 e0       	ldi	r17, 0x00	; 0
	for( ;; )
	{
		for( xLoop = 0; xLoop < pollqVALUES_TO_PRODUCE; xLoop++ )
		{
			/* Send an incrementing number on the queue without blocking. */
			if( xQueueSend( *( ( QueueHandle_t * ) pvParameters ), ( void * ) &usValue, pollqNO_DELAY ) != pdPASS )
    2848:	6e 01       	movw	r12, r28
    284a:	08 94       	sec
    284c:	c1 1c       	adc	r12, r1
    284e:	d1 1c       	adc	r13, r1
    2850:	1f c0       	rjmp	.+62     	; 0x2890 <vPolledQueueProducer+0x68>
    2852:	f7 01       	movw	r30, r14
    2854:	80 81       	ld	r24, Z
    2856:	91 81       	ldd	r25, Z+1	; 0x01
    2858:	b6 01       	movw	r22, r12
    285a:	40 e0       	ldi	r20, 0x00	; 0
    285c:	50 e0       	ldi	r21, 0x00	; 0
    285e:	20 e0       	ldi	r18, 0x00	; 0
    2860:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <xQueueGenericSend>
    2864:	81 30       	cpi	r24, 0x01	; 1
    2866:	11 f0       	breq	.+4      	; 0x286c <vPolledQueueProducer+0x44>
    2868:	01 e0       	ldi	r16, 0x01	; 1
    286a:	11 c0       	rjmp	.+34     	; 0x288e <vPolledQueueProducer+0x66>
				has been an error. */
				xError = pdTRUE;
			}
			else
			{
				if( xError == pdFALSE )
    286c:	00 23       	and	r16, r16
    286e:	51 f4       	brne	.+20     	; 0x2884 <vPolledQueueProducer+0x5c>
				{
					/* If an error has ever been recorded we stop incrementing the
					check variable. */
					portENTER_CRITICAL();
    2870:	0f b6       	in	r0, 0x3f	; 63
    2872:	f8 94       	cli
    2874:	0f 92       	push	r0
						xPollingProducerCount++;
    2876:	80 91 d1 07 	lds	r24, 0x07D1
    287a:	8f 5f       	subi	r24, 0xFF	; 255
    287c:	80 93 d1 07 	sts	0x07D1, r24
					portEXIT_CRITICAL();
    2880:	0f 90       	pop	r0
    2882:	0f be       	out	0x3f, r0	; 63
				}

				/* Update the value we are going to post next time around. */
				usValue++;
    2884:	89 81       	ldd	r24, Y+1	; 0x01
    2886:	9a 81       	ldd	r25, Y+2	; 0x02
    2888:	01 96       	adiw	r24, 0x01	; 1
    288a:	9a 83       	std	Y+2, r25	; 0x02
    288c:	89 83       	std	Y+1, r24	; 0x01
uint16_t usValue = ( uint16_t ) 0;
BaseType_t xError = pdFALSE, xLoop;

	for( ;; )
	{
		for( xLoop = 0; xLoop < pollqVALUES_TO_PRODUCE; xLoop++ )
    288e:	1f 5f       	subi	r17, 0xFF	; 255
    2890:	13 30       	cpi	r17, 0x03	; 3
    2892:	fc f2       	brlt	.-66     	; 0x2852 <vPolledQueueProducer+0x2a>
			}
		}

		/* Wait before we start posting again to ensure the consumer runs and
		empties the queue. */
		vTaskDelay( pollqPRODUCER_DELAY );
    2894:	83 e0       	ldi	r24, 0x03	; 3
    2896:	90 e0       	ldi	r25, 0x00	; 0
    2898:	0e 94 99 08 	call	0x1132	; 0x1132 <vTaskDelay>
    289c:	10 e0       	ldi	r17, 0x00	; 0
    289e:	d9 cf       	rjmp	.-78     	; 0x2852 <vPolledQueueProducer+0x2a>

000028a0 <vPolledQueueConsumer>:
	}
}  /*lint !e818 Function prototype must conform to API. */
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( vPolledQueueConsumer, pvParameters )
{
    28a0:	9f 92       	push	r9
    28a2:	af 92       	push	r10
    28a4:	bf 92       	push	r11
    28a6:	cf 92       	push	r12
    28a8:	df 92       	push	r13
    28aa:	ef 92       	push	r14
    28ac:	ff 92       	push	r15
    28ae:	0f 93       	push	r16
    28b0:	1f 93       	push	r17
    28b2:	df 93       	push	r29
    28b4:	cf 93       	push	r28
    28b6:	00 d0       	rcall	.+0      	; 0x28b8 <vPolledQueueConsumer+0x18>
    28b8:	cd b7       	in	r28, 0x3d	; 61
    28ba:	de b7       	in	r29, 0x3e	; 62
    28bc:	98 2e       	mov	r9, r24
    28be:	c9 2e       	mov	r12, r25
    28c0:	dd 24       	eor	r13, r13
    28c2:	ee 24       	eor	r14, r14
    28c4:	ff 24       	eor	r15, r15
	for( ;; )
	{
		/* Loop until the queue is empty. */
		while( uxQueueMessagesWaiting( *( ( QueueHandle_t * ) pvParameters ) ) )
		{
			if( xQueueReceive( *( ( QueueHandle_t * ) pvParameters ), &usData, pollqNO_DELAY ) == pdPASS )
    28c6:	5e 01       	movw	r10, r28
    28c8:	08 94       	sec
    28ca:	a1 1c       	adc	r10, r1
    28cc:	b1 1c       	adc	r11, r1
    28ce:	23 c0       	rjmp	.+70     	; 0x2916 <vPolledQueueConsumer+0x76>
    28d0:	f8 01       	movw	r30, r16
    28d2:	80 81       	ld	r24, Z
    28d4:	91 81       	ldd	r25, Z+1	; 0x01
    28d6:	b5 01       	movw	r22, r10
    28d8:	40 e0       	ldi	r20, 0x00	; 0
    28da:	50 e0       	ldi	r21, 0x00	; 0
    28dc:	20 e0       	ldi	r18, 0x00	; 0
    28de:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <xQueueGenericReceive>
    28e2:	81 30       	cpi	r24, 0x01	; 1
    28e4:	c1 f4       	brne	.+48     	; 0x2916 <vPolledQueueConsumer+0x76>
			{
				if( usData != usExpectedValue )
    28e6:	29 81       	ldd	r18, Y+1	; 0x01
    28e8:	3a 81       	ldd	r19, Y+2	; 0x02
    28ea:	2e 15       	cp	r18, r14
    28ec:	3f 05       	cpc	r19, r15
    28ee:	19 f0       	breq	.+6      	; 0x28f6 <vPolledQueueConsumer+0x56>
    28f0:	dd 24       	eor	r13, r13
    28f2:	d3 94       	inc	r13
    28f4:	0c c0       	rjmp	.+24     	; 0x290e <vPolledQueueConsumer+0x6e>
					value should again be correct. */
					usExpectedValue = usData;
				}
				else
				{
					if( xError == pdFALSE )
    28f6:	dd 20       	and	r13, r13
    28f8:	51 f4       	brne	.+20     	; 0x290e <vPolledQueueConsumer+0x6e>
					{
						/* Only increment the check variable if no errors have
						occurred. */
						portENTER_CRITICAL();
    28fa:	0f b6       	in	r0, 0x3f	; 63
    28fc:	f8 94       	cli
    28fe:	0f 92       	push	r0
							xPollingConsumerCount++;
    2900:	80 91 d0 07 	lds	r24, 0x07D0
    2904:	8f 5f       	subi	r24, 0xFF	; 255
    2906:	80 93 d0 07 	sts	0x07D0, r24
						portEXIT_CRITICAL();
    290a:	0f 90       	pop	r0
    290c:	0f be       	out	0x3f, r0	; 63
					}
				}

				/* Next time round we would expect the number to be one higher. */
				usExpectedValue++;
    290e:	79 01       	movw	r14, r18
    2910:	08 94       	sec
    2912:	e1 1c       	adc	r14, r1
    2914:	f1 1c       	adc	r15, r1
BaseType_t xError = pdFALSE;

	for( ;; )
	{
		/* Loop until the queue is empty. */
		while( uxQueueMessagesWaiting( *( ( QueueHandle_t * ) pvParameters ) ) )
    2916:	09 2d       	mov	r16, r9
    2918:	1c 2d       	mov	r17, r12
    291a:	f8 01       	movw	r30, r16
    291c:	80 81       	ld	r24, Z
    291e:	91 81       	ldd	r25, Z+1	; 0x01
    2920:	0e 94 be 0a 	call	0x157c	; 0x157c <uxQueueMessagesWaiting>
    2924:	88 23       	and	r24, r24
    2926:	a1 f6       	brne	.-88     	; 0x28d0 <vPolledQueueConsumer+0x30>
			}
		}

		/* Now the queue is empty we block, allowing the producer to place more
		items in the queue. */
		vTaskDelay( pollqCONSUMER_DELAY );
    2928:	8f ee       	ldi	r24, 0xEF	; 239
    292a:	9f ef       	ldi	r25, 0xFF	; 255
    292c:	0e 94 99 08 	call	0x1132	; 0x1132 <vTaskDelay>
    2930:	f2 cf       	rjmp	.-28     	; 0x2916 <vPolledQueueConsumer+0x76>

00002932 <xAreComTestTasksStillRunning>:
BaseType_t xReturn;

	/* If the count of successful reception loops has not changed than at
	some time an error occurred (i.e. a character was received out of sequence)
	and we will return false. */
	if( uxRxLoops == comINITIAL_RX_COUNT_VALUE )
    2932:	80 91 d4 07 	lds	r24, 0x07D4
		xReturn = pdTRUE;
	}

	/* Reset the count of successful Rx loops.  When this function is called
	again we expect this to have been incremented. */
	uxRxLoops = comINITIAL_RX_COUNT_VALUE;
    2936:	10 92 d4 07 	sts	0x07D4, r1
    293a:	81 11       	cpse	r24, r1
    293c:	81 e0       	ldi	r24, 0x01	; 1

	return xReturn;
}
    293e:	08 95       	ret

00002940 <vAltStartComTestTasks>:
static volatile UBaseType_t uxRxLoops = comINITIAL_RX_COUNT_VALUE;

/*-----------------------------------------------------------*/

void vAltStartComTestTasks( UBaseType_t uxPriority, uint32_t ulBaudRate, UBaseType_t uxLED )
{
    2940:	ef 92       	push	r14
    2942:	ff 92       	push	r15
    2944:	0f 93       	push	r16
    2946:	1f 93       	push	r17
    2948:	18 2f       	mov	r17, r24
	/* Initialise the com port then spawn the Rx and Tx tasks. */
	uxBaseLED = uxLED;
    294a:	20 93 d5 07 	sts	0x07D5, r18
	xSerialPortInitMinimal( ulBaudRate, comBUFFER_LEN );
    294e:	cb 01       	movw	r24, r22
    2950:	ba 01       	movw	r22, r20
    2952:	48 e1       	ldi	r20, 0x18	; 24
    2954:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <xSerialPortInitMinimal>

	/* The Tx task is spawned with a lower priority than the Rx task. */
	xTaskCreate( vComTxTask, "COMTx", comSTACK_SIZE, NULL, uxPriority - 1, ( TaskHandle_t * ) NULL );
    2958:	01 2f       	mov	r16, r17
    295a:	01 50       	subi	r16, 0x01	; 1
    295c:	8d e0       	ldi	r24, 0x0D	; 13
    295e:	95 e1       	ldi	r25, 0x15	; 21
    2960:	63 e4       	ldi	r22, 0x43	; 67
    2962:	71 e0       	ldi	r23, 0x01	; 1
    2964:	45 e5       	ldi	r20, 0x55	; 85
    2966:	50 e0       	ldi	r21, 0x00	; 0
    2968:	20 e0       	ldi	r18, 0x00	; 0
    296a:	30 e0       	ldi	r19, 0x00	; 0
    296c:	ee 24       	eor	r14, r14
    296e:	ff 24       	eor	r15, r15
    2970:	0e 94 9d 09 	call	0x133a	; 0x133a <xTaskCreate>
	xTaskCreate( vComRxTask, "COMRx", comSTACK_SIZE, NULL, uxPriority, ( TaskHandle_t * ) NULL );
    2974:	8a ec       	ldi	r24, 0xCA	; 202
    2976:	94 e1       	ldi	r25, 0x14	; 20
    2978:	69 e4       	ldi	r22, 0x49	; 73
    297a:	71 e0       	ldi	r23, 0x01	; 1
    297c:	45 e5       	ldi	r20, 0x55	; 85
    297e:	50 e0       	ldi	r21, 0x00	; 0
    2980:	20 e0       	ldi	r18, 0x00	; 0
    2982:	30 e0       	ldi	r19, 0x00	; 0
    2984:	01 2f       	mov	r16, r17
    2986:	0e 94 9d 09 	call	0x133a	; 0x133a <xTaskCreate>
}
    298a:	1f 91       	pop	r17
    298c:	0f 91       	pop	r16
    298e:	ff 90       	pop	r15
    2990:	ef 90       	pop	r14
    2992:	08 95       	ret

00002994 <vComRxTask>:
	}
} /*lint !e715 !e818 pvParameters is required for a task function even if it is not referenced. */
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( vComRxTask, pvParameters )
{
    2994:	ef 92       	push	r14
    2996:	ff 92       	push	r15
    2998:	0f 93       	push	r16
    299a:	1f 93       	push	r17
    299c:	df 93       	push	r29
    299e:	cf 93       	push	r28
    29a0:	0f 92       	push	r0
    29a2:	cd b7       	in	r28, 0x3d	; 61
    29a4:	de b7       	in	r29, 0x3e	; 62
    29a6:	00 e0       	ldi	r16, 0x00	; 0
		comLAST_BYTE in an incrementing order.  Loop to receive each byte. */
		for( cExpectedByte = comFIRST_BYTE; cExpectedByte <= comLAST_BYTE; cExpectedByte++ )
		{
			/* Block on the queue that contains received bytes until a byte is
			available. */
			if( xSerialGetChar( xPort, &cByteRxed, comRX_BLOCK_TIME ) )
    29a8:	7e 01       	movw	r14, r28
    29aa:	08 94       	sec
    29ac:	e1 1c       	adc	r14, r1
    29ae:	f1 1c       	adc	r15, r1
	}
} /*lint !e715 !e818 pvParameters is required for a task function even if it is not referenced. */
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( vComRxTask, pvParameters )
{
    29b0:	11 e4       	ldi	r17, 0x41	; 65
		comLAST_BYTE in an incrementing order.  Loop to receive each byte. */
		for( cExpectedByte = comFIRST_BYTE; cExpectedByte <= comLAST_BYTE; cExpectedByte++ )
		{
			/* Block on the queue that contains received bytes until a byte is
			available. */
			if( xSerialGetChar( xPort, &cByteRxed, comRX_BLOCK_TIME ) )
    29b2:	80 e0       	ldi	r24, 0x00	; 0
    29b4:	90 e0       	ldi	r25, 0x00	; 0
    29b6:	b7 01       	movw	r22, r14
    29b8:	4f ef       	ldi	r20, 0xFF	; 255
    29ba:	5f ef       	ldi	r21, 0xFF	; 255
    29bc:	0e 94 d6 01 	call	0x3ac	; 0x3ac <xSerialGetChar>
    29c0:	88 23       	and	r24, r24
    29c2:	51 f0       	breq	.+20     	; 0x29d8 <vComRxTask+0x44>
			{
				/* Was this the byte we were expecting?  If so, toggle the LED,
				otherwise we are out on sync and should break out of the loop
				until the expected character sequence is about to restart. */
				if( cByteRxed == cExpectedByte )
    29c4:	89 81       	ldd	r24, Y+1	; 0x01
    29c6:	81 17       	cp	r24, r17
    29c8:	11 f0       	breq	.+4      	; 0x29ce <vComRxTask+0x3a>
    29ca:	11 e0       	ldi	r17, 0x01	; 1
    29cc:	09 c0       	rjmp	.+18     	; 0x29e0 <vComRxTask+0x4c>
				{
					vParTestToggleLED( uxBaseLED + comRX_LED_OFFSET );
    29ce:	80 91 d5 07 	lds	r24, 0x07D5
    29d2:	8f 5f       	subi	r24, 0xFF	; 255
    29d4:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <vParTestToggleLED>

	for( ;; )
	{
		/* We expect to receive the characters from comFIRST_BYTE to
		comLAST_BYTE in an incrementing order.  Loop to receive each byte. */
		for( cExpectedByte = comFIRST_BYTE; cExpectedByte <= comLAST_BYTE; cExpectedByte++ )
    29d8:	1f 5f       	subi	r17, 0xFF	; 255
    29da:	19 35       	cpi	r17, 0x59	; 89
    29dc:	51 f7       	brne	.-44     	; 0x29b2 <vComRxTask+0x1e>
    29de:	10 e0       	ldi	r17, 0x00	; 0
				}
			}
		}

		/* Turn the LED off while we are not doing anything. */
		vParTestSetLED( uxBaseLED + comRX_LED_OFFSET, pdFALSE );
    29e0:	80 91 d5 07 	lds	r24, 0x07D5
    29e4:	8f 5f       	subi	r24, 0xFF	; 255
    29e6:	60 e0       	ldi	r22, 0x00	; 0
    29e8:	0e 94 03 01 	call	0x206	; 0x206 <vParTestSetLED>

		/* Did we break out of the loop because the characters were received in
		an unexpected order?  If so wait here until the character sequence is
		about to restart. */
		if( xResyncRequired == pdTRUE )
    29ec:	11 30       	cpi	r17, 0x01	; 1
    29ee:	69 f4       	brne	.+26     	; 0x2a0a <vComRxTask+0x76>
    29f0:	07 c0       	rjmp	.+14     	; 0x2a00 <vComRxTask+0x6c>
		{
			while( cByteRxed != comLAST_BYTE )
			{
				/* Block until the next char is available. */
				xSerialGetChar( xPort, &cByteRxed, comRX_BLOCK_TIME );
    29f2:	80 e0       	ldi	r24, 0x00	; 0
    29f4:	90 e0       	ldi	r25, 0x00	; 0
    29f6:	b7 01       	movw	r22, r14
    29f8:	4f ef       	ldi	r20, 0xFF	; 255
    29fa:	5f ef       	ldi	r21, 0xFF	; 255
    29fc:	0e 94 d6 01 	call	0x3ac	; 0x3ac <xSerialGetChar>
		/* Did we break out of the loop because the characters were received in
		an unexpected order?  If so wait here until the character sequence is
		about to restart. */
		if( xResyncRequired == pdTRUE )
		{
			while( cByteRxed != comLAST_BYTE )
    2a00:	89 81       	ldd	r24, Y+1	; 0x01
    2a02:	88 35       	cpi	r24, 0x58	; 88
    2a04:	b1 f7       	brne	.-20     	; 0x29f2 <vComRxTask+0x5e>

			/* Note that an error occurred which caused us to have to resync.
			We use this to stop incrementing the loop counter so
			sAreComTestTasksStillRunning() will return false - indicating an
			error. */
			xErrorOccurred++;
    2a06:	0f 5f       	subi	r16, 0xFF	; 255
    2a08:	d3 cf       	rjmp	.-90     	; 0x29b0 <vComRxTask+0x1c>
			/* We have now resynced with the Tx task and can continue. */
			xResyncRequired = pdFALSE;
		}
		else
		{
			if( xErrorOccurred < comTOTAL_PERMISSIBLE_ERRORS )
    2a0a:	02 30       	cpi	r16, 0x02	; 2
    2a0c:	8c f6       	brge	.-94     	; 0x29b0 <vComRxTask+0x1c>
				occurring (i.e. an unexpected character being received) will
				prevent this counter being incremented for the rest of the
				execution.   Don't worry about mutual exclusion on this
				variable - it doesn't really matter as we just want it
				to change. */
				uxRxLoops++;
    2a0e:	80 91 d4 07 	lds	r24, 0x07D4
    2a12:	8f 5f       	subi	r24, 0xFF	; 255
    2a14:	80 93 d4 07 	sts	0x07D4, r24
    2a18:	cb cf       	rjmp	.-106    	; 0x29b0 <vComRxTask+0x1c>

00002a1a <vComTxTask>:
	xTaskCreate( vComRxTask, "COMRx", comSTACK_SIZE, NULL, uxPriority, ( TaskHandle_t * ) NULL );
}
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( vComTxTask, pvParameters )
{
    2a1a:	1f 93       	push	r17
    2a1c:	11 e4       	ldi	r17, 0x41	; 65
    2a1e:	0e c0       	rjmp	.+28     	; 0x2a3c <vComTxTask+0x22>
	{
		/* Simply transmit a sequence of characters from comFIRST_BYTE to
		comLAST_BYTE. */
		for( cByteToSend = comFIRST_BYTE; cByteToSend <= comLAST_BYTE; cByteToSend++ )
		{
			if( xSerialPutChar( xPort, cByteToSend, comNO_BLOCK ) == pdPASS )
    2a20:	80 e0       	ldi	r24, 0x00	; 0
    2a22:	90 e0       	ldi	r25, 0x00	; 0
    2a24:	61 2f       	mov	r22, r17
    2a26:	40 e0       	ldi	r20, 0x00	; 0
    2a28:	50 e0       	ldi	r21, 0x00	; 0
    2a2a:	0e 94 b8 01 	call	0x370	; 0x370 <xSerialPutChar>
    2a2e:	81 30       	cpi	r24, 0x01	; 1
    2a30:	21 f4       	brne	.+8      	; 0x2a3a <vComTxTask+0x20>
			{
				vParTestToggleLED( uxBaseLED + comTX_LED_OFFSET );
    2a32:	80 91 d5 07 	lds	r24, 0x07D5
    2a36:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <vParTestToggleLED>

	for( ;; )
	{
		/* Simply transmit a sequence of characters from comFIRST_BYTE to
		comLAST_BYTE. */
		for( cByteToSend = comFIRST_BYTE; cByteToSend <= comLAST_BYTE; cByteToSend++ )
    2a3a:	1f 5f       	subi	r17, 0xFF	; 255
    2a3c:	19 35       	cpi	r17, 0x59	; 89
    2a3e:	84 f3       	brlt	.-32     	; 0x2a20 <vComTxTask+0x6>
				vParTestToggleLED( uxBaseLED + comTX_LED_OFFSET );
			}
		}

		/* Turn the LED off while we are not doing anything. */
		vParTestSetLED( uxBaseLED + comTX_LED_OFFSET, pdFALSE );
    2a40:	80 91 d5 07 	lds	r24, 0x07D5
    2a44:	60 e0       	ldi	r22, 0x00	; 0
    2a46:	0e 94 03 01 	call	0x206	; 0x206 <vParTestSetLED>

		/* We have posted all the characters in the string - wait before
		re-sending.  Wait a pseudo-random time as this will provide a better
		test. */
		xTimeToWait = xTaskGetTickCount() + comOFFSET_TIME;
    2a4a:	0e 94 98 03 	call	0x730	; 0x730 <xTaskGetTickCount>

		/* Make sure we don't wait too long... */
		xTimeToWait %= comTX_MAX_BLOCK_TIME;
    2a4e:	03 96       	adiw	r24, 0x03	; 3
    2a50:	66 e9       	ldi	r22, 0x96	; 150
    2a52:	70 e0       	ldi	r23, 0x00	; 0
    2a54:	0e 94 54 15 	call	0x2aa8	; 0x2aa8 <__udivmodhi4>

		/* ...but we do want to wait. */
		if( xTimeToWait < comTX_MIN_BLOCK_TIME )
    2a58:	82 33       	cpi	r24, 0x32	; 50
    2a5a:	91 05       	cpc	r25, r1
    2a5c:	10 f4       	brcc	.+4      	; 0x2a62 <vComTxTask+0x48>
    2a5e:	82 e3       	ldi	r24, 0x32	; 50
    2a60:	90 e0       	ldi	r25, 0x00	; 0
		{
			xTimeToWait = comTX_MIN_BLOCK_TIME;
		}

		vTaskDelay( xTimeToWait );
    2a62:	0e 94 99 08 	call	0x1132	; 0x1132 <vTaskDelay>
    2a66:	11 e4       	ldi	r17, 0x41	; 65
    2a68:	db cf       	rjmp	.-74     	; 0x2a20 <vComTxTask+0x6>

00002a6a <__mulsi3>:
    2a6a:	62 9f       	mul	r22, r18
    2a6c:	d0 01       	movw	r26, r0
    2a6e:	73 9f       	mul	r23, r19
    2a70:	f0 01       	movw	r30, r0
    2a72:	82 9f       	mul	r24, r18
    2a74:	e0 0d       	add	r30, r0
    2a76:	f1 1d       	adc	r31, r1
    2a78:	64 9f       	mul	r22, r20
    2a7a:	e0 0d       	add	r30, r0
    2a7c:	f1 1d       	adc	r31, r1
    2a7e:	92 9f       	mul	r25, r18
    2a80:	f0 0d       	add	r31, r0
    2a82:	83 9f       	mul	r24, r19
    2a84:	f0 0d       	add	r31, r0
    2a86:	74 9f       	mul	r23, r20
    2a88:	f0 0d       	add	r31, r0
    2a8a:	65 9f       	mul	r22, r21
    2a8c:	f0 0d       	add	r31, r0
    2a8e:	99 27       	eor	r25, r25
    2a90:	72 9f       	mul	r23, r18
    2a92:	b0 0d       	add	r27, r0
    2a94:	e1 1d       	adc	r30, r1
    2a96:	f9 1f       	adc	r31, r25
    2a98:	63 9f       	mul	r22, r19
    2a9a:	b0 0d       	add	r27, r0
    2a9c:	e1 1d       	adc	r30, r1
    2a9e:	f9 1f       	adc	r31, r25
    2aa0:	bd 01       	movw	r22, r26
    2aa2:	cf 01       	movw	r24, r30
    2aa4:	11 24       	eor	r1, r1
    2aa6:	08 95       	ret

00002aa8 <__udivmodhi4>:
    2aa8:	aa 1b       	sub	r26, r26
    2aaa:	bb 1b       	sub	r27, r27
    2aac:	51 e1       	ldi	r21, 0x11	; 17
    2aae:	07 c0       	rjmp	.+14     	; 0x2abe <__udivmodhi4_ep>

00002ab0 <__udivmodhi4_loop>:
    2ab0:	aa 1f       	adc	r26, r26
    2ab2:	bb 1f       	adc	r27, r27
    2ab4:	a6 17       	cp	r26, r22
    2ab6:	b7 07       	cpc	r27, r23
    2ab8:	10 f0       	brcs	.+4      	; 0x2abe <__udivmodhi4_ep>
    2aba:	a6 1b       	sub	r26, r22
    2abc:	b7 0b       	sbc	r27, r23

00002abe <__udivmodhi4_ep>:
    2abe:	88 1f       	adc	r24, r24
    2ac0:	99 1f       	adc	r25, r25
    2ac2:	5a 95       	dec	r21
    2ac4:	a9 f7       	brne	.-22     	; 0x2ab0 <__udivmodhi4_loop>
    2ac6:	80 95       	com	r24
    2ac8:	90 95       	com	r25
    2aca:	bc 01       	movw	r22, r24
    2acc:	cd 01       	movw	r24, r26
    2ace:	08 95       	ret

00002ad0 <__udivmodsi4>:
    2ad0:	a1 e2       	ldi	r26, 0x21	; 33
    2ad2:	1a 2e       	mov	r1, r26
    2ad4:	aa 1b       	sub	r26, r26
    2ad6:	bb 1b       	sub	r27, r27
    2ad8:	fd 01       	movw	r30, r26
    2ada:	0d c0       	rjmp	.+26     	; 0x2af6 <__udivmodsi4_ep>

00002adc <__udivmodsi4_loop>:
    2adc:	aa 1f       	adc	r26, r26
    2ade:	bb 1f       	adc	r27, r27
    2ae0:	ee 1f       	adc	r30, r30
    2ae2:	ff 1f       	adc	r31, r31
    2ae4:	a2 17       	cp	r26, r18
    2ae6:	b3 07       	cpc	r27, r19
    2ae8:	e4 07       	cpc	r30, r20
    2aea:	f5 07       	cpc	r31, r21
    2aec:	20 f0       	brcs	.+8      	; 0x2af6 <__udivmodsi4_ep>
    2aee:	a2 1b       	sub	r26, r18
    2af0:	b3 0b       	sbc	r27, r19
    2af2:	e4 0b       	sbc	r30, r20
    2af4:	f5 0b       	sbc	r31, r21

00002af6 <__udivmodsi4_ep>:
    2af6:	66 1f       	adc	r22, r22
    2af8:	77 1f       	adc	r23, r23
    2afa:	88 1f       	adc	r24, r24
    2afc:	99 1f       	adc	r25, r25
    2afe:	1a 94       	dec	r1
    2b00:	69 f7       	brne	.-38     	; 0x2adc <__udivmodsi4_loop>
    2b02:	60 95       	com	r22
    2b04:	70 95       	com	r23
    2b06:	80 95       	com	r24
    2b08:	90 95       	com	r25
    2b0a:	9b 01       	movw	r18, r22
    2b0c:	ac 01       	movw	r20, r24
    2b0e:	bd 01       	movw	r22, r26
    2b10:	cf 01       	movw	r24, r30
    2b12:	08 95       	ret

00002b14 <__divmodsi4>:
    2b14:	97 fb       	bst	r25, 7
    2b16:	09 2e       	mov	r0, r25
    2b18:	05 26       	eor	r0, r21
    2b1a:	0e d0       	rcall	.+28     	; 0x2b38 <__divmodsi4_neg1>
    2b1c:	57 fd       	sbrc	r21, 7
    2b1e:	04 d0       	rcall	.+8      	; 0x2b28 <__divmodsi4_neg2>
    2b20:	d7 df       	rcall	.-82     	; 0x2ad0 <__udivmodsi4>
    2b22:	0a d0       	rcall	.+20     	; 0x2b38 <__divmodsi4_neg1>
    2b24:	00 1c       	adc	r0, r0
    2b26:	38 f4       	brcc	.+14     	; 0x2b36 <__divmodsi4_exit>

00002b28 <__divmodsi4_neg2>:
    2b28:	50 95       	com	r21
    2b2a:	40 95       	com	r20
    2b2c:	30 95       	com	r19
    2b2e:	21 95       	neg	r18
    2b30:	3f 4f       	sbci	r19, 0xFF	; 255
    2b32:	4f 4f       	sbci	r20, 0xFF	; 255
    2b34:	5f 4f       	sbci	r21, 0xFF	; 255

00002b36 <__divmodsi4_exit>:
    2b36:	08 95       	ret

00002b38 <__divmodsi4_neg1>:
    2b38:	f6 f7       	brtc	.-4      	; 0x2b36 <__divmodsi4_exit>
    2b3a:	90 95       	com	r25
    2b3c:	80 95       	com	r24
    2b3e:	70 95       	com	r23
    2b40:	61 95       	neg	r22
    2b42:	7f 4f       	sbci	r23, 0xFF	; 255
    2b44:	8f 4f       	sbci	r24, 0xFF	; 255
    2b46:	9f 4f       	sbci	r25, 0xFF	; 255
    2b48:	08 95       	ret

00002b4a <memcpy>:
    2b4a:	fb 01       	movw	r30, r22
    2b4c:	dc 01       	movw	r26, r24
    2b4e:	02 c0       	rjmp	.+4      	; 0x2b54 <memcpy+0xa>
    2b50:	01 90       	ld	r0, Z+
    2b52:	0d 92       	st	X+, r0
    2b54:	41 50       	subi	r20, 0x01	; 1
    2b56:	50 40       	sbci	r21, 0x00	; 0
    2b58:	d8 f7       	brcc	.-10     	; 0x2b50 <memcpy+0x6>
    2b5a:	08 95       	ret

00002b5c <__eerd_block_m328p>:
    2b5c:	dc 01       	movw	r26, r24
    2b5e:	cb 01       	movw	r24, r22

00002b60 <__eerd_blraw_m328p>:
    2b60:	fc 01       	movw	r30, r24
    2b62:	f9 99       	sbic	0x1f, 1	; 31
    2b64:	fe cf       	rjmp	.-4      	; 0x2b62 <__eerd_blraw_m328p+0x2>
    2b66:	06 c0       	rjmp	.+12     	; 0x2b74 <__eerd_blraw_m328p+0x14>
    2b68:	f2 bd       	out	0x22, r31	; 34
    2b6a:	e1 bd       	out	0x21, r30	; 33
    2b6c:	f8 9a       	sbi	0x1f, 0	; 31
    2b6e:	31 96       	adiw	r30, 0x01	; 1
    2b70:	00 b4       	in	r0, 0x20	; 32
    2b72:	0d 92       	st	X+, r0
    2b74:	41 50       	subi	r20, 0x01	; 1
    2b76:	50 40       	sbci	r21, 0x00	; 0
    2b78:	b8 f7       	brcc	.-18     	; 0x2b68 <__eerd_blraw_m328p+0x8>
    2b7a:	08 95       	ret

00002b7c <__eewr_byte_m328p>:
    2b7c:	26 2f       	mov	r18, r22

00002b7e <__eewr_r18_m328p>:
    2b7e:	f9 99       	sbic	0x1f, 1	; 31
    2b80:	fe cf       	rjmp	.-4      	; 0x2b7e <__eewr_r18_m328p>
    2b82:	1f ba       	out	0x1f, r1	; 31
    2b84:	92 bd       	out	0x22, r25	; 34
    2b86:	81 bd       	out	0x21, r24	; 33
    2b88:	20 bd       	out	0x20, r18	; 32
    2b8a:	0f b6       	in	r0, 0x3f	; 63
    2b8c:	f8 94       	cli
    2b8e:	fa 9a       	sbi	0x1f, 2	; 31
    2b90:	f9 9a       	sbi	0x1f, 1	; 31
    2b92:	0f be       	out	0x3f, r0	; 63
    2b94:	01 96       	adiw	r24, 0x01	; 1
    2b96:	08 95       	ret

00002b98 <_exit>:
    2b98:	f8 94       	cli

00002b9a <__stop_program>:
    2b9a:	ff cf       	rjmp	.-2      	; 0x2b9a <__stop_program>
